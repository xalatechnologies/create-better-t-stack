import React, { useState, useCallback, useEffect } from 'react';
{{#if typescript}}
interface VippsCheckoutProps {
  readonly amount: number;
  readonly orderId: string;
  readonly productName: string;
  readonly productDescription?: string;
  readonly onSuccess?: (payment: any) => void;
  readonly onError?: (error: Error) => void;
  readonly onCancel?: () => void;
  readonly className?: string;
}
{{/if}}

/**
 * Vipps Checkout Component for {{projectName}}
 * Professional Norwegian payment integration with Vipps
 */
export const VippsCheckout{{#if typescript}}: React.FC<VippsCheckoutProps>{{/if}} = ({
  amount,
  orderId,
  productName,
  productDescription,
  onSuccess,
  onError,
  onCancel,
  className = ''
}) => {
  const [loading, setLoading] = useState(false);
  const [status, setStatus] = useState{{#if typescript}}<'idle' | 'processing' | 'success' | 'error'>{{/if}}('idle');
  const [paymentDetails, setPaymentDetails] = useState{{#if typescript}}<any>{{/if}}(null);
  const [showVATDetails, setShowVATDetails] = useState(false);

  // Calculate VAT (Norwegian MVA)
  const vatRate = 25; // 25% standard Norwegian VAT
  const vatAmount = amount * (vatRate / 100);
  const netAmount = amount - vatAmount;

  const initiatePayment = useCallback(async () => {
    setLoading(true);
    setStatus('processing');

    try {
      const response = await fetch('/api/payments/vipps/initiate', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          orderId,
          amount: Math.round(amount * 100), // Convert to øre
          productName,
          productDescription,
          customerInfo: {
            // Will be collected in Vipps app
          },
          transaction: {
            orderId,
            amount: Math.round(amount * 100),
            transactionText: productName,
            skipLandingPage: false,
            scope: 'name phoneNumber address birthDate email'
          }
        })
      });

      if (!response.ok) {
        throw new Error('Payment initiation failed');
      }

      const data = await response.json();
      
      if (data.url) {
        // Store order ID for status checking
        sessionStorage.setItem('vipps_order_id', orderId);
        
        // Redirect to Vipps
        window.location.href = data.url;
      } else {
        throw new Error('No payment URL received');
      }
    } catch (error) {
      console.error('Payment error:', error);
      setStatus('error');
      onError?.(error{{#if typescript}} as Error{{/if}});
    } finally {
      setLoading(false);
    }
  }, [amount, orderId, productName, productDescription, onError]);

  // Check payment status on mount (for callback page)
  useEffect(() => {
    const urlParams = new URLSearchParams(window.location.search);
    const callbackOrderId = urlParams.get('orderId');
    
    if (callbackOrderId) {
      checkPaymentStatus(callbackOrderId);
    }
  }, []);

  const checkPaymentStatus = async (checkOrderId{{#if typescript}}: string{{/if}}) => {
    try {
      const response = await fetch(`/api/payments/vipps/status/${checkOrderId}`);
      const data = await response.json();
      
      setPaymentDetails(data);
      
      if (data.status === 'SALE' || data.status === 'RESERVE') {
        setStatus('success');
        onSuccess?.(data);
      } else if (data.status === 'CANCEL') {
        setStatus('error');
        onCancel?.();
      }
    } catch (error) {
      console.error('Status check error:', error);
      setStatus('error');
    }
  };

  const formatCurrency = (amount{{#if typescript}}: number{{/if}}) => {
    return new Intl.NumberFormat('nb-NO', {
      style: 'currency',
      currency: 'NOK',
      minimumFractionDigits: 2,
      maximumFractionDigits: 2
    }).format(amount);
  };

  if (status === 'success' && paymentDetails) {
    return (
      <div className={`max-w-md mx-auto p-8 bg-white rounded-2xl shadow-xl ${className}`}>
        <div className="text-center">
          <div className="w-20 h-20 mx-auto mb-6 bg-green-100 rounded-full flex items-center justify-center">
            <svg className="w-10 h-10 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
            </svg>
          </div>
          
          <h2 className="text-2xl font-bold text-gray-900 mb-2">Betaling fullført!</h2>
          <p className="text-gray-600 mb-6">Takk for din bestilling</p>
          
          <div className="bg-gray-50 rounded-lg p-4 mb-6">
            <div className="flex justify-between items-center mb-2">
              <span className="text-gray-600">Ordrenummer:</span>
              <span className="font-mono font-medium">{paymentDetails.orderId}</span>
            </div>
            <div className="flex justify-between items-center">
              <span className="text-gray-600">Beløp betalt:</span>
              <span className="font-bold text-lg">{formatCurrency(amount)}</span>
            </div>
          </div>

          <button
            onClick={() => window.location.href = '/orders'}
            className="w-full bg-vipps-orange hover:bg-vipps-orange-dark text-white font-medium py-3 px-6 rounded-lg transition-colors"
          >
            Se ordredetaljer
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className={`max-w-md mx-auto p-8 bg-white rounded-2xl shadow-xl ${className}`}>
      {/* Vipps Logo and Header */}
      <div className="text-center mb-8">
        <div className="inline-flex items-center justify-center p-4 bg-vipps-orange bg-opacity-10 rounded-full mb-4">
          <svg className="w-12 h-12" viewBox="0 0 60 60" fill="none">
            <path d="M30 0C13.432 0 0 13.432 0 30s13.432 30 30 30 30-13.432 30-30S46.568 0 30 0z" fill="#FF5B24"/>
            <path d="M42.5 22.5L35 30l7.5 7.5M25 15l-7.5 7.5L25 30l-7.5 7.5L25 45" stroke="#fff" strokeWidth="3" strokeLinecap="round" strokeLinejoin="round"/>
          </svg>
        </div>
        <h2 className="text-2xl font-bold text-gray-900">Betal med Vipps</h2>
        <p className="text-gray-600 mt-2">Rask, trygg og enkel betaling</p>
      </div>

      {/* Product Details */}
      <div className="bg-gray-50 rounded-xl p-6 mb-6">
        <h3 className="font-semibold text-gray-900 mb-1">{productName}</h3>
        {productDescription && (
          <p className="text-sm text-gray-600 mb-4">{productDescription}</p>
        )}
        
        <div className="space-y-2">
          <div className="flex justify-between items-center">
            <span className="text-gray-600">Pris eks. MVA:</span>
            <span className="font-medium">{formatCurrency(netAmount)}</span>
          </div>
          <div className="flex justify-between items-center">
            <span className="text-gray-600">MVA (25%):</span>
            <span className="font-medium">{formatCurrency(vatAmount)}</span>
          </div>
          <div className="border-t pt-2 flex justify-between items-center">
            <span className="font-semibold text-gray-900">Totalt å betale:</span>
            <span className="text-2xl font-bold text-vipps-orange">{formatCurrency(amount)}</span>
          </div>
        </div>

        <button
          onClick={() => setShowVATDetails(!showVATDetails)}
          className="mt-4 text-sm text-vipps-orange hover:text-vipps-orange-dark flex items-center"
        >
          <svg className={`w-4 h-4 mr-1 transform transition-transform ${showVATDetails ? 'rotate-180' : ''}`} fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
          </svg>
          {showVATDetails ? 'Skjul MVA-detaljer' : 'Vis MVA-detaljer'}
        </button>

        {showVATDetails && (
          <div className="mt-4 p-4 bg-white rounded-lg text-sm text-gray-600">
            <p className="mb-2">Merverdiavgift (MVA) på 25% er inkludert i totalbeløpet i henhold til norsk lovgivning.</p>
            <p>MVA-registreringsnummer vil vises på kvitteringen.</p>
          </div>
        )}
      </div>

      {/* Payment Button */}
      <button
        onClick={initiatePayment}
        disabled={loading || status === 'processing'}
        className="w-full bg-vipps-orange hover:bg-vipps-orange-dark text-white font-bold py-4 px-6 rounded-xl transition-all transform hover:scale-[1.02] disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none flex items-center justify-center"
      >
        {loading ? (
          <>
            <svg className="animate-spin h-5 w-5 mr-3" viewBox="0 0 24 24">
              <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4" fill="none" />
              <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z" />
            </svg>
            Behandler...
          </>
        ) : (
          <>
            <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 18h.01M8 21h8a2 2 0 002-2V5a2 2 0 00-2-2H8a2 2 0 00-2 2v14a2 2 0 002 2z" />
            </svg>
            Betal {formatCurrency(amount)} med Vipps
          </>
        )}
      </button>

      {/* Security Info */}
      <div className="mt-6 flex items-center justify-center space-x-6 text-xs text-gray-500">
        <div className="flex items-center">
          <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
          </svg>
          <span>Sikker betaling</span>
        </div>
        <div className="flex items-center">
          <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z" />
          </svg>
          <span>BankID verifisering</span>
        </div>
        <div className="flex items-center">
          <span className="text-lg mr-1">🇳🇴</span>
          <span>Norsk</span>
        </div>
      </div>

      {/* Cancel Link */}
      <div className="mt-4 text-center">
        <button
          onClick={onCancel}
          className="text-sm text-gray-500 hover:text-gray-700 underline"
        >
          Avbryt betaling
        </button>
      </div>

      {/* Error State */}
      {status === 'error' && (
        <div className="mt-4 p-4 bg-red-50 border border-red-200 rounded-lg">
          <div className="flex items-center">
            <svg className="w-5 h-5 text-red-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
            <p className="text-sm text-red-600">
              Betalingen kunne ikke fullføres. Vennligst prøv igjen.
            </p>
          </div>
        </div>
      )}
    </div>
  );
};

// Additional style for Vipps orange color
const style = document.createElement('style');
style.textContent = `
  .bg-vipps-orange { background-color: #FF5B24; }
  .bg-vipps-orange-dark { background-color: #E64100; }
  .text-vipps-orange { color: #FF5B24; }
  .text-vipps-orange-dark { color: #E64100; }
  .hover\\:bg-vipps-orange-dark:hover { background-color: #E64100; }
  .hover\\:text-vipps-orange-dark:hover { color: #E64100; }
`;
document.head.appendChild(style);