import React, { useState, useEffect } from 'react';
import { loadStripe } from '@stripe/stripe-js';
import {
  Elements,
  CardElement,
  useStripe,
  useElements,
  PaymentElement,
  LinkAuthenticationElement,
  AddressElement
} from '@stripe/react-stripe-js';
{{#if typescript}}
import type { 
  Stripe,
  StripeElements,
  PaymentIntent,
  StripeError,
  Appearance
} from '@stripe/stripe-js';

interface StripeCheckoutProps {
  readonly amount: number;
  readonly currency?: string;
  readonly productName: string;
  readonly productDescription?: string;
  readonly onSuccess?: (paymentIntent: PaymentIntent) => void;
  readonly onError?: (error: StripeError) => void;
  readonly billingAddressRequired?: boolean;
  readonly shippingAddressRequired?: boolean;
}
{{/if}}

// Initialize Stripe
const stripePromise = loadStripe(process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY!);

/**
 * Stripe Checkout Form Component for {{projectName}}
 * Professional payment form with modern UI and comprehensive features
 */
const CheckoutForm{{#if typescript}}: React.FC<StripeCheckoutProps>{{/if}} = ({ 
  amount,
  currency = 'USD',
  productName,
  productDescription,
  onSuccess,
  onError,
  billingAddressRequired = true,
  shippingAddressRequired = false
}) => {
  const stripe = useStripe();
  const elements = useElements();
  const [email, setEmail] = useState('');
  const [processing, setProcessing] = useState(false);
  const [succeeded, setSucceeded] = useState(false);
  const [error, setError] = useState{{#if typescript}}<string | null>{{/if}}(null);
  const [clientSecret, setClientSecret] = useState('');
  const [paymentMethod, setPaymentMethod] = useState('card');

  useEffect(() => {
    // Create PaymentIntent on mount
    createPaymentIntent();
  }, [amount, currency]);

  const createPaymentIntent = async () => {
    try {
      const response = await fetch('/api/payments/stripe/create-payment-intent', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          amount: Math.round(amount * 100), // Convert to cents
          currency,
          metadata: {
            productName,
            productDescription: productDescription || ''
          }
        })
      });

      const data = await response.json();
      setClientSecret(data.clientSecret);
    } catch (err) {
      console.error('Failed to create payment intent:', err);
      setError('Failed to initialize payment');
    }
  };

  const handleSubmit = async (event{{#if typescript}}: React.FormEvent{{/if}}) => {
    event.preventDefault();

    if (!stripe || !elements) {
      return;
    }

    setProcessing(true);
    setError(null);

    try {
      const result = await stripe.confirmPayment({
        elements,
        confirmParams: {
          return_url: `${window.location.origin}/payment/complete`,
          receipt_email: email,
        },
        redirect: 'if_required'
      });

      if (result.error) {
        setError(result.error.message || 'Payment failed');
        onError?.(result.error);
      } else if (result.paymentIntent?.status === 'succeeded') {
        setSucceeded(true);
        onSuccess?.(result.paymentIntent);
      }
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Payment failed';
      setError(errorMessage);
      onError?.({{#if typescript}}{ type: 'validation_error', message: errorMessage } as StripeError{{else}}{ type: 'validation_error', message: errorMessage }{{/if}});
    } finally {
      setProcessing(false);
    }
  };

  const appearance{{#if typescript}}: Appearance{{/if}} = {
    theme: 'stripe',
    variables: {
      colorPrimary: '#3b82f6',
      colorBackground: '#ffffff',
      colorText: '#1f2937',
      colorDanger: '#ef4444',
      fontFamily: 'Inter, system-ui, sans-serif',
      spacingUnit: '4px',
      borderRadius: '8px',
    },
    rules: {
      '.Label': {
        fontSize: '14px',
        fontWeight: '500',
        marginBottom: '8px',
      },
      '.Input': {
        padding: '12px',
        fontSize: '16px',
        boxShadow: '0 1px 3px 0 rgba(0, 0, 0, 0.1)',
      },
      '.Input:focus': {
        boxShadow: '0 0 0 3px rgba(59, 130, 246, 0.1)',
      }
    }
  };

  if (succeeded) {
    return (
      <div className="max-w-2xl mx-auto p-8">
        <div className="bg-white rounded-2xl shadow-xl p-8 text-center">
          <div className="w-20 h-20 mx-auto mb-6 bg-green-100 rounded-full flex items-center justify-center">
            <svg className="w-10 h-10 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
            </svg>
          </div>
          
          <h2 className="text-2xl font-bold text-gray-900 mb-2">Payment Successful!</h2>
          <p className="text-gray-600 mb-6">Thank you for your purchase</p>
          
          <div className="bg-gray-50 rounded-lg p-4 mb-6">
            <p className="text-sm text-gray-600">A receipt has been sent to</p>
            <p className="font-medium">{email}</p>
          </div>

          <button
            onClick={() => window.location.href = '/orders'}
            className="bg-blue-600 hover:bg-blue-700 text-white font-semibold py-3 px-8 rounded-lg transition-colors"
          >
            View Order Details
          </button>
        </div>
      </div>
    );
  }

  return (
    <form onSubmit={handleSubmit} className="max-w-2xl mx-auto p-8">
      <div className="bg-white rounded-2xl shadow-xl p-8">
        {/* Header */}
        <div className="mb-8">
          <h2 className="text-2xl font-bold text-gray-900 mb-2">Complete Your Purchase</h2>
          <p className="text-gray-600">{productName}</p>
          {productDescription && (
            <p className="text-sm text-gray-500 mt-1">{productDescription}</p>
          )}
        </div>

        {/* Amount Display */}
        <div className="bg-gray-50 rounded-lg p-6 mb-8">
          <div className="flex justify-between items-center">
            <span className="text-gray-600">Total Amount</span>
            <span className="text-3xl font-bold text-gray-900">
              {new Intl.NumberFormat('en-US', {
                style: 'currency',
                currency: currency
              }).format(amount)}
            </span>
          </div>
        </div>

        {/* Email Input */}
        <div className="mb-6">
          <LinkAuthenticationElement
            onChange={(e) => setEmail(e.value.email)}
            options={{
              defaultValues: {
                email: ''
              }
            }}
          />
        </div>

        {/* Payment Element */}
        <div className="mb-6">
          <PaymentElement 
            options={{
              layout: {
                type: 'tabs',
                defaultCollapsed: false,
                radios: false,
                spacedAccordionItems: true
              },
              paymentMethodOrder: ['card', 'apple_pay', 'google_pay', 'klarna', 'affirm'],
              fields: {
                billingDetails: {
                  address: billingAddressRequired ? 'auto' : 'never'
                }
              }
            }}
          />
        </div>

        {/* Shipping Address */}
        {shippingAddressRequired && (
          <div className="mb-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">Shipping Address</h3>
            <AddressElement 
              options={{
                mode: 'shipping',
                allowedCountries: ['US', 'CA', 'GB', 'NO', 'SE', 'DK', 'FI', 'DE', 'FR'],
                blockPoBox: true
              }}
            />
          </div>
        )}

        {/* Error Message */}
        {error && (
          <div className="mb-6 p-4 bg-red-50 border border-red-200 rounded-lg">
            <div className="flex items-center">
              <svg className="w-5 h-5 text-red-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
              <p className="text-sm text-red-600">{error}</p>
            </div>
          </div>
        )}

        {/* Submit Button */}
        <button
          type="submit"
          disabled={!stripe || processing || !clientSecret}
          className="w-full bg-blue-600 hover:bg-blue-700 text-white font-semibold py-4 px-6 rounded-lg transition-all transform hover:scale-[1.02] disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none flex items-center justify-center"
        >
          {processing ? (
            <>
              <svg className="animate-spin h-5 w-5 mr-3" viewBox="0 0 24 24">
                <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4" fill="none" />
                <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z" />
              </svg>
              Processing Payment...
            </>
          ) : (
            `Pay ${new Intl.NumberFormat('en-US', {
              style: 'currency',
              currency: currency
            }).format(amount)}`
          )}
        </button>

        {/* Security Info */}
        <div className="mt-8 pt-8 border-t border-gray-200">
          <div className="flex items-center justify-center space-x-6 text-xs text-gray-500">
            <div className="flex items-center">
              <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
              </svg>
              <span>Secure payment</span>
            </div>
            <div className="flex items-center">
              <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z" />
              </svg>
              <span>PCI compliant</span>
            </div>
            <div className="flex items-center">
              <span className="font-semibold mr-1">Powered by</span>
              <svg className="h-4" viewBox="0 0 60 25" fill="none">
                <path d="M59.64 14.28h-8.06c.19 1.93 1.6 2.55 3.2 2.55 1.64 0 2.96-.37 4.05-.95v3.32a8.33 8.33 0 0 1-4.56 1.1c-4.01 0-6.83-2.5-6.83-7.48 0-4.19 2.39-7.52 6.3-7.52 3.92 0 5.96 3.28 5.96 7.5 0 .4-.04 1.26-.06 1.48zm-5.92-5.62c-1.03 0-2.17.73-2.17 2.58h4.25c0-1.85-1.07-2.58-2.08-2.58zM40.95 20.3c-1.44 0-2.32-.6-2.9-1.04l-.02 4.63-4.12.87V5.57h3.76l.08 1.02a4.7 4.7 0 0 1 3.23-1.29c2.9 0 5.62 2.6 5.62 7.4 0 5.23-2.7 7.6-5.65 7.6zM40 8.95c-.95 0-1.54.34-1.97.81l.02 6.12c.4.44.98.78 1.95.78 1.52 0 2.54-1.65 2.54-3.87 0-2.15-1.04-3.84-2.54-3.84zM28.24 5.57h4.13v14.44h-4.13V5.57zm0-4.7L32.37 0v3.36l-4.13.88V.88zm-3.32 9.35v9.79H21.2l-.08-.97a4.32 4.32 0 0 1-3.15 1.18c-2.98 0-5.63-2.54-5.63-7.51 0-5.24 2.7-7.58 5.65-7.58 1.25 0 2.3.46 2.93.97V.88l4 .83zm-4.02 4.15c0 2.17 1.05 3.82 2.56 3.82.98 0 1.58-.34 2-.81V8.33c-.42-.45-1.05-.8-2.02-.8-1.5 0-2.54 1.65-2.54 3.88zm-8.95 3.87c0 1.16.89 1.68 1.82 1.68.5 0 1.06-.08 1.58-.23v3.14a6.89 6.89 0 0 1-2.7.44c-2.49 0-4.65-1.17-4.65-4.8V9.14H4.99v-3.5H8v-3.6l4.02-.86v4.47h3.43v3.49h-3.43v5.11z" fill="#6772e5"/>
              </svg>
            </div>
          </div>
        </div>
      </div>
    </form>
  );
};

/**
 * Stripe Checkout Component for {{projectName}}
 * Wrapper component with Stripe Elements provider
 */
export const StripeCheckout{{#if typescript}}: React.FC<StripeCheckoutProps>{{/if}} = (props) => {
  const appearance{{#if typescript}}: Appearance{{/if}} = {
    theme: 'stripe',
    variables: {
      colorPrimary: '#3b82f6',
      colorBackground: '#ffffff',
      colorText: '#1f2937',
      colorDanger: '#ef4444',
      fontFamily: 'Inter, system-ui, sans-serif',
      spacingUnit: '4px',
      borderRadius: '8px',
    }
  };

  return (
    <Elements 
      stripe={stripePromise}
      options={{
        appearance,
        loader: 'auto'
      }}
    >
      <CheckoutForm {...props} />
    </Elements>
  );
};