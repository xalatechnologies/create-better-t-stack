{{#if typescript}}
import type { 
  BankIDConfig, 
  BankIDUserProfile, 
  BankIDAuthResponse,
  BankIDCollectResponse,
  BankIDCertificateInfo
} from './bankid.types';
{{/if}}
import * as fs from 'fs';
import * as https from 'https';
import * as crypto from 'crypto';

/**
 * BankID Authentication Service
 * Handles all BankID authentication operations including certificate management,
 * authentication requests, and user data extraction
 */
export class BankIDAuthService {
  private config{{#if typescript}}: BankIDConfig{{/if}};
  private agent{{#if typescript}}: https.Agent | null{{/if}} = null;
  private activeRequests{{#if typescript}}: Map<string, NodeJS.Timeout>{{/if}} = new Map();
  
  constructor(config{{#if typescript}}: BankIDConfig{{/if}}) {
    this.config = config;
    this.initializeHttpsAgent();
  }

  /**
   * Initialize HTTPS agent with client certificates
   */
  private initializeHttpsAgent(){{#if typescript}}: void{{/if}} {
    {{#if includeCertificates}}
    try {
      if (this.config.certificatePath && fs.existsSync(this.config.certificatePath)) {
        const certData = fs.readFileSync(this.config.certificatePath);
        
        // Load certificate and key
        const cert = this.extractCertificateFromP12(certData, this.config.certificatePassword);
        
        this.agent = new https.Agent({
          cert: cert.certificate,
          key: cert.privateKey,
          passphrase: this.config.certificatePassword,
          ca: this.loadTrustedCAs(),
          rejectUnauthorized: this.config.environment === 'production',
          secureProtocol: 'TLSv1_2_method', // BankID requires TLS 1.2+
        });
        
        console.log('BankID HTTPS agent initialized with certificates');
      } else if (this.config.environment === 'production') {
        throw new Error('Certificate is required for production environment');
      }
    } catch (error) {
      console.error('Failed to initialize HTTPS agent:', error);
      if (this.config.environment === 'production') {
        throw error;
      }
    }
    {{else}}
    // Certificate handling disabled
    this.agent = new https.Agent({
      rejectUnauthorized: this.config.environment === 'production',
    });
    {{/if}}
  }

  {{#if includeCertificates}}
  /**
   * Extract certificate and private key from PKCS#12 file
   */
  private extractCertificateFromP12(
    p12Data{{#if typescript}}: Buffer{{/if}},
    password{{#if typescript}}?: string{{/if}}
  ){{#if typescript}}: { certificate: Buffer; privateKey: Buffer }{{/if}} {
    // This is a simplified implementation
    // In production, use a proper PKCS#12 parser like 'node-forge' or 'pkcs12'
    try {
      // For now, assume the P12 file contains both cert and key
      return {
        certificate: p12Data,
        privateKey: p12Data,
      };
    } catch (error) {
      throw new Error(\`Failed to extract certificate: \${error.message}\`);
    }
  }

  /**
   * Load trusted CA certificates
   */
  private loadTrustedCAs(){{#if typescript}}: Buffer[]{{/if}} {
    const trustedCAs{{#if typescript}}: Buffer[]{{/if}} = [];
    
    if (this.config.trustedCertificates) {
      for (const certPath of this.config.trustedCertificates) {
        try {
          if (fs.existsSync(certPath)) {
            trustedCAs.push(fs.readFileSync(certPath));
          }
        } catch (error) {
          console.warn(\`Failed to load trusted CA: \${certPath}\`, error);
        }
      }
    }
    
    return trustedCAs;
  }
  {{/if}}

  /**
   * Start BankID authentication
   * @param method - Authentication method ('mobile' or 'qr')
   * @param personalNumber - Personal number (optional for QR)
   * @param userVisibleData - Data to show to user (optional)
   * @returns Authentication response with order reference
   */
  async startAuth(
    method{{#if typescript}}: 'mobile' | 'qr'{{/if}},
    personalNumber{{#if typescript}}?: string{{/if}},
    userVisibleData{{#if typescript}}?: string{{/if}},
    userNonVisibleData{{#if typescript}}?: string{{/if}}
  ){{#if typescript}}: Promise<BankIDAuthResponse>{{/if}} {
    try {
      const endpoint = 'auth';
      const url = \`\${this.config.apiBaseUrl}/rp/v6.0/\${endpoint}\`;
      
      // Prepare request data
      const requestData{{#if typescript}}: any{{/if}} = {
        endUserIp: this.getClientIp(),
        requirements: {
          allowFingerprint: true,
          certificatePolicies: this.getCertificatePolicies(),
          issuerCn: this.getIssuerCn(),
          autoStartTokenRequired: method === 'mobile',
          allowSmartIdCapture: false,
        },
      };

      // Add personal number if provided (required for mobile, optional for QR)
      if (personalNumber) {
        requestData.personalNumber = personalNumber;
      }

      // Add user visible data if provided
      if (userVisibleData) {
        requestData.userVisibleData = Buffer.from(userVisibleData, 'utf8').toString('base64');
      }

      // Add user non-visible data if provided
      if (userNonVisibleData) {
        requestData.userNonVisibleData = Buffer.from(userNonVisibleData, 'utf8').toString('base64');
      }

      const response = await this.makeAuthenticatedRequest('POST', url, requestData);
      
      // Set up automatic cancellation after timeout
      if (response.orderRef) {
        const timeoutId = setTimeout(() => {
          this.cancel(response.orderRef).catch(console.error);
          this.activeRequests.delete(response.orderRef);
        }, this.config.timeout);
        
        this.activeRequests.set(response.orderRef, timeoutId);
      }

      return response;

    } catch (error) {
      console.error('BankID start auth error:', error);
      throw new Error(\`Failed to start BankID authentication: \${error.message}\`);
    }
  }

  /**
   * Collect authentication result
   * @param orderRef - Order reference from start auth
   * @returns Collection response with status and completion data
   */
  async collect(orderRef{{#if typescript}}: string{{/if}}){{#if typescript}}: Promise<BankIDCollectResponse>{{/if}} {
    try {
      const url = \`\${this.config.apiBaseUrl}/rp/v6.0/collect\`;
      
      const requestData = {
        orderRef,
      };

      const response = await this.makeAuthenticatedRequest('POST', url, requestData);
      
      // Clean up timeout if authentication is complete or failed
      if (response.status === 'complete' || response.status === 'failed') {
        const timeoutId = this.activeRequests.get(orderRef);
        if (timeoutId) {
          clearTimeout(timeoutId);
          this.activeRequests.delete(orderRef);
        }
      }

      return response;

    } catch (error) {
      console.error('BankID collect error:', error);
      throw new Error(\`Failed to collect BankID result: \${error.message}\`);
    }
  }

  /**
   * Cancel ongoing authentication
   * @param orderRef - Order reference to cancel
   */
  async cancel(orderRef{{#if typescript}}: string{{/if}}){{#if typescript}}: Promise<void>{{/if}} {
    try {
      const url = \`\${this.config.apiBaseUrl}/rp/v6.0/cancel\`;
      
      const requestData = {
        orderRef,
      };

      await this.makeAuthenticatedRequest('POST', url, requestData);
      
      // Clean up timeout
      const timeoutId = this.activeRequests.get(orderRef);
      if (timeoutId) {
        clearTimeout(timeoutId);
        this.activeRequests.delete(orderRef);
      }

    } catch (error) {
      console.error('BankID cancel error:', error);
      // Don't throw error for cancellation failures
    }
  }

  /**
   * Make authenticated request to BankID API
   */
  private async makeAuthenticatedRequest(
    method{{#if typescript}}: string{{/if}},
    url{{#if typescript}}: string{{/if}},
    data{{#if typescript}}?: any{{/if}}
  ){{#if typescript}}: Promise<any>{{/if}} {
    return new Promise((resolve, reject) => {
      const requestData = data ? JSON.stringify(data) : undefined;
      
      const options = {
        method,
        headers: {
          'Content-Type': 'application/json',
          'User-Agent': '{{projectName}}/1.0 ({{country}} BankID)',
          ...(requestData && { 'Content-Length': Buffer.byteLength(requestData) }),
        },
        agent: this.agent,
        timeout: this.config.timeout,
      };

      const req = https.request(url, options, (res) => {
        let body = '';
        
        res.on('data', (chunk) => {
          body += chunk;
        });
        
        res.on('end', () => {
          try {
            if (res.statusCode && res.statusCode >= 200 && res.statusCode < 300) {
              const result = body ? JSON.parse(body) : {};
              resolve(result);
            } else {
              let error;
              try {
                error = JSON.parse(body);
              } catch {
                error = { errorCode: 'unknown', details: body || res.statusMessage };
              }
              
              const errorMessage = this.getBankIDErrorMessage(error.errorCode) || 
                                 \`BankID API error: \${error.errorCode} - \${error.details}\`;
              reject(new Error(errorMessage));
            }
          } catch (parseError) {
            reject(new Error(\`Failed to parse BankID response: \${parseError.message}\`));
          }
        });
      });

      req.on('error', (error) => {
        reject(new Error(\`BankID request failed: \${error.message}\`));
      });

      req.on('timeout', () => {
        req.destroy();
        reject(new Error('BankID request timeout'));
      });

      if (requestData) {
        req.write(requestData);
      }
      
      req.end();
    });
  }

  /**
   * Get certificate policies based on country and security level
   */
  private getCertificatePolicies(){{#if typescript}}: string[]{{/if}} {
    {{#if (eq country 'sweden')}}
    // Swedish BankID certificate policies
    const policies = {
      '2': ['1.2.752.78.1.1', '1.2.752.78.1.2', '1.2.752.78.1.5'],
      '3': ['1.2.752.78.1.2', '1.2.752.78.1.5'],
      '4': ['1.2.752.78.1.5'],
    };
    {{else}}
    // Norwegian BankID certificate policies
    const policies = {
      '2': ['2.16.578.1.26.1.3.2', '2.16.578.1.26.1.3.3', '2.16.578.1.26.1.3.4'],
      '3': ['2.16.578.1.26.1.3.3', '2.16.578.1.26.1.3.4'],
      '4': ['2.16.578.1.26.1.3.4'],
    };
    {{/if}}
    
    return policies[this.config.minSecurityLevel] || policies['3'];
  }

  /**
   * Get issuer CN based on country
   */
  private getIssuerCn(){{#if typescript}}: string{{/if}} {
    {{#if (eq country 'sweden')}}
    return 'BankID CA v1';
    {{else}}
    return 'BankID - Buypass AS - 984050925';
    {{/if}}
  }

  /**
   * Get client IP address
   * This should be implemented to get the actual client IP from the request
   */
  private getClientIp(){{#if typescript}}: string{{/if}} {
    // This is a placeholder - implement based on your web framework
    // For Express.js: req.ip or req.connection.remoteAddress
    // For Next.js: req.socket.remoteAddress or headers['x-forwarded-for']
    return process.env.NODE_ENV === 'development' ? '127.0.0.1' : '0.0.0.0';
  }

  /**
   * Extract and validate user information from completion data
   */
  extractUserProfile(completionData{{#if typescript}}: any{{/if}}){{#if typescript}}: BankIDUserProfile{{/if}} {
    try {
      const user = completionData.user;
      
      // Validate required fields
      if (!user?.personalNumber) {
        throw new Error('Missing personal number in completion data');
      }

      if (!user?.name) {
        throw new Error('Missing name in completion data');
      }

      const profile{{#if typescript}}: BankIDUserProfile{{/if}} = {
        personalNumber: user.personalNumber,
        name: user.name,
        givenName: user.givenName,
        surname: user.surname,
        signature: completionData.signature,
        ocspResponse: completionData.ocspResponse,
        cert: completionData.cert ? {
          notBefore: completionData.cert.notBefore,
          notAfter: completionData.cert.notAfter,
          serialNumber: completionData.cert.serialNumber,
          issuerDN: completionData.cert.issuerDN,
          subjectDN: completionData.cert.subjectDN,
        } : undefined,
      };

      {{#if (eq country 'norway')}}
      // Extract additional Norwegian-specific information
      if (user.personalNumber) {
        profile.dateOfBirth = this.extractDateOfBirth(user.personalNumber);
        profile.age = this.calculateAge(user.personalNumber);
        profile.gender = this.extractGender(user.personalNumber);
      }

      // Add address information if available
      if (user.address) {
        profile.address = {
          streetAddress: user.address.streetAddress,
          postalCode: user.address.postalCode,
          city: user.address.locality,
          country: user.address.country || 'NO',
        };
      }
      {{/if}}

      return profile;

    } catch (error) {
      console.error('Failed to extract user profile:', error);
      throw new Error(\`Invalid completion data: \${error.message}\`);
    }
  }

  {{#if (eq country 'norway')}}
  /**
   * Extract date of birth from Norwegian personal number (fødselsnummer)
   */
  private extractDateOfBirth(personalNumber{{#if typescript}}: string{{/if}}){{#if typescript}}: string{{/if}} {
    if (personalNumber.length !== 11) {
      throw new Error('Invalid Norwegian personal number length');
    }

    const day = personalNumber.substring(0, 2);
    const month = personalNumber.substring(2, 4);
    const year = this.getFullYear(personalNumber);
    
    return \`\${year}-\${month.padStart(2, '0')}-\${day.padStart(2, '0')}\`;
  }

  /**
   * Calculate age from Norwegian personal number
   */
  private calculateAge(personalNumber{{#if typescript}}: string{{/if}}){{#if typescript}}: number{{/if}} {
    const birthYear = this.getFullYear(personalNumber);
    const birthMonth = parseInt(personalNumber.substring(2, 4)) - 1; // 0-based month
    const birthDay = parseInt(personalNumber.substring(0, 2));
    
    const today = new Date();
    const birthDate = new Date(birthYear, birthMonth, birthDay);
    
    let age = today.getFullYear() - birthYear;
    
    // Adjust if birthday hasn't occurred this year
    if (today.getMonth() < birthMonth || 
        (today.getMonth() === birthMonth && today.getDate() < birthDay)) {
      age--;
    }
    
    return age;
  }

  /**
   * Extract gender from Norwegian personal number
   */
  private extractGender(personalNumber{{#if typescript}}: string{{/if}}){{#if typescript}}: 'M' | 'F'{{/if}} {
    const genderDigit = parseInt(personalNumber.substring(8, 9));
    return genderDigit % 2 === 0 ? 'F' : 'M';
  }

  /**
   * Get full year from Norwegian personal number using the official algorithm
   */
  private getFullYear(personalNumber{{#if typescript}}: string{{/if}}){{#if typescript}}: number{{/if}} {
    const year = parseInt(personalNumber.substring(4, 6));
    const individualNumber = parseInt(personalNumber.substring(6, 9));
    
    // Norwegian personal number year determination algorithm
    if (individualNumber >= 0 && individualNumber <= 499) {
      return year <= 39 ? 2000 + year : 1900 + year;
    } else if (individualNumber >= 500 && individualNumber <= 749) {
      return year <= 39 ? 2000 + year : 1800 + year;
    } else if (individualNumber >= 750 && individualNumber <= 999) {
      return year <= 99 ? 2000 + year : 1900 + year;
    }
    
    return 1900 + year; // Fallback
  }
  {{/if}}

  /**
   * Validate BankID signature
   */
  validateSignature(
    data{{#if typescript}}: string{{/if}},
    signature{{#if typescript}}: string{{/if}},
    certificate{{#if typescript}}: string{{/if}}
  ){{#if typescript}}: boolean{{/if}} {
    try {
      const verify = crypto.createVerify('RSA-SHA256');
      verify.update(data, 'utf8');
      
      return verify.verify(certificate, signature, 'base64');
    } catch (error) {
      console.error('Signature validation error:', error);
      return false;
    }
  }

  /**
   * Get human-readable error message for BankID error codes
   */
  private getBankIDErrorMessage(errorCode{{#if typescript}}: string{{/if}}){{#if typescript}}: string | null{{/if}} {
    const messages = {
      {{#if (eq country 'sweden')}}
      'invalidParameters': 'Ogiltiga parametrar skickades till BankID',
      'alreadyInProgress': 'En autentisering pågår redan för denna användare',
      'internalError': 'Ett internt fel uppstod i BankID-systemet',
      'maintenance': 'BankID-systemet är under underhåll',
      'userCancel': 'Användaren avbröt autentiseringen',
      'cancelled': 'Autentiseringen avbröts',
      'startFailed': 'Kunde inte starta BankID-appen',
      'expiredTransaction': 'Transaktionen har gått ut',
      'certificateErr': 'Problem med BankID-certifikatet',
      'userDeclinedCall': 'Användaren avvisade samtalet',
      'requestTimeout': 'Förfrågan tog för lång tid',
      {{else}}
      'invalidParameters': 'Ugyldige parametere sendt til BankID',
      'alreadyInProgress': 'En autentisering pågår allerede for denne brukeren',
      'internalError': 'En intern feil oppstod i BankID-systemet',
      'maintenance': 'BankID-systemet er under vedlikehold',
      'userCancel': 'Brukeren avbrøt autentiseringen',
      'cancelled': 'Autentiseringen ble avbrutt',
      'startFailed': 'Kunne ikke starte BankID-appen',
      'expiredTransaction': 'Transaksjonen utløp',
      'certificateErr': 'Problem med BankID-sertifikatet',
      'userDeclinedCall': 'Brukeren avviste oppkallet',
      'requestTimeout': 'Forespørselen tok for lang tid',
      {{/if}}
    };
    
    return messages[errorCode] || null;
  }

  /**
   * Get current configuration
   */
  getConfig(){{#if typescript}}: BankIDConfig{{/if}} {
    return { ...this.config };
  }

  /**
   * Update configuration
   */
  updateConfig(newConfig{{#if typescript}}: Partial<BankIDConfig>{{/if}}){{#if typescript}}: void{{/if}} {
    this.config = { ...this.config, ...newConfig };
    
    // Reinitialize HTTPS agent if certificate settings changed
    if (newConfig.certificatePath || newConfig.certificatePassword || newConfig.trustedCertificates) {
      this.initializeHttpsAgent();
    }
  }

  /**
   * Health check - verify BankID API connectivity
   */
  async healthCheck(){{#if typescript}}: Promise<{ healthy: boolean; message: string }>{{/if}} {
    try {
      // This is a simple connectivity test
      // In production, you might want to implement a proper health check endpoint
      const url = \`\${this.config.apiBaseUrl}/rp/v6.0/auth\`;
      
      // Try to make a request (this will likely fail with invalid parameters, but that's OK)
      try {
        await this.makeAuthenticatedRequest('POST', url, {});
      } catch (error) {
        // If we get a proper BankID error response, the service is healthy
        if (error.message.includes('invalidParameters') || error.message.includes('BankID API error')) {
          return { healthy: true, message: 'BankID API is reachable' };
        }
        throw error;
      }
      
      return { healthy: true, message: 'BankID API is healthy' };
    } catch (error) {
      return { healthy: false, message: \`BankID API health check failed: \${error.message}\` };
    }
  }

  /**
   * Clean up resources
   */
  destroy(){{#if typescript}}: void{{/if}} {
    // Cancel all active requests
    for (const [orderRef, timeoutId] of this.activeRequests.entries()) {
      clearTimeout(timeoutId);
      this.cancel(orderRef).catch(console.error);
    }
    
    this.activeRequests.clear();
    
    // Destroy HTTPS agent
    if (this.agent) {
      this.agent.destroy();
      this.agent = null;
    }
  }
}

// Create and export service instance
const bankIdConfig{{#if typescript}}: BankIDConfig{{/if}} = {
  environment: '{{environment}}',
  country: '{{country}}',
  apiBaseUrl: '{{bankIdConfig.apiBaseUrl}}',
  certificatePath: process.env.BANKID_CERTIFICATE_PATH,
  certificatePassword: process.env.BANKID_CERTIFICATE_PASSWORD,
  trustedCertificates: process.env.BANKID_TRUSTED_CERTIFICATES?.split(',').filter(Boolean) || [],
  timeout: parseInt(process.env.BANKID_TIMEOUT || '30000'),
  minSecurityLevel: (process.env.BANKID_MIN_SECURITY_LEVEL as '2' | '3' | '4') || '{{minSecurityLevel}}',
  requestedAttributes: {{{json bankIdConfig.requestedAttributes}}},
};

export const bankIdAuth = new BankIDAuthService(bankIdConfig);

// Export constants and utilities
export const BankIDSecurityLevels = {
  LEVEL_2: '2',
  LEVEL_3: '3', 
  LEVEL_4: '4',
} as const;

export const BankIDCountries = {
  NORWAY: 'norway',
  SWEDEN: 'sweden',
} as const;

{{#if (eq country 'norway')}}
export const NorwegianBankIDAttributes = {
  PERSONAL_NUMBER: 'urn:no:bdi:oidc:personalNumber',
  NAME: 'urn:no:bdi:oidc:name',
  GIVEN_NAME: 'urn:no:bdi:oidc:givenName',
  SURNAME: 'urn:no:bdi:oidc:surname',
  DATE_OF_BIRTH: 'urn:no:bdi:oidc:dateOfBirth',
  AGE: 'urn:no:bdi:oidc:age',
  GENDER: 'urn:no:bdi:oidc:gender',
  ADDRESS: 'urn:no:bdi:oidc:address',
} as const;
{{else}}
export const SwedishBankIDAttributes = {
  PERSONAL_NUMBER: 'personalNumber',
  NAME: 'name',
  GIVEN_NAME: 'givenName',
  SURNAME: 'surname',
} as const;
{{/if}}

// Helper function to create service with custom config
export function createBankIDAuthService(config{{#if typescript}}: BankIDConfig{{/if}}) {
  return new BankIDAuthService(config);
}

{{#if typescript}}
// Re-export types for convenience
export type {
  BankIDConfig,
  BankIDUserProfile,
  BankIDAuthResponse,
  BankIDCollectResponse,
  BankIDCertificateInfo,
} from './bankid.types';
{{/if}}