{{#if typescript}}
import type { 
  VippsConfig, 
  VippsUserProfile, 
  VippsTokenResponse,
  VippsWebhookPayload 
} from './vipps.types';
{{/if}}

/**
 * Vipps Authentication Service
 * Handles all Vipps authentication operations including token exchange,
 * user profile fetching, and webhook validation
 */
export class VippsAuthService {
  private config{{#if typescript}}: VippsConfig{{/if}};
  private tokenCache{{#if typescript}}: Map<string, { token: string; expires: number }>{{/if}} = new Map();
  
  constructor(config{{#if typescript}}: VippsConfig{{/if}}) {
    this.config = config;
    this.validateConfig();
  }

  /**
   * Validate the configuration
   */
  private validateConfig(){{#if typescript}}: void{{/if}} {
    const required = ['clientId', 'clientSecret', 'apiBaseUrl', 'tokenUrl'];
    for (const field of required) {
      if (!this.config[field]) {
        throw new Error(`Missing required Vipps configuration: ${field}`);
      }
    }
  }

  /**
   * Exchange authorization code for access token
   * @param code - Authorization code from Vipps
   * @param redirectUri - Redirect URI used in the authorization request
   * @param state - State parameter for CSRF protection
   * @returns Token response with access token and user info
   */
  async exchangeCodeForToken(
    code{{#if typescript}}: string{{/if}},
    redirectUri{{#if typescript}}: string{{/if}},
    state{{#if typescript}}?: string{{/if}}
  ){{#if typescript}}: Promise<VippsTokenResponse & { user?: VippsUserProfile }>{{/if}} {
    try {
      // Prepare token request
      const tokenParams = new URLSearchParams({
        grant_type: 'authorization_code',
        code,
        redirect_uri: redirectUri,
        client_id: this.config.clientId,
      });

      // Make token request
      const response = await fetch(this.config.tokenUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
          'Authorization': `Basic ${this.getBasicAuthHeader()}`,
          'User-Agent': '{{projectName}}/1.0',
        },
        body: tokenParams.toString(),
      });

      if (!response.ok) {
        const errorData = await response.text();
        throw new Error(`Token exchange failed: ${response.status} ${response.statusText} - ${errorData}`);
      }

      const tokenData{{#if typescript}}: VippsTokenResponse{{/if}} = await response.json();

      // Cache the token for future use
      if (tokenData.access_token && tokenData.expires_in) {
        this.tokenCache.set(tokenData.access_token, {
          token: tokenData.access_token,
          expires: Date.now() + (tokenData.expires_in * 1000),
        });
      }

      {{#if includeProfile}}
      // Fetch user profile if access token is available
      let user{{#if typescript}}: VippsUserProfile | undefined{{/if}};
      if (tokenData.access_token) {
        try {
          user = await this.getUserProfile(tokenData.access_token);
        } catch (profileError) {
          console.warn('Failed to fetch user profile:', profileError);
          // Don't fail the entire authentication if profile fetch fails
        }
      }

      return { ...tokenData, user };
      {{else}}
      return tokenData;
      {{/if}}

    } catch (error) {
      console.error('Vipps token exchange error:', error);
      throw error;
    }
  }

  /**
   * Get user profile from Vipps UserInfo endpoint
   * @param accessToken - Access token
   * @returns User profile data
   */
  async getUserProfile(accessToken{{#if typescript}}: string{{/if}}){{#if typescript}}: Promise<VippsUserProfile>{{/if}} {
    try {
      const response = await fetch(this.config.userInfoUrl, {
        headers: {
          'Authorization': `Bearer ${accessToken}`,
          'User-Agent': '{{projectName}}/1.0',
          'Accept': 'application/json',
        },
      });

      if (!response.ok) {
        throw new Error(`Failed to fetch user profile: ${response.status} ${response.statusText}`);
      }

      const profile{{#if typescript}}: VippsUserProfile{{/if}} = await response.json();
      
      // Validate required profile fields
      if (!profile.sub) {
        throw new Error('Invalid user profile: missing subject identifier');
      }

      return profile;

    } catch (error) {
      console.error('Vipps profile fetch error:', error);
      throw error;
    }
  }

  /**
   * Refresh access token using refresh token
   * @param refreshToken - Refresh token
   * @returns New token response
   */
  async refreshToken(refreshToken{{#if typescript}}: string{{/if}}){{#if typescript}}: Promise<VippsTokenResponse>{{/if}} {
    try {
      const tokenParams = new URLSearchParams({
        grant_type: 'refresh_token',
        refresh_token: refreshToken,
        client_id: this.config.clientId,
      });

      const response = await fetch(this.config.tokenUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
          'Authorization': `Basic ${this.getBasicAuthHeader()}`,
          'User-Agent': '{{projectName}}/1.0',
        },
        body: tokenParams.toString(),
      });

      if (!response.ok) {
        const errorData = await response.text();
        throw new Error(`Token refresh failed: ${response.status} ${response.statusText} - ${errorData}`);
      }

      const tokenData{{#if typescript}}: VippsTokenResponse{{/if}} = await response.json();

      // Update token cache
      if (tokenData.access_token && tokenData.expires_in) {
        this.tokenCache.set(tokenData.access_token, {
          token: tokenData.access_token,
          expires: Date.now() + (tokenData.expires_in * 1000),
        });
      }

      return tokenData;

    } catch (error) {
      console.error('Vipps token refresh error:', error);
      throw error;
    }
  }

  /**
   * Revoke access token
   * @param token - Access token or refresh token to revoke
   */
  async revokeToken(token{{#if typescript}}: string{{/if}}){{#if typescript}}: Promise<void>{{/if}} {
    try {
      const revokeParams = new URLSearchParams({
        token,
        client_id: this.config.clientId,
      });

      const response = await fetch(`${this.config.apiBaseUrl}/access-management-1.0/access/oauth2/revoke`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
          'Authorization': `Basic ${this.getBasicAuthHeader()}`,
          'User-Agent': '{{projectName}}/1.0',
        },
        body: revokeParams.toString(),
      });

      // Remove from cache regardless of response
      this.tokenCache.delete(token);

      if (!response.ok) {
        console.warn(`Token revocation returned ${response.status}: ${response.statusText}`);
        // Don't throw error for revocation failures as token might already be expired
      }

    } catch (error) {
      console.error('Vipps token revocation error:', error);
      // Don't throw error to avoid breaking logout flows
    }
  }

  {{#if webhookEndpoint}}
  /**
   * Verify webhook signature from Vipps
   * @param payload - Raw webhook payload
   * @param signature - Signature header from Vipps
   * @param secret - Webhook secret (optional, uses config if not provided)
   * @returns True if signature is valid
   */
  verifyWebhookSignature(
    payload{{#if typescript}}: string{{/if}},
    signature{{#if typescript}}: string{{/if}},
    secret{{#if typescript}}?: string{{/if}}
  ){{#if typescript}}: boolean{{/if}} {
    try {
      const webhookSecret = secret || this.config.webhookSecret;
      if (!webhookSecret) {
        throw new Error('Webhook secret not configured');
      }

      // Remove 'sha256=' prefix if present
      const cleanSignature = signature.replace(/^sha256=/, '');

      // Create expected signature
      const crypto = require('crypto');
      const expectedSignature = crypto
        .createHmac('sha256', webhookSecret)
        .update(payload, 'utf8')
        .digest('hex');
      
      // Use timing-safe comparison
      return crypto.timingSafeEqual(
        Buffer.from(cleanSignature, 'hex'),
        Buffer.from(expectedSignature, 'hex')
      );

    } catch (error) {
      console.error('Webhook signature verification error:', error);
      return false;
    }
  }

  /**
   * Process webhook payload
   * @param payload - Webhook payload
   * @returns Processed webhook data
   */
  processWebhook(payload{{#if typescript}}: VippsWebhookPayload{{/if}}){{#if typescript}}: Promise<void>{{/if}} {
    return new Promise((resolve, reject) => {
      try {
        // Handle different webhook event types
        switch (payload.eventType) {
          case 'user.profile.updated':
            this.handleProfileUpdate(payload);
            break;
          case 'user.consent.revoked':
            this.handleConsentRevoked(payload);
            break;
          default:
            console.warn('Unknown webhook event type:', payload.eventType);
        }
        resolve();
      } catch (error) {
        console.error('Webhook processing error:', error);
        reject(error);
      }
    });
  }

  private handleProfileUpdate(payload{{#if typescript}}: VippsWebhookPayload{{/if}}){{#if typescript}}: void{{/if}} {
    console.log('Profile updated for user:', payload.userId);
    // TODO: Update user profile in your database
    // Example: await updateUserProfile(payload.userId, payload.data);
  }

  private handleConsentRevoked(payload{{#if typescript}}: VippsWebhookPayload{{/if}}){{#if typescript}}: void{{/if}} {
    console.log('Consent revoked for user:', payload.userId);
    // TODO: Remove user data as required by GDPR
    // Example: await removeUserData(payload.userId);
  }
  {{/if}}

  /**
   * Check if token is valid and not expired
   * @param token - Access token to validate
   * @returns True if token is valid
   */
  isTokenValid(token{{#if typescript}}: string{{/if}}){{#if typescript}}: boolean{{/if}} {
    const cached = this.tokenCache.get(token);
    if (!cached) return false;
    
    return Date.now() < cached.expires;
  }

  /**
   * Clean up expired tokens from cache
   */
  cleanupTokenCache(){{#if typescript}}: void{{/if}} {
    const now = Date.now();
    for (const [token, data] of this.tokenCache.entries()) {
      if (now >= data.expires) {
        this.tokenCache.delete(token);
      }
    }
  }

  /**
   * Get the current configuration
   */
  getConfig(){{#if typescript}}: VippsConfig{{/if}} {
    return { ...this.config };
  }

  /**
   * Update configuration (useful for environment switching)
   */
  updateConfig(newConfig{{#if typescript}}: Partial<VippsConfig>{{/if}}){{#if typescript}}: void{{/if}} {
    this.config = { ...this.config, ...newConfig };
    this.validateConfig();
  }

  /**
   * Generate Basic Auth header for client authentication
   */
  private getBasicAuthHeader(){{#if typescript}}: string{{/if}} {
    return Buffer.from(`${this.config.clientId}:${this.config.clientSecret}`).toString('base64');
  }

  /**
   * Generate authorization URL for OAuth flow
   * @param redirectUri - Redirect URI
   * @param scopes - Requested scopes
   * @param state - State parameter for CSRF protection
   * @returns Authorization URL
   */
  generateAuthUrl(
    redirectUri{{#if typescript}}: string{{/if}},
    scopes{{#if typescript}}: string[]{{/if}} = ['openid'],
    state{{#if typescript}}?: string{{/if}}
  ){{#if typescript}}: string{{/if}} {
    const authUrl = new URL(this.config.authUrl);
    
    authUrl.searchParams.set('client_id', this.config.clientId);
    authUrl.searchParams.set('response_type', 'code');
    authUrl.searchParams.set('redirect_uri', redirectUri);
    authUrl.searchParams.set('scope', scopes.join(' '));
    authUrl.searchParams.set('ui_locales', 'nb-NO');
    
    if (state) {
      authUrl.searchParams.set('state', state);
    }

    return authUrl.toString();
  }
}

// Create and export service instance
const vippsConfig{{#if typescript}}: VippsConfig{{/if}} = {
  clientId: process.env.VIPPS_CLIENT_ID || '',
  clientSecret: process.env.VIPPS_CLIENT_SECRET || '',
  apiBaseUrl: '{{vippsConfig.apiBaseUrl}}',
  authUrl: '{{vippsConfig.authUrl}}',
  tokenUrl: '{{vippsConfig.tokenUrl}}',
  userInfoUrl: '{{vippsConfig.userInfoUrl}}',
  webhookSecret: process.env.VIPPS_WEBHOOK_SECRET || '',
  environment: '{{environment}}',
};

export const vippsAuth = new VippsAuthService(vippsConfig);

// Export utilities
export const VippsScopes = {
  OPENID: 'openid',
  NAME: 'name',
  EMAIL: 'email',
  PHONE_NUMBER: 'phoneNumber',
  ADDRESS: 'address',
  BIRTH_DATE: 'birthDate',
  ACCOUNTS: 'accounts',
} as const;

export const VippsEnvironments = {
  TEST: 'test',
  PRODUCTION: 'production',
} as const;

// Helper function to create service with custom config
export function createVippsAuthService(config{{#if typescript}}: VippsConfig{{/if}}) {
  return new VippsAuthService(config);
}

{{#if typescript}}
// Re-export types for convenience
export type {
  VippsConfig,
  VippsUserProfile,
  VippsTokenResponse,
  VippsWebhookPayload,
} from './vipps.types';
{{/if}}