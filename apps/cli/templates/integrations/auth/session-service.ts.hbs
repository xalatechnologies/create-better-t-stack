{{#if typescript}}
import type { SessionUser, SessionData } from './session.types';
{{/if}}
import crypto from 'crypto';
{{#if (eq sessionType 'jwt')}}
import jwt from 'jsonwebtoken';
{{/if}}
{{#if (eq storage 'redis')}}
import Redis from 'ioredis';
{{/if}}

/**
 * Session Management Service for {{projectName}}
 * Handles {{sessionType}} sessions with {{storage}} storage
 */
export class SessionService {
  private encryptionKey{{#if typescript}}: string{{/if}};
  {{#if (eq storage 'redis')}}
  private redis{{#if typescript}}: Redis{{/if}};
  {{/if}}
  {{#if (eq storage 'memory')}}
  private sessionStore{{#if typescript}}: Map<string, SessionData>{{/if}} = new Map();
  {{/if}}

  constructor(encryptionKey{{#if typescript}}: string{{/if}} = process.env.ENCRYPTION_KEY || '{{encryptionKey}}') {
    this.encryptionKey = encryptionKey;
    {{#if (eq storage 'redis')}}
    this.redis = new Redis({
      host: process.env.REDIS_HOST || 'localhost',
      port: parseInt(process.env.REDIS_PORT || '6379'),
      password: process.env.REDIS_PASSWORD,
      retryDelayOnFailover: 100,
      maxRetriesPerRequest: 3,
    });
    {{/if}}
  }

  /**
   * Create a new session for user
   * @param user - User data
   * @param metadata - Additional session metadata
   * @returns Session tokens and ID
   */
  async createSession(
    user{{#if typescript}}: SessionUser{{/if}}, 
    metadata{{#if typescript}}?: { ipAddress?: string; userAgent?: string }{{/if}} = {}
  ){{#if typescript}}: Promise<{ sessionId: string; token?: string; refreshToken?: string }>{{/if}} {
    const sessionId = this.generateSessionId();
    const now = new Date();
    const expiresAt = new Date(now.getTime() + {{tokenExpiry}} * 60 * 1000);
    const refreshTokenExpiresAt = new Date(now.getTime() + {{refreshTokenExpiry}} * 60 * 1000);

    const sessionData{{#if typescript}}: SessionData{{/if}} = {
      user: { ...user, sessionId },
      createdAt: now,
      expiresAt,
      lastActivity: now,
      ipAddress: metadata.ipAddress,
      userAgent: metadata.userAgent,
      deviceFingerprint: this.generateDeviceFingerprint(metadata.userAgent || ''),
    };

    {{#if (eq sessionType 'jwt')}}
    // JWT-based session
    const token = this.generateJWTToken(sessionData);
    const refreshToken = this.generateRefreshToken(user.id, sessionId);
    
    // Store refresh token
    await this.storeRefreshToken(user.id, refreshToken, refreshTokenExpiresAt);
    {{else}}
    // Server-side session
    await this.storeSession(sessionId, sessionData);
    {{/if}}

    {{#if auditLogging}}
    // Audit logging
    await this.logSessionEvent('session_created', user.id, sessionId, metadata);
    {{/if}}

    return {
      sessionId,
      {{#if (eq sessionType 'jwt')}}
      token,
      refreshToken,
      {{/if}}
    };
  }

  /**
   * Validate and retrieve session
   * @param {{#if (eq sessionType 'jwt')}}token{{else}}sessionId{{/if}} - Session identifier
   * @returns Session data if valid
   */
  async validateSession({{#if (eq sessionType 'jwt')}}token{{else}}sessionId{{/if}}{{#if typescript}}: string{{/if}}){{#if typescript}}: Promise<SessionData | null>{{/if}} {
    try {
      {{#if (eq sessionType 'jwt')}}
      // JWT validation
      const decoded = jwt.verify(token, this.encryptionKey) as any;
      const sessionData = decoded.sessionData;
      
      // Check if session is expired
      if (new Date() > new Date(sessionData.expiresAt)) {
        return null;
      }
      
      // Update last activity
      sessionData.lastActivity = new Date();
      
      return sessionData;
      {{else}}
      // Server-side session validation
      const sessionData = await this.getSession(sessionId);
      
      if (!sessionData) {
        return null;
      }
      
      // Check if session is expired
      if (new Date() > sessionData.expiresAt) {
        await this.destroySession(sessionId);
        return null;
      }
      
      // Update last activity
      sessionData.lastActivity = new Date();
      await this.storeSession(sessionId, sessionData);
      
      return sessionData;
      {{/if}}
    } catch (error) {
      console.error('Session validation error:', error);
      return null;
    }
  }

  /**
   * Refresh session token
   * @param refreshToken - Refresh token
   * @returns New session tokens
   */
  async refreshSession(refreshToken{{#if typescript}}: string{{/if}}){{#if typescript}}: Promise<{ sessionId: string; token?: string; refreshToken?: string } | null>{{/if}} {
    try {
      const tokenData = await this.validateRefreshToken(refreshToken);
      if (!tokenData) {
        return null;
      }

      const { userId, sessionId } = tokenData;
      
      {{#if (eq sessionType 'jwt')}}
      // Get current session data
      const currentSession = await this.getStoredSession(userId, sessionId);
      if (!currentSession) {
        return null;
      }
      
      // Generate new tokens
      const newToken = this.generateJWTToken(currentSession);
      const newRefreshToken = this.generateRefreshToken(userId, sessionId);
      
      // Store new refresh token and invalidate old one
      await this.storeRefreshToken(userId, newRefreshToken, 
        new Date(Date.now() + {{refreshTokenExpiry}} * 60 * 1000));
      await this.invalidateRefreshToken(refreshToken);
      
      return {
        sessionId,
        token: newToken,
        refreshToken: newRefreshToken,
      };
      {{else}}
      // For server-side sessions, just extend expiry
      const sessionData = await this.getSession(sessionId);
      if (!sessionData) {
        return null;
      }
      
      sessionData.expiresAt = new Date(Date.now() + {{tokenExpiry}} * 60 * 1000);
      await this.storeSession(sessionId, sessionData);
      
      return { sessionId };
      {{/if}}
    } catch (error) {
      console.error('Session refresh error:', error);
      return null;
    }
  }

  /**
   * Destroy session
   * @param {{#if (eq sessionType 'jwt')}}token{{else}}sessionId{{/if}} - Session identifier
   * @param userId - User ID (optional for JWT)
   * @returns Success status
   */
  async destroySession({{#if (eq sessionType 'jwt')}}token{{else}}sessionId{{/if}}{{#if typescript}}: string{{/if}}, userId{{#if typescript}}?: string{{/if}}){{#if typescript}}: Promise<boolean>{{/if}} {
    try {
      {{#if (eq sessionType 'jwt')}}
      const decoded = jwt.verify(token, this.encryptionKey) as any;
      const sessionData = decoded.sessionData;
      const actualSessionId = sessionData.user.sessionId;
      const actualUserId = sessionData.user.id;
      
      // Invalidate refresh tokens
      await this.invalidateAllRefreshTokens(actualUserId, actualSessionId);
      {{else}}
      // Server-side session destruction
      await this.removeSession(sessionId);
      {{/if}}

      {{#if auditLogging}}
      // Audit logging
      await this.logSessionEvent('session_destroyed', 
        {{#if (eq sessionType 'jwt')}}actualUserId{{else}}userId{{/if}}, 
        {{#if (eq sessionType 'jwt')}}actualSessionId{{else}}sessionId{{/if}});
      {{/if}}

      return true;
    } catch (error) {
      console.error('Session destruction error:', error);
      return false;
    }
  }

  /**
   * Update user profile in session
   * @param sessionId - Session ID
   * @param updates - Profile updates
   * @returns Success status
   */
  async updateSessionUser(sessionId{{#if typescript}}: string{{/if}}, updates{{#if typescript}}: Partial<SessionUser>{{/if}}){{#if typescript}}: Promise<boolean>{{/if}} {
    try {
      {{#if (eq sessionType 'jwt')}}
      // For JWT, the client needs to refresh the token
      // Store the update in a temporary cache for next refresh
      await this.storePendingUserUpdate(sessionId, updates);
      {{else}}
      // Update server-side session
      const sessionData = await this.getSession(sessionId);
      if (!sessionData) {
        return false;
      }
      
      sessionData.user = { ...sessionData.user, ...updates };
      await this.storeSession(sessionId, sessionData);
      {{/if}}

      {{#if auditLogging}}
      // Audit logging
      await this.logSessionEvent('profile_updated', updates.id || '', sessionId);
      {{/if}}

      return true;
    } catch (error) {
      console.error('Session user update error:', error);
      return false;
    }
  }

  /**
   * Get all active sessions for user (GDPR compliance)
   * @param userId - User ID
   * @returns Array of user sessions
   */
  async getUserSessions(userId{{#if typescript}}: string{{/if}}){{#if typescript}}: Promise<SessionData[]>{{/if}} {
    try {
      {{#if (eq storage 'redis')}}
      const keys = await this.redis.keys(`session:${userId}:*`);
      const sessions = [];
      
      for (const key of keys) {
        const sessionData = await this.redis.get(key);
        if (sessionData) {
          sessions.push(JSON.parse(sessionData));
        }
      }
      
      return sessions;
      {{else if (eq storage 'memory')}}
      const sessions = [];
      for (const [sessionId, sessionData] of this.sessionStore.entries()) {
        if (sessionData.user.id === userId) {
          sessions.push(sessionData);
        }
      }
      return sessions;
      {{else}}
      // Database implementation would go here
      return [];
      {{/if}}
    } catch (error) {
      console.error('Get user sessions error:', error);
      return [];
    }
  }

  /**
   * Destroy all sessions for user
   * @param userId - User ID
   * @returns Success status
   */
  async destroyAllUserSessions(userId{{#if typescript}}: string{{/if}}){{#if typescript}}: Promise<boolean>{{/if}} {
    try {
      {{#if (eq storage 'redis')}}
      const keys = await this.redis.keys(`session:${userId}:*`);
      if (keys.length > 0) {
        await this.redis.del(...keys);
      }
      
      // Also clear refresh tokens
      const refreshKeys = await this.redis.keys(`refresh:${userId}:*`);
      if (refreshKeys.length > 0) {
        await this.redis.del(...refreshKeys);
      }
      {{else if (eq storage 'memory')}}
      for (const [sessionId, sessionData] of this.sessionStore.entries()) {
        if (sessionData.user.id === userId) {
          this.sessionStore.delete(sessionId);
        }
      }
      {{else}}
      // Database implementation would go here
      {{/if}}

      {{#if auditLogging}}
      // Audit logging
      await this.logSessionEvent('all_sessions_destroyed', userId);
      {{/if}}

      return true;
    } catch (error) {
      console.error('Destroy all user sessions error:', error);
      return false;
    }
  }

  // Private helper methods
  private generateSessionId(){{#if typescript}}: string{{/if}} {
    return crypto.randomBytes(32).toString('hex');
  }

  private generateDeviceFingerprint(userAgent{{#if typescript}}: string{{/if}}){{#if typescript}}: string{{/if}} {
    return crypto.createHash('sha256').update(userAgent).digest('hex').substring(0, 16);
  }

  {{#if (eq sessionType 'jwt')}}
  private generateJWTToken(sessionData{{#if typescript}}: SessionData{{/if}}){{#if typescript}}: string{{/if}} {
    return jwt.sign(
      { sessionData },
      this.encryptionKey,
      { 
        expiresIn: '{{tokenExpiry}}m',
        issuer: '{{projectName}}',
        audience: 'user-session',
      }
    );
  }
  {{/if}}

  private generateRefreshToken(userId{{#if typescript}}: string{{/if}}, sessionId{{#if typescript}}: string{{/if}}){{#if typescript}}: string{{/if}} {
    const payload = { userId, sessionId, type: 'refresh' };
    return crypto.createHmac('sha256', this.encryptionKey)
      .update(JSON.stringify(payload) + Date.now())
      .digest('hex');
  }

  {{#if (eq storage 'redis')}}
  private async storeSession(sessionId{{#if typescript}}: string{{/if}}, sessionData{{#if typescript}}: SessionData{{/if}}){{#if typescript}}: Promise<void>{{/if}} {
    const key = `session:${sessionData.user.id}:${sessionId}`;
    const ttl = Math.floor((sessionData.expiresAt.getTime() - Date.now()) / 1000);
    await this.redis.setex(key, ttl, JSON.stringify(sessionData));
  }

  private async getSession(sessionId{{#if typescript}}: string{{/if}}){{#if typescript}}: Promise<SessionData | null>{{/if}} {
    const keys = await this.redis.keys(`session:*:${sessionId}`);
    if (keys.length === 0) return null;
    
    const sessionData = await this.redis.get(keys[0]);
    return sessionData ? JSON.parse(sessionData) : null;
  }

  private async removeSession(sessionId{{#if typescript}}: string{{/if}}){{#if typescript}}: Promise<void>{{/if}} {
    const keys = await this.redis.keys(`session:*:${sessionId}`);
    if (keys.length > 0) {
      await this.redis.del(...keys);
    }
  }

  private async storeRefreshToken(userId{{#if typescript}}: string{{/if}}, refreshToken{{#if typescript}}: string{{/if}}, expiresAt{{#if typescript}}: Date{{/if}}){{#if typescript}}: Promise<void>{{/if}} {
    const key = `refresh:${userId}:${refreshToken}`;
    const ttl = Math.floor((expiresAt.getTime() - Date.now()) / 1000);
    await this.redis.setex(key, ttl, JSON.stringify({ userId, expiresAt }));
  }

  private async validateRefreshToken(refreshToken{{#if typescript}}: string{{/if}}){{#if typescript}}: Promise<{ userId: string; sessionId: string } | null>{{/if}} {
    const keys = await this.redis.keys(`refresh:*:${refreshToken}`);
    if (keys.length === 0) return null;
    
    const data = await this.redis.get(keys[0]);
    if (!data) return null;
    
    const tokenData = JSON.parse(data);
    const userId = keys[0].split(':')[1];
    
    return { userId, sessionId: refreshToken.substring(0, 16) };
  }

  private async invalidateRefreshToken(refreshToken{{#if typescript}}: string{{/if}}){{#if typescript}}: Promise<void>{{/if}} {
    const keys = await this.redis.keys(`refresh:*:${refreshToken}`);
    if (keys.length > 0) {
      await this.redis.del(...keys);
    }
  }

  private async invalidateAllRefreshTokens(userId{{#if typescript}}: string{{/if}}, sessionId{{#if typescript}}?: string{{/if}}){{#if typescript}}: Promise<void>{{/if}} {
    const pattern = sessionId ? `refresh:${userId}:${sessionId}*` : `refresh:${userId}:*`;
    const keys = await this.redis.keys(pattern);
    if (keys.length > 0) {
      await this.redis.del(...keys);
    }
  }
  {{else if (eq storage 'memory')}}
  private async storeSession(sessionId{{#if typescript}}: string{{/if}}, sessionData{{#if typescript}}: SessionData{{/if}}){{#if typescript}}: Promise<void>{{/if}} {
    this.sessionStore.set(sessionId, sessionData);
  }

  private async getSession(sessionId{{#if typescript}}: string{{/if}}){{#if typescript}}: Promise<SessionData | null>{{/if}} {
    return this.sessionStore.get(sessionId) || null;
  }

  private async removeSession(sessionId{{#if typescript}}: string{{/if}}){{#if typescript}}: Promise<void>{{/if}} {
    this.sessionStore.delete(sessionId);
  }
  {{else}}
  // Database storage methods would be implemented here
  private async storeSession(sessionId{{#if typescript}}: string{{/if}}, sessionData{{#if typescript}}: SessionData{{/if}}){{#if typescript}}: Promise<void>{{/if}} {
    console.log('Store session:', sessionId, sessionData);
  }

  private async getSession(sessionId{{#if typescript}}: string{{/if}}){{#if typescript}}: Promise<SessionData | null>{{/if}} {
    console.log('Get session:', sessionId);
    return null;
  }

  private async removeSession(sessionId{{#if typescript}}: string{{/if}}){{#if typescript}}: Promise<void>{{/if}} {
    console.log('Remove session:', sessionId);
  }
  {{/if}}

  {{#if auditLogging}}
  private async logSessionEvent(
    event{{#if typescript}}: string{{/if}}, 
    userId{{#if typescript}}: string{{/if}}, 
    sessionId{{#if typescript}}?: string{{/if}}, 
    metadata{{#if typescript}}?: any{{/if}}
  ){{#if typescript}}: Promise<void>{{/if}} {
    try {
      const logEntry = {
        event,
        userId,
        sessionId,
        timestamp: new Date().toISOString(),
        metadata,
      };
      
      {{#if (eq storage 'redis')}}
      await this.redis.lpush('audit_log', JSON.stringify(logEntry));
      await this.redis.ltrim('audit_log', 0, 9999); // Keep last 10000 entries
      {{else}}
      console.log('Audit log:', logEntry);
      {{/if}}
    } catch (error) {
      console.error('Audit logging failed:', error);
    }
  }
  {{/if}}

  {{#if gdprCompliant}}
  /**
   * Export all session data for user (GDPR compliance)
   * @param userId - User ID
   * @returns User session data export
   */
  async exportUserData(userId{{#if typescript}}: string{{/if}}){{#if typescript}}: Promise<any>{{/if}} {
    try {
      const sessions = await this.getUserSessions(userId);
      
      return {
        userId,
        sessions: sessions.map(session => ({
          sessionId: session.user.sessionId,
          createdAt: session.createdAt,
          lastActivity: session.lastActivity,
          ipAddress: session.ipAddress ? '[REDACTED]' : undefined,
          userAgent: session.userAgent ? '[REDACTED]' : undefined,
        })),
        exportDate: new Date().toISOString(),
      };
    } catch (error) {
      console.error('User data export error:', error);
      return null;
    }
  }

  /**
   * Delete all user data (GDPR compliance)
   * @param userId - User ID
   * @returns Success status
   */
  async deleteUserData(userId{{#if typescript}}: string{{/if}}){{#if typescript}}: Promise<boolean>{{/if}} {
    try {
      // Destroy all sessions
      await this.destroyAllUserSessions(userId);
      
      {{#if auditLogging}}
      // Log the deletion
      await this.logSessionEvent('user_data_deleted', userId);
      {{/if}}
      
      return true;
    } catch (error) {
      console.error('User data deletion error:', error);
      return false;
    }
  }
  {{/if}}

  /**
   * Clean up expired sessions
   */
  async cleanupExpiredSessions(){{#if typescript}}: Promise<void>{{/if}} {
    try {
      {{#if (eq storage 'memory')}}
      const now = new Date();
      for (const [sessionId, sessionData] of this.sessionStore.entries()) {
        if (now > sessionData.expiresAt) {
          this.sessionStore.delete(sessionId);
        }
      }
      {{else}}
      // For Redis, expired keys are automatically cleaned up
      console.log('Session cleanup completed');
      {{/if}}
    } catch (error) {
      console.error('Session cleanup error:', error);
    }
  }
}

// Create and export service instance
export const sessionService = new SessionService();

// Export utility functions
export const SessionUtils = {
  /**
   * Generate secure session ID
   */
  generateSecureId(){{#if typescript}}: string{{/if}} {
    return crypto.randomBytes(32).toString('hex');
  },

  /**
   * Hash sensitive data
   */
  hashData(data{{#if typescript}}: string{{/if}}){{#if typescript}}: string{{/if}} {
    return crypto.createHash('sha256').update(data).digest('hex');
  },

  /**
   * Validate session token format
   */
  isValidTokenFormat(token{{#if typescript}}: string{{/if}}){{#if typescript}}: boolean{{/if}} {
    {{#if (eq sessionType 'jwt')}}
    // JWT format validation
    const parts = token.split('.');
    return parts.length === 3;
    {{else}}
    // Session ID format validation
    return /^[a-f0-9]{64}$/i.test(token);
    {{/if}}
  },

  /**
   * Create secure cookie configuration
   */
  createCookieConfig(){{#if typescript}}: any{{/if}} {
    return {
      httpOnly: true,
      secure: {{secureCookies}},
      sameSite: '{{sameSite}}',
      maxAge: {{tokenExpiry}} * 60 * 1000, // Convert minutes to milliseconds
      path: '/',
      {{#if domain}}
      domain: '{{domain}}',
      {{/if}}
    };
  },
};