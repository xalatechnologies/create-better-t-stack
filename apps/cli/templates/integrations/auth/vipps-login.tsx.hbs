import React, { useState } from 'react';
{{#if typescript}}
import type { VippsUserProfile } from './vipps.types';
{{/if}}

{{#if typescript}}
interface VippsLoginProps {
  onSuccess?: (user: VippsUserProfile) => void;
  onError?: (error: Error) => void;
  redirectUrl?: string;
  scopes?: string[];
  className?: string;
  size?: 'small' | 'medium' | 'large';
  variant?: 'default' | 'outline' | 'text';
  disabled?: boolean;
}
{{/if}}

export const VippsLogin{{#if typescript}}: React.FC<VippsLoginProps>{{/if}} = ({
  onSuccess,
  onError,
  redirectUrl = '{{redirectUrl}}',
  scopes = {{{json scopes}}},
  className = '',
  size = 'medium',
  variant = 'default',
  disabled = false,
}) => {
  const [isLoading, setIsLoading] = useState(false);

  const handleVippsLogin = async () => {
    if (disabled || isLoading) return;
    
    setIsLoading(true);
    
    try {
      // Generate secure state parameter
      const state = generateSecureState();
      
      // Store state and redirect URL for validation
      if (typeof window !== 'undefined') {
        sessionStorage.setItem('vipps_auth_state', state);
        sessionStorage.setItem('vipps_redirect_url', redirectUrl);
      }

      // Construct Vipps authorization URL
      const authUrl = new URL('{{vippsConfig.authUrl}}');
      authUrl.searchParams.set('client_id', '{{vippsConfig.clientId}}');
      authUrl.searchParams.set('response_type', 'code');
      authUrl.searchParams.set('redirect_uri', redirectUrl);
      authUrl.searchParams.set('scope', scopes.join(' '));
      authUrl.searchParams.set('state', state);
      
      // Add Norwegian language preference
      authUrl.searchParams.set('ui_locales', 'nb-NO');
      
      {{#if includeProfile}}
      // Request additional profile information
      authUrl.searchParams.set('claims', JSON.stringify({
        userinfo: {
          name: { essential: true },
          email: { essential: false },
          phone_number: { essential: false },
          address: { essential: false },
        }
      }));
      {{/if}}
      
      // Redirect to Vipps
      window.location.href = authUrl.toString();
      
    } catch (error) {
      setIsLoading(false);
      console.error('Vipps login error:', error);
      onError?.(error as Error);
    }
  };

  const generateSecureState = () => {
    const array = new Uint8Array(32);
    crypto.getRandomValues(array);
    return btoa(String.fromCharCode.apply(null, Array.from(array)))
      .replace(/\+/g, '-')
      .replace(/\//g, '_')
      .replace(/=/g, '');
  };

  const getSizeStyles = () => {
    switch (size) {
      case 'small':
        return {
          padding: '8px 16px',
          fontSize: '14px',
          height: '36px',
        };
      case 'large':
        return {
          padding: '16px 32px',
          fontSize: '18px',
          height: '56px',
        };
      default:
        return {
          padding: '12px 24px',
          fontSize: '16px',
          height: '48px',
        };
    }
  };

  const getVariantStyles = () => {
    const sizeStyles = getSizeStyles();
    
    switch (variant) {
      case 'outline':
        return {
          ...sizeStyles,
          backgroundColor: 'transparent',
          color: '#ff5b24',
          border: '2px solid #ff5b24',
          borderRadius: '8px',
        };
      case 'text':
        return {
          ...sizeStyles,
          backgroundColor: 'transparent',
          color: '#ff5b24',
          border: 'none',
          borderRadius: '8px',
        };
      default:
        return {
          ...sizeStyles,
          backgroundColor: '#ff5b24',
          color: 'white',
          border: 'none',
          borderRadius: '8px',
        };
    }
  };

  const buttonStyles = {
    ...getVariantStyles(),
    fontWeight: '600',
    cursor: (disabled || isLoading) ? 'not-allowed' : 'pointer',
    opacity: (disabled || isLoading) ? 0.6 : 1,
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    gap: '8px',
    transition: 'all 0.2s ease',
    fontFamily: 'inherit',
    textDecoration: 'none',
    outline: 'none',
    position: 'relative',
  };

  return (
    <button
      onClick={handleVippsLogin}
      disabled={disabled || isLoading}
      className={`vipps-login-button ${className}`}
      style={buttonStyles}
      onMouseEnter={(e) => {
        if (!disabled && !isLoading) {
          e.target.style.transform = 'translateY(-1px)';
          e.target.style.boxShadow = '0 4px 12px rgba(255, 91, 36, 0.3)';
        }
      }}
      onMouseLeave={(e) => {
        if (!disabled && !isLoading) {
          e.target.style.transform = 'translateY(0)';
          e.target.style.boxShadow = 'none';
        }
      }}
      aria-label="Logg inn med Vipps"
      type="button"
    >
      {isLoading ? (
        <>
          <LoadingSpinner size={size} />
          <span>Kobler til Vipps...</span>
        </>
      ) : (
        <>
          <VippsIcon size={size} />
          <span>Logg inn med Vipps</span>
        </>
      )}
    </button>
  );
};

{{#if typescript}}
interface IconProps {
  size?: 'small' | 'medium' | 'large';
}

const VippsIcon: React.FC<IconProps> = ({ size = 'medium' }) => {
{{else}}
const VippsIcon = ({ size = 'medium' }) => {
{{/if}}
  const iconSize = size === 'small' ? '18' : size === 'large' ? '28' : '24';
  
  return (
    <svg width={iconSize} height={iconSize} viewBox="0 0 24 24" fill="currentColor">
      <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2z"/>
      <path d="M8.5 7h2.8l-1.4 4.5h1.4L13 7h2.8l-2.1 6.8h-1.4l1.4-4.5H12l-1.4 4.5H8.8L8.5 7z" fill="white"/>
    </svg>
  );
};

{{#if typescript}}
const LoadingSpinner: React.FC<IconProps> = ({ size = 'medium' }) => {
{{else}}
const LoadingSpinner = ({ size = 'medium' }) => {
{{/if}}
  const spinnerSize = size === 'small' ? '16' : size === 'large' ? '24' : '20';
  
  return (
    <svg
      width={spinnerSize}
      height={spinnerSize}
      viewBox="0 0 24 24"
      fill="none"
      className="vipps-loading-spinner"
      style={{
        animation: 'spin 1s linear infinite',
      }}
    >
      <circle
        cx="12"
        cy="12"
        r="10"
        stroke="currentColor"
        strokeWidth="4"
        strokeLinecap="round"
        strokeDasharray="31.416"
        strokeDashoffset="31.416"
        style={{
          animation: 'dash 2s ease-in-out infinite',
        }}
      />
      <style jsx>{`
        @keyframes spin {
          0% { transform: rotate(0deg); }
          100% { transform: rotate(360deg); }
        }
        @keyframes dash {
          0% {
            stroke-dasharray: 1, 150;
            stroke-dashoffset: 0;
          }
          50% {
            stroke-dasharray: 90, 150;
            stroke-dashoffset: -35;
          }
          100% {
            stroke-dasharray: 90, 150;
            stroke-dashoffset: -124;
          }
        }
      `}</style>
    </svg>
  );
};

// Export additional utilities
export const VippsLoginConfig = {
  scopes: {
    basic: ['openid'],
    profile: ['openid', 'name', 'email'],
    extended: ['openid', 'name', 'email', 'phoneNumber', 'address'],
  },
  environments: {
    test: 'https://apitest.vipps.no',
    production: 'https://api.vipps.no',
  },
};

{{#if typescript}}
// Re-export types for convenience
export type { VippsUserProfile } from './vipps.types';
{{/if}}