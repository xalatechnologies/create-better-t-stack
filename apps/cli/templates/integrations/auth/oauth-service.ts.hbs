{{#if typescript}}
import type { 
  {{capitalize provider}}Config, 
  {{capitalize provider}}UserProfile, 
  OAuthTokenResponse 
} from './{{provider}}.types';
{{/if}}

/**
 * {{providerConfig.displayName}} OAuth Service
 * Handles OAuth 2.0 authentication flow with {{providerConfig.displayName}}
 */
export class {{capitalize provider}}AuthService {
  private config{{#if typescript}}: {{capitalize provider}}Config{{/if}};
  private tokenCache{{#if typescript}}: Map<string, { token: string; expires: number }>{{/if}} = new Map();
  
  constructor(config{{#if typescript}}: {{capitalize provider}}Config{{/if}}) {
    this.config = config;
    this.validateConfig();
  }

  /**
   * Validate the configuration
   */
  private validateConfig(){{#if typescript}}: void{{/if}} {
    const required = ['clientId', 'clientSecret', 'redirectUri'];
    for (const field of required) {
      if (!this.config[field]) {
        throw new Error(`Missing required {{providerConfig.displayName}} configuration: ${field}`);
      }
    }
  }

  /**
   * Exchange authorization code for access token
   * @param code - Authorization code from {{providerConfig.displayName}}
   * @param redirectUri - Redirect URI used in the authorization request
   * @param codeVerifier - PKCE code verifier (if PKCE was used)
   * @param state - State parameter for CSRF protection
   * @returns Token response with access token and user info
   */
  async exchangeCodeForToken(
    code{{#if typescript}}: string{{/if}},
    redirectUri{{#if typescript}}: string{{/if}},
    {{#if enablePKCE}}codeVerifier{{#if typescript}}?: string{{/if}},{{/if}}
    state{{#if typescript}}?: string{{/if}}
  ){{#if typescript}}: Promise<OAuthTokenResponse & { user?: {{capitalize provider}}UserProfile }>{{/if}} {
    try {
      // Prepare token request parameters
      const tokenParams = new URLSearchParams({
        grant_type: 'authorization_code',
        code,
        redirect_uri: redirectUri,
        client_id: this.config.clientId,
        client_secret: this.config.clientSecret,
        {{#if enablePKCE}}
        ...(codeVerifier && { code_verifier: codeVerifier }),
        {{/if}}
      });

      // Make token request
      const response = await fetch('{{providerConfig.tokenUrl}}', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
          'Accept': 'application/json',
          'User-Agent': '{{projectName}}/1.0',
          {{#if (eq provider "github")}}
          'Accept': 'application/vnd.github+json',
          {{/if}}
        },
        body: tokenParams.toString(),
      });

      if (!response.ok) {
        const errorData = await response.text();
        let parsedError;
        try {
          parsedError = JSON.parse(errorData);
        } catch {
          parsedError = { error: 'unknown', error_description: errorData };
        }
        
        throw new Error(`Token exchange failed: ${parsedError.error} - ${parsedError.error_description || response.statusText}`);
      }

      const tokenData{{#if typescript}}: OAuthTokenResponse{{/if}} = await response.json();

      // Cache the token for future use
      if (tokenData.access_token && tokenData.expires_in) {
        this.tokenCache.set(tokenData.access_token, {
          token: tokenData.access_token,
          expires: Date.now() + (tokenData.expires_in * 1000),
        });
      }

      // Fetch user profile
      let user{{#if typescript}}: {{capitalize provider}}UserProfile | undefined{{/if}};
      if (tokenData.access_token) {
        try {
          user = await this.getUserProfile(tokenData.access_token);
        } catch (profileError) {
          console.warn('Failed to fetch user profile:', profileError);
          // Don't fail the entire authentication if profile fetch fails
        }
      }

      return { ...tokenData, user };

    } catch (error) {
      console.error('{{capitalize provider}} token exchange error:', error);
      throw error;
    }
  }

  /**
   * Get user profile from {{providerConfig.displayName}}
   * @param accessToken - Access token
   * @returns User profile data
   */
  async getUserProfile(accessToken{{#if typescript}}: string{{/if}}){{#if typescript}}: Promise<{{capitalize provider}}UserProfile>{{/if}} {
    try {
      {{#unless (eq provider "apple")}}
      const response = await fetch('{{providerConfig.userInfoUrl}}', {
        headers: {
          'Authorization': `Bearer ${accessToken}`,
          'Accept': 'application/json',
          'User-Agent': '{{projectName}}/1.0',
          {{#if (eq provider "github")}}
          'Accept': 'application/vnd.github+json',
          'X-GitHub-Api-Version': '2022-11-28',
          {{/if}}
          {{#if (eq provider "microsoft")}}
          'ConsistencyLevel': 'eventual',
          {{/if}}
        },
      });

      if (!response.ok) {
        throw new Error(`Failed to fetch user profile: ${response.status} ${response.statusText}`);
      }

      const profile = await response.json();
      
      {{#if (eq provider "github")}}
      // GitHub requires separate call for email if not public
      let emailData = [];
      try {
        const emailResponse = await fetch('https://api.github.com/user/emails', {
          headers: {
            'Authorization': `Bearer ${accessToken}`,
            'Accept': 'application/vnd.github+json',
            'X-GitHub-Api-Version': '2022-11-28',
          },
        });
        if (emailResponse.ok) {
          emailData = await emailResponse.json();
          const primaryEmail = emailData.find(email => email.primary && email.verified);
          if (primaryEmail) {
            profile.email = primaryEmail.email;
          }
        }
      } catch (emailError) {
        console.warn('Failed to fetch GitHub email:', emailError);
      }
      {{/if}}
      
      {{#if (eq provider "facebook")}}
      // Facebook requires fields parameter
      const fieldsResponse = await fetch(`https://graph.facebook.com/v18.0/me?fields=id,name,email,first_name,last_name,picture&access_token=${accessToken}`);
      if (fieldsResponse.ok) {
        const fieldsData = await fieldsResponse.json();
        Object.assign(profile, fieldsData);
      }
      {{/if}}
      
      {{else}}
      // Apple provides user info in the ID token
      const profile = this.decodeIdToken(accessToken); // You'd need to implement ID token decoding
      {{/unless}}
      
      return this.normalizeUserProfile(profile);

    } catch (error) {
      console.error('{{capitalize provider}} profile fetch error:', error);
      throw error;
    }
  }

  {{#if includeRefresh}}
  /**
   * Refresh access token using refresh token
   * @param refreshToken - Refresh token
   * @returns New token response
   */
  async refreshToken(refreshToken{{#if typescript}}: string{{/if}}){{#if typescript}}: Promise<OAuthTokenResponse>{{/if}} {
    try {
      const tokenParams = new URLSearchParams({
        grant_type: 'refresh_token',
        refresh_token: refreshToken,
        client_id: this.config.clientId,
        client_secret: this.config.clientSecret,
      });

      const response = await fetch('{{providerConfig.tokenUrl}}', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
          'Accept': 'application/json',
          'User-Agent': '{{projectName}}/1.0',
        },
        body: tokenParams.toString(),
      });

      if (!response.ok) {
        const errorData = await response.text();
        throw new Error(`Token refresh failed: ${response.status} ${response.statusText} - ${errorData}`);
      }

      const tokenData{{#if typescript}}: OAuthTokenResponse{{/if}} = await response.json();

      // Update token cache
      if (tokenData.access_token && tokenData.expires_in) {
        this.tokenCache.set(tokenData.access_token, {
          token: tokenData.access_token,
          expires: Date.now() + (tokenData.expires_in * 1000),
        });
      }

      return tokenData;

    } catch (error) {
      console.error('{{capitalize provider}} token refresh error:', error);
      throw error;
    }
  }
  {{/if}}

  /**
   * Revoke access token
   * @param token - Access token to revoke
   */
  async revokeToken(token{{#if typescript}}: string{{/if}}){{#if typescript}}: Promise<void>{{/if}} {
    try {
      // Remove from cache first
      this.tokenCache.delete(token);
      
      {{#if (eq provider "google")}}
      await fetch(`https://oauth2.googleapis.com/revoke?token=${token}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
        },
      });
      {{else if (eq provider "microsoft")}}
      // Microsoft uses logout URL
      const logoutUrl = `https://login.microsoftonline.com/common/oauth2/v2.0/logout?post_logout_redirect_uri=${encodeURIComponent(this.config.redirectUri)}`;
      // Note: This requires user interaction
      console.log('Microsoft logout URL:', logoutUrl);
      {{else if (eq provider "github")}}
      // GitHub tokens can be revoked via API
      await fetch(`https://api.github.com/applications/${this.config.clientId}/token`, {
        method: 'DELETE',
        headers: {
          'Authorization': `Basic ${btoa(`${this.config.clientId}:${this.config.clientSecret}`)}`,
          'Accept': 'application/vnd.github+json',
        },
        body: JSON.stringify({ access_token: token }),
      });
      {{else if (eq provider "discord")}}
      await fetch('https://discord.com/api/oauth2/token/revoke', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: new URLSearchParams({
          token,
          client_id: this.config.clientId,
          client_secret: this.config.clientSecret,
        }),
      });
      {{else}}
      // {{providerConfig.displayName}} token revocation
      console.warn('Token revocation not implemented for {{provider}}');
      {{/if}}

    } catch (error) {
      console.error('{{capitalize provider}} token revocation error:', error);
      // Don't throw error to avoid breaking logout flows
    }
  }

  /**
   * Normalize user profile from {{providerConfig.displayName}} format to common format
   * @param profile - Raw profile data from {{providerConfig.displayName}}
   * @returns Normalized user profile
   */
  private normalizeUserProfile(profile{{#if typescript}}: any{{/if}}){{#if typescript}}: {{capitalize provider}}UserProfile{{/if}} {
    const normalized{{#if typescript}}: {{capitalize provider}}UserProfile{{/if}} = {
      id: '',
      provider: '{{provider}}',
      raw: profile,
    };

    {{#if (eq provider "google")}}
    // Google OAuth profile normalization
    normalized.id = profile.id || profile.sub;
    normalized.email = profile.email;
    normalized.name = profile.name;
    normalized.firstName = profile.given_name;
    normalized.lastName = profile.family_name;
    normalized.avatar = profile.picture;
    {{else if (eq provider "github")}}
    // GitHub profile normalization
    normalized.id = profile.id?.toString();
    normalized.email = profile.email;
    normalized.name = profile.name;
    normalized.username = profile.login;
    normalized.avatar = profile.avatar_url;
    {{else if (eq provider "microsoft")}}
    // Microsoft Graph profile normalization
    normalized.id = profile.id;
    normalized.email = profile.mail || profile.userPrincipalName;
    normalized.name = profile.displayName;
    normalized.firstName = profile.givenName;
    normalized.lastName = profile.surname;
    normalized.username = profile.mailNickname;
    {{else if (eq provider "discord")}}
    // Discord profile normalization
    normalized.id = profile.id;
    normalized.email = profile.email;
    normalized.username = profile.username;
    normalized.name = profile.global_name || profile.username;
    normalized.avatar = profile.avatar 
      ? `https://cdn.discordapp.com/avatars/${profile.id}/${profile.avatar}.png`
      : null;
    {{else if (eq provider "twitter")}}
    // Twitter/X profile normalization
    normalized.id = profile.id;
    normalized.email = profile.email;
    normalized.username = profile.username;
    normalized.name = profile.name;
    normalized.avatar = profile.profile_image_url;
    {{else if (eq provider "facebook")}}
    // Facebook profile normalization
    normalized.id = profile.id;
    normalized.email = profile.email;
    normalized.name = profile.name;
    normalized.firstName = profile.first_name;
    normalized.lastName = profile.last_name;
    normalized.avatar = profile.picture?.data?.url;
    {{else if (eq provider "linkedin")}}
    // LinkedIn profile normalization
    normalized.id = profile.id;
    normalized.email = profile.emailAddress;
    normalized.name = `${profile.firstName?.localized?.en_US || ''} ${profile.lastName?.localized?.en_US || ''}`.trim();
    normalized.firstName = profile.firstName?.localized?.en_US;
    normalized.lastName = profile.lastName?.localized?.en_US;
    normalized.avatar = profile.profilePicture?.['displayImage~']?.elements?.[0]?.identifiers?.[0]?.identifier;
    {{else if (eq provider "apple")}}
    // Apple ID profile normalization
    normalized.id = profile.sub;
    normalized.email = profile.email;
    normalized.name = profile.name ? `${profile.name.firstName || ''} ${profile.name.lastName || ''}`.trim() : undefined;
    normalized.firstName = profile.name?.firstName;
    normalized.lastName = profile.name?.lastName;
    {{else}}
    // Generic profile normalization for {{provider}}
    normalized.id = profile.id?.toString() || profile.sub || '';
    normalized.email = profile.email;
    normalized.name = profile.name || profile.display_name;
    normalized.username = profile.username || profile.login;
    normalized.avatar = profile.avatar_url || profile.picture || profile.image;
    {{/if}}

    // Validate required fields
    if (!normalized.id) {
      throw new Error('User ID not found in {{providerConfig.displayName}} profile');
    }

    return normalized;
  }

  /**
   * Check if token is valid and not expired
   * @param token - Access token to validate
   * @returns True if token is valid
   */
  isTokenValid(token{{#if typescript}}: string{{/if}}){{#if typescript}}: boolean{{/if}} {
    const cached = this.tokenCache.get(token);
    if (!cached) return false;
    
    return Date.now() < cached.expires;
  }

  /**
   * Clean up expired tokens from cache
   */
  cleanupTokenCache(){{#if typescript}}: void{{/if}} {
    const now = Date.now();
    for (const [token, data] of this.tokenCache.entries()) {
      if (now >= data.expires) {
        this.tokenCache.delete(token);
      }
    }
  }

  /**
   * Get the current configuration
   */
  getConfig(){{#if typescript}}: {{capitalize provider}}Config{{/if}} {
    return { ...this.config };
  }

  /**
   * Update configuration
   */
  updateConfig(newConfig{{#if typescript}}: Partial<{{capitalize provider}}Config>{{/if}}){{#if typescript}}: void{{/if}} {
    this.config = { ...this.config, ...newConfig };
    this.validateConfig();
  }

  /**
   * Generate authorization URL for OAuth flow
   * @param scopes - Requested scopes
   * @param state - State parameter for CSRF protection
   * @param codeChallenge - PKCE code challenge
   * @returns Authorization URL
   */
  generateAuthUrl(
    scopes{{#if typescript}}: string[]{{/if}} = this.config.scopes,
    state{{#if typescript}}?: string{{/if}},
    {{#if enablePKCE}}codeChallenge{{#if typescript}}?: string{{/if}}{{/if}}
  ){{#if typescript}}: string{{/if}} {
    const authUrl = new URL('{{providerConfig.authUrl}}');
    
    authUrl.searchParams.set('client_id', this.config.clientId);
    authUrl.searchParams.set('response_type', 'code');
    authUrl.searchParams.set('redirect_uri', this.config.redirectUri);
    authUrl.searchParams.set('scope', scopes.join(' '));
    
    if (state) {
      authUrl.searchParams.set('state', state);
    }
    
    {{#if enablePKCE}}
    if (codeChallenge) {
      authUrl.searchParams.set('code_challenge', codeChallenge);
      authUrl.searchParams.set('code_challenge_method', 'S256');
    }
    {{/if}}
    
    {{#if (eq provider "google")}}
    // Google-specific parameters
    authUrl.searchParams.set('access_type', 'offline');
    authUrl.searchParams.set('prompt', 'consent');
    authUrl.searchParams.set('include_granted_scopes', 'true');
    {{/if}}
    
    {{#if (eq provider "microsoft")}}
    // Microsoft-specific parameters
    authUrl.searchParams.set('prompt', 'select_account');
    authUrl.searchParams.set('response_mode', 'query');
    {{/if}}
    
    {{#if (eq provider "github")}}
    // GitHub-specific parameters
    authUrl.searchParams.set('allow_signup', 'true');
    {{/if}}

    return authUrl.toString();
  }

  /**
   * Validate token by making a test API call
   * @param token - Access token to validate
   * @returns True if token is valid
   */
  async validateTokenRemotely(token{{#if typescript}}: string{{/if}}){{#if typescript}}: Promise<boolean>{{/if}} {
    try {
      {{#if (eq provider "google")}}
      const response = await fetch(`https://oauth2.googleapis.com/tokeninfo?access_token=${token}`);
      return response.ok;
      {{else if (eq provider "github")}}
      const response = await fetch('https://api.github.com/user', {
        headers: { 'Authorization': `Bearer ${token}` },
      });
      return response.ok;
      {{else if (eq provider "microsoft")}}
      const response = await fetch('https://graph.microsoft.com/v1.0/me', {
        headers: { 'Authorization': `Bearer ${token}` },
      });
      return response.ok;
      {{else}}
      // Token validation for {{provider}} not implemented
      return this.isTokenValid(token);
      {{/if}}
    } catch {
      return false;
    }
  }
}

// Create and export service instance
const {{provider}}Config{{#if typescript}}: {{capitalize provider}}Config{{/if}} = {
  clientId: process.env.{{uppercase provider}}_CLIENT_ID || '',
  clientSecret: process.env.{{uppercase provider}}_CLIENT_SECRET || '',
  redirectUri: process.env.{{uppercase provider}}_REDIRECT_URI || '',
  scopes: process.env.{{uppercase provider}}_SCOPES?.split(',') || {{{json providerConfig.defaultScopes}}},
};

export const {{provider}}Auth = new {{capitalize provider}}AuthService({{provider}}Config);

// Export utilities and constants
export const {{capitalize provider}}Scopes = {
  {{#if (eq provider "google")}}
  OPENID: 'openid',
  EMAIL: 'email',
  PROFILE: 'profile',
  DRIVE: 'https://www.googleapis.com/auth/drive',
  CALENDAR: 'https://www.googleapis.com/auth/calendar',
  {{else if (eq provider "github")}}
  USER: 'user',
  USER_EMAIL: 'user:email',
  READ_USER: 'read:user',
  REPO: 'repo',
  PUBLIC_REPO: 'public_repo',
  {{else if (eq provider "microsoft")}}
  OPENID: 'openid',
  PROFILE: 'profile',
  EMAIL: 'email',
  USER_READ: 'User.Read',
  MAIL_READ: 'Mail.Read',
  {{else if (eq provider "discord")}}
  IDENTIFY: 'identify',
  EMAIL: 'email',
  GUILDS: 'guilds',
  CONNECTIONS: 'connections',
  {{else}}
  // Define scopes for {{provider}}
  {{/if}}
} as const;

// Helper function to create service with custom config
export function create{{capitalize provider}}AuthService(config{{#if typescript}}: {{capitalize provider}}Config{{/if}}) {
  return new {{capitalize provider}}AuthService(config);
}

{{#if typescript}}
// Re-export types for convenience
export type {
  {{capitalize provider}}Config,
  {{capitalize provider}}UserProfile,
  OAuthTokenResponse,
} from './{{provider}}.types';
{{/if}}