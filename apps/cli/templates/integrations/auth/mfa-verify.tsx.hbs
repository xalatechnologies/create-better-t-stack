import React, { useState, useEffect } from 'react';
{{#if typescript}}
import type { MFAUser } from './mfa.types';

interface MFAVerifyProps {
  onSuccess?: (user: MFAUser) => void;
  onError?: (error: Error) => void;
  onUseBackupCode?: () => void;
  className?: string;
  title?: string;
  subtitle?: string;
}
{{/if}}

/**
 * MFA Verification Component for {{projectName}}
 * Handles two-factor authentication verification with TOTP and backup codes
 */
export const MFAVerify{{#if typescript}}: React.FC<MFAVerifyProps>{{/if}} = ({
  onSuccess,
  onError,
  onUseBackupCode,
  className = '',
  title = 'Two-Factor Authentication',
  subtitle = 'Please enter your authentication code to continue',
}) => {
  const [code, setCode] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [useBackup, setUseBackup] = useState(false);
  const [error, setError] = useState('');
  const [attempts, setAttempts] = useState(0);
  const maxAttempts = 3;

  // Auto-focus the input when component mounts or backup mode changes
  useEffect(() => {
    const input = document.getElementById('mfa-code');
    if (input) {
      input.focus();
    }
  }, [useBackup]);

  const handleVerify = async (e{{#if typescript}}: React.FormEvent{{/if}}) => {
    e.preventDefault();
    
    if (!code.trim()) {
      setError('Please enter the verification code');
      return;
    }

    if (attempts >= maxAttempts) {
      setError('Too many failed attempts. Please try again later.');
      return;
    }

    setIsLoading(true);
    setError('');

    try {
      const response = await fetch('/api/auth/mfa/challenge', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          code: code.trim(), 
          isBackupCode: useBackup 
        }),
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(errorData.message || 'Invalid verification code');
      }

      const { user } = await response.json();
      onSuccess?.(user);
      
      // Reset form state on success
      setCode('');
      setAttempts(0);
      setError('');

    } catch (error) {
      const newAttempts = attempts + 1;
      setAttempts(newAttempts);
      
      let errorMessage = error{{#if typescript}} as Error{{/if}}.message || 'Verification failed';
      
      if (newAttempts >= maxAttempts) {
        errorMessage = 'Too many failed attempts. Please try again later.';
      } else {
        errorMessage += ` (${newAttempts}/${maxAttempts} attempts)`;
      }
      
      setError(errorMessage);
      onError?.(error{{#if typescript}} as Error{{/if}});
      
      // Clear code input on error
      setCode('');
    } finally {
      setIsLoading(false);
    }
  };

  const handleCodeChange = (e{{#if typescript}}: React.ChangeEvent<HTMLInputElement>{{/if}}) => {
    const value = e.target.value.replace(/\D/g, ''); // Only allow digits
    setCode(value);
    setError(''); // Clear error when user starts typing
  };

  const toggleBackupMode = () => {
    setUseBackup(!useBackup);
    setCode('');
    setError('');
    onUseBackupCode?.();
  };

  const handleKeyPress = (e{{#if typescript}}: React.KeyboardEvent{{/if}}) => {
    if (e.key === 'Enter') {
      handleVerify(e{{#if typescript}} as any{{/if}});
    }
  };

  return (
    <div className={`mfa-verify max-w-md mx-auto p-6 bg-white rounded-lg shadow-lg ${className}`}>
      <div className="text-center mb-6">
        <div className="w-16 h-16 mx-auto mb-4 bg-blue-100 rounded-full flex items-center justify-center">
          <svg className="w-8 h-8 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z" />
          </svg>
        </div>
        <h2 className="text-2xl font-bold text-gray-900 mb-2">{title}</h2>
        <p className="text-gray-600">{subtitle}</p>
      </div>

      <form onSubmit={handleVerify} className="space-y-4">
        <div>
          <label htmlFor="mfa-code" className="block text-sm font-medium text-gray-700 mb-2">
            {useBackup ? 'Backup Code' : 'Authentication Code'}
          </label>
          <input
            id="mfa-code"
            type="text"
            value={code}
            onChange={handleCodeChange}
            onKeyPress={handleKeyPress}
            placeholder={useBackup ? "Enter backup code" : "123456"}
            maxLength={useBackup ? 8 : 6}
            className="w-full px-3 py-3 text-center text-2xl font-mono border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            disabled={isLoading || attempts >= maxAttempts}
            autoComplete="one-time-code"
            inputMode="numeric"
            required
          />
          <p className="text-sm text-gray-500 mt-1">
            {useBackup 
              ? 'Enter one of your backup codes' 
              : 'Enter the 6-digit code from your authenticator app'
            }
          </p>
        </div>

        {error && (
          <div className="bg-red-50 border border-red-200 rounded-lg p-3">
            <div className="flex">
              <svg className="w-5 h-5 text-red-600 mr-2 mt-0.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
              <p className="text-sm text-red-800">{error}</p>
            </div>
          </div>
        )}

        <div className="space-y-3">
          <button
            type="submit"
            disabled={isLoading || !code.trim() || attempts >= maxAttempts}
            className="w-full px-4 py-3 bg-blue-600 text-white font-medium rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            {isLoading ? (
              <span className="flex items-center justify-center">
                <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                  <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                Verifying...
              </span>
            ) : (
              'Verify'
            )}
          </button>

          <button
            type="button"
            onClick={toggleBackupMode}
            disabled={isLoading || attempts >= maxAttempts}
            className="w-full px-4 py-2 text-blue-600 bg-blue-50 hover:bg-blue-100 rounded-lg transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:opacity-50"
          >
            {useBackup ? (
              <span className="flex items-center justify-center">
                <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 19l-7-7m0 0l7-7m-7 7h18" />
                </svg>
                Use authentication code
              </span>
            ) : (
              <span className="flex items-center justify-center">
                <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 7a2 2 0 012 2m4 0a6 6 0 01-7.743 5.743L11 17H9v2H7v2H4a1 1 0 01-1-1v-2.586a1 1 0 01.293-.707l5.964-5.964A6 6 0 1121 9z" />
                </svg>
                Use backup code instead
              </span>
            )}
          </button>
        </div>

        <div className="text-center pt-4 border-t border-gray-200">
          <p className="text-sm text-gray-600">
            Having trouble? Contact{' '}
            <a href="/support" className="text-blue-600 hover:text-blue-700 underline">
              support
            </a>
          </p>
        </div>
      </form>

      {/* Accessibility: Screen reader instructions */}
      <div className="sr-only" aria-live="polite">
        {error && `Error: ${error}`}
        {isLoading && 'Verifying your code, please wait.'}
      </div>
    </div>
  );
};