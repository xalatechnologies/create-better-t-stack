{{#if typescript}}
import type { 
  WebClient,
  WebAPICallResult,
  ChatPostMessageArguments,
  ConversationsListArguments,
  UsersInfoArguments
} from '@slack/web-api';
{{/if}}
import { WebClient } from '@slack/web-api';

/**
 * Slack Client for {{projectName}}
 * Provides a simplified interface for Slack API operations
 */
export class SlackClient {
  private client{{#if typescript}}: WebClient{{/if}};
  private defaultChannel{{#if typescript}}: string{{/if}};

  constructor(token{{#if typescript}}: string{{/if}}, defaultChannel{{#if typescript}}?: string{{/if}}) {
    this.client = new WebClient(token);
    this.defaultChannel = defaultChannel || '#general';
  }

  /**
   * Send a simple text message
   */
  async sendMessage(
    text{{#if typescript}}: string{{/if}}, 
    channel{{#if typescript}}?: string{{/if}}
  ){{#if typescript}}: Promise<WebAPICallResult>{{/if}} {
    try {
      return await this.client.chat.postMessage({
        channel: channel || this.defaultChannel,
        text,
      });
    } catch (error) {
      console.error('Failed to send message:', error);
      throw error;
    }
  }

  /**
   * Send a formatted message with blocks
   */
  async sendBlockMessage(
    blocks{{#if typescript}}: any[]{{/if}}, 
    channel{{#if typescript}}?: string{{/if}}, 
    text{{#if typescript}}: string{{/if}} = 'New message'
  ){{#if typescript}}: Promise<WebAPICallResult>{{/if}} {
    try {
      return await this.client.chat.postMessage({
        channel: channel || this.defaultChannel,
        blocks,
        text, // Fallback for notifications
      });
    } catch (error) {
      console.error('Failed to send block message:', error);
      throw error;
    }
  }

  /**
   * Send an alert notification
   */
  async sendAlert(
    title{{#if typescript}}: string{{/if}}, 
    message{{#if typescript}}: string{{/if}}, 
    severity{{#if typescript}}: 'info' | 'warning' | 'error' | 'success'{{/if}} = 'info',
    channel{{#if typescript}}?: string{{/if}}
  ){{#if typescript}}: Promise<WebAPICallResult>{{/if}} {
    const colors = {
      info: '#2196F3',
      warning: '#FF9800',
      error: '#F44336',
      success: '#4CAF50',
    };

    const emoji = {
      info: ':information_source:',
      warning: ':warning:',
      error: ':x:',
      success: ':white_check_mark:',
    };

    const blocks = [
      {
        type: 'header',
        text: {
          type: 'plain_text',
          text: `${emoji[severity]} ${title}`,
          emoji: true,
        },
      },
      {
        type: 'section',
        text: {
          type: 'mrkdwn',
          text: message,
        },
      },
      {
        type: 'context',
        elements: [
          {
            type: 'mrkdwn',
            text: `*Time:* ${new Date().toLocaleString()} | *App:* {{projectName}}`,
          },
        ],
      },
    ];

    const attachments = [
      {
        color: colors[severity],
        blocks,
      },
    ];

    return await this.client.chat.postMessage({
      channel: channel || this.defaultChannel,
      attachments,
      text: `${emoji[severity]} ${title}`,
    });
  }

  /**
   * Send a deployment notification
   */
  async sendDeploymentNotification(
    environment{{#if typescript}}: string{{/if}},
    version{{#if typescript}}: string{{/if}},
    status{{#if typescript}}: 'started' | 'success' | 'failed'{{/if}},
    details{{#if typescript}}?: string{{/if}},
    channel{{#if typescript}}?: string{{/if}}
  ){{#if typescript}}: Promise<WebAPICallResult>{{/if}} {
    const statusConfig = {
      started: { color: '#2196F3', emoji: ':rocket:', text: 'Deployment Started' },
      success: { color: '#4CAF50', emoji: ':white_check_mark:', text: 'Deployment Successful' },
      failed: { color: '#F44336', emoji: ':x:', text: 'Deployment Failed' },
    };

    const config = statusConfig[status];

    const blocks = [
      {
        type: 'header',
        text: {
          type: 'plain_text',
          text: `${config.emoji} ${config.text}`,
          emoji: true,
        },
      },
      {
        type: 'section',
        fields: [
          {
            type: 'mrkdwn',
            text: `*Environment:*\n${environment}`,
          },
          {
            type: 'mrkdwn',
            text: `*Version:*\n${version}`,
          },
        ],
      },
    ];

    if (details) {
      blocks.push({
        type: 'section',
        text: {
          type: 'mrkdwn',
          text: `*Details:*\n${details}`,
        },
      });
    }

    blocks.push({
      type: 'context',
      elements: [
        {
          type: 'mrkdwn',
          text: `Deployed at ${new Date().toLocaleString()}`,
        },
      ],
    });

    const attachments = [
      {
        color: config.color,
        blocks,
      },
    ];

    return await this.client.chat.postMessage({
      channel: channel || this.defaultChannel,
      attachments,
      text: `${config.emoji} Deployment ${status} for ${environment}`,
    });
  }

  /**
   * Get list of channels
   */
  async getChannels(
    includePrivate{{#if typescript}}: boolean{{/if}} = false
  ){{#if typescript}}: Promise<any[]>{{/if}} {
    try {
      const result = await this.client.conversations.list({
        types: includePrivate ? 'public_channel,private_channel' : 'public_channel',
        exclude_archived: true,
        limit: 1000,
      });

      return result.channels || [];
    } catch (error) {
      console.error('Failed to get channels:', error);
      throw error;
    }
  }

  /**
   * Get user information
   */
  async getUserInfo(userId{{#if typescript}}: string{{/if}}){{#if typescript}}: Promise<any>{{/if}} {
    try {
      const result = await this.client.users.info({
        user: userId,
      });

      return result.user;
    } catch (error) {
      console.error('Failed to get user info:', error);
      throw error;
    }
  }

  /**
   * Upload a file
   */
  async uploadFile(
    filename{{#if typescript}}: string{{/if}},
    file{{#if typescript}}: Buffer | string{{/if}},
    channels{{#if typescript}}: string[]{{/if}},
    comment{{#if typescript}}?: string{{/if}}
  ){{#if typescript}}: Promise<WebAPICallResult>{{/if}} {
    try {
      return await this.client.files.upload({
        filename,
        file,
        channels: channels.join(','),
        initial_comment: comment,
      });
    } catch (error) {
      console.error('Failed to upload file:', error);
      throw error;
    }
  }

  /**
   * Create a scheduled message
   */
  async scheduleMessage(
    text{{#if typescript}}: string{{/if}},
    postAt{{#if typescript}}: Date{{/if}},
    channel{{#if typescript}}?: string{{/if}}
  ){{#if typescript}}: Promise<WebAPICallResult>{{/if}} {
    try {
      return await this.client.chat.scheduleMessage({
        channel: channel || this.defaultChannel,
        text,
        post_at: Math.floor(postAt.getTime() / 1000),
      });
    } catch (error) {
      console.error('Failed to schedule message:', error);
      throw error;
    }
  }

  /**
   * Add a reaction to a message
   */
  async addReaction(
    emoji{{#if typescript}}: string{{/if}},
    channel{{#if typescript}}: string{{/if}},
    timestamp{{#if typescript}}: string{{/if}}
  ){{#if typescript}}: Promise<WebAPICallResult>{{/if}} {
    try {
      return await this.client.reactions.add({
        name: emoji,
        channel,
        timestamp,
      });
    } catch (error) {
      console.error('Failed to add reaction:', error);
      throw error;
    }
  }

  /**
   * Create a reminder
   */
  async createReminder(
    text{{#if typescript}}: string{{/if}},
    time{{#if typescript}}: Date | string{{/if}},
    user{{#if typescript}}?: string{{/if}}
  ){{#if typescript}}: Promise<WebAPICallResult>{{/if}} {
    try {
      const timeStr = time instanceof Date 
        ? time.toISOString() 
        : time;

      return await this.client.reminders.add({
        text,
        time: timeStr,
        user,
      });
    } catch (error) {
      console.error('Failed to create reminder:', error);
      throw error;
    }
  }

  /**
   * Send a direct message
   */
  async sendDirectMessage(
    userId{{#if typescript}}: string{{/if}},
    text{{#if typescript}}: string{{/if}}
  ){{#if typescript}}: Promise<WebAPICallResult>{{/if}} {
    try {
      // Open a DM channel
      const openResult = await this.client.conversations.open({
        users: userId,
      });

      if (!openResult.channel?.id) {
        throw new Error('Failed to open DM channel');
      }

      // Send message to the DM channel
      return await this.client.chat.postMessage({
        channel: openResult.channel.id,
        text,
      });
    } catch (error) {
      console.error('Failed to send direct message:', error);
      throw error;
    }
  }

  /**
   * Update user profile status
   */
  async updateStatus(
    statusText{{#if typescript}}: string{{/if}},
    statusEmoji{{#if typescript}}: string{{/if}},
    statusExpiration{{#if typescript}}?: number{{/if}}
  ){{#if typescript}}: Promise<WebAPICallResult>{{/if}} {
    try {
      return await this.client.users.profile.set({
        profile: {
          status_text: statusText,
          status_emoji: statusEmoji,
          status_expiration: statusExpiration,
        },
      });
    } catch (error) {
      console.error('Failed to update status:', error);
      throw error;
    }
  }
}

// Export factory function
export function createSlackClient(
  token{{#if typescript}}: string{{/if}} = process.env.SLACK_BOT_TOKEN || '',
  defaultChannel{{#if typescript}}?: string{{/if}}
){{#if typescript}}: SlackClient{{/if}} {
  if (!token) {
    throw new Error('Slack bot token is required');
  }

  return new SlackClient(token, defaultChannel);
}

// Export default instance if token is available
{{#if typescript}}export default{{else}}module.exports =  {{/if}} process.env.SLACK_BOT_TOKEN 
  ? createSlackClient(process.env.SLACK_BOT_TOKEN) 
  : { createSlackClient };