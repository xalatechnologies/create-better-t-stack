{{#if typescript}}
import type { 
  Activity,
  TurnContext,
  MessageFactory,
  CardFactory,
  Attachment
} from 'botbuilder';
{{/if}}
import { 
  TeamsActivityHandler,
  MessageFactory,
  CardFactory
} from 'botbuilder';

/**
 * Teams Bot Handler for {{projectName}}
 * Processes Teams bot messages and events
 */
export class {{projectName}}TeamsBot extends TeamsActivityHandler {
  constructor() {
    super();

    // Handle incoming messages
    this.onMessage(async (context, next) => {
      console.log('Bot received message:', context.activity.text);
      
      const text = context.activity.text?.toLowerCase() || '';
      
      // Remove bot mention from text
      const cleanText = this.removeMentions(context.activity);

      // Handle different commands
      if (cleanText.includes('help')) {
        await this.sendHelpMessage(context);
      } else if (cleanText.includes('status')) {
        await this.sendStatusMessage(context);
      } else if (cleanText.includes('deploy')) {
        await this.handleDeployCommand(context, cleanText);
      } else if (cleanText.includes('report')) {
        await this.handleReportCommand(context, cleanText);
      } else {
        await this.sendDefaultMessage(context);
      }

      await next();
    });

    // Handle members added to conversation
    this.onMembersAdded(async (context, next) => {
      const membersAdded = context.activity.membersAdded || [];
      
      for (const member of membersAdded) {
        if (member.id !== context.activity.recipient.id) {
          await this.sendWelcomeMessage(context, member);
        }
      }

      await next();
    });

    // Handle message reactions
    this.onReactionsAdded(async (context, next) => {
      const reactions = context.activity.reactionsAdded || [];
      
      for (const reaction of reactions) {
        console.log(`User added reaction: ${reaction.type}`);
      }

      await next();
    });

    // Handle adaptive card actions
    this.onAdaptiveCardInvoke(async (context, invokeValue) => {
      console.log('Adaptive card action:', invokeValue.action);

      switch (invokeValue.action.verb) {
        case 'approve':
          return this.handleApproval(context, invokeValue);
        case 'reject':
          return this.handleRejection(context, invokeValue);
        case 'viewDetails':
          return this.handleViewDetails(context, invokeValue);
        default:
          return { statusCode: 200, type: 'application/vnd.microsoft.activity.message' };
      }
    });

    // Handle Teams app install
    this.onInstallationUpdate(async (context, next) => {
      if (context.activity.action === 'add') {
        await this.sendAppInstalledMessage(context);
      }
      await next();
    });
  }

  /**
   * Remove bot mentions from message text
   */
  private removeMentions(activity{{#if typescript}}: Activity{{/if}}){{#if typescript}}: string{{/if}} {
    let text = activity.text || '';
    
    if (activity.entities) {
      activity.entities
        .filter(entity => entity.type === 'mention')
        .forEach(entity => {
          text = text.replace(entity.text || '', '');
        });
    }

    return text.trim();
  }

  /**
   * Send help message
   */
  private async sendHelpMessage(context{{#if typescript}}: TurnContext{{/if}}) {
    const helpCard = CardFactory.adaptiveCard({
      type: 'AdaptiveCard',
      $schema: 'http://adaptivecards.io/schemas/adaptive-card.json',
      version: '1.3',
      body: [
        {
          type: 'Container',
          items: [
            {
              type: 'TextBlock',
              text: '{{projectName}} Bot Help',
              size: 'Large',
              weight: 'Bolder'
            },
            {
              type: 'TextBlock',
              text: 'Here are the available commands:',
              wrap: true,
              separator: true
            }
          ]
        },
        {
          type: 'FactSet',
          facts: [
            {
              title: 'help',
              value: 'Show this help message'
            },
            {
              title: 'status',
              value: 'Check system status'
            },
            {
              title: 'deploy [env]',
              value: 'Trigger deployment'
            },
            {
              title: 'report [type]',
              value: 'Generate report'
            }
          ]
        }
      ],
      actions: [
        {
          type: 'Action.OpenUrl',
          title: 'View Documentation',
          url: 'https://docs.{{projectName}}.com'
        }
      ]
    });

    await context.sendActivity(MessageFactory.attachment(helpCard));
  }

  /**
   * Send status message
   */
  private async sendStatusMessage(context{{#if typescript}}: TurnContext{{/if}}) {
    // Get actual system status
    const status = await this.getSystemStatus();
    
    const statusCard = CardFactory.adaptiveCard({
      type: 'AdaptiveCard',
      $schema: 'http://adaptivecards.io/schemas/adaptive-card.json',
      version: '1.3',
      body: [
        {
          type: 'Container',
          style: status.healthy ? 'good' : 'attention',
          items: [
            {
              type: 'ColumnSet',
              columns: [
                {
                  type: 'Column',
                  width: 'auto',
                  items: [
                    {
                      type: 'TextBlock',
                      text: status.healthy ? '‚úÖ' : '‚ùå',
                      size: 'Large'
                    }
                  ]
                },
                {
                  type: 'Column',
                  width: 'stretch',
                  items: [
                    {
                      type: 'TextBlock',
                      text: 'System Status',
                      size: 'Large',
                      weight: 'Bolder'
                    },
                    {
                      type: 'TextBlock',
                      text: status.healthy ? 'All systems operational' : 'Issues detected',
                      color: status.healthy ? 'Good' : 'Attention'
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          type: 'FactSet',
          separator: true,
          facts: [
            {
              title: 'API',
              value: status.api
            },
            {
              title: 'Database',
              value: status.database
            },
            {
              title: 'Cache',
              value: status.cache
            },
            {
              title: 'Queue',
              value: status.queue
            }
          ]
        }
      ],
      actions: [
        {
          type: 'Action.Execute',
          title: 'Refresh',
          verb: 'refresh_status'
        }
      ]
    });

    await context.sendActivity(MessageFactory.attachment(statusCard));
  }

  /**
   * Send default message
   */
  private async sendDefaultMessage(context{{#if typescript}}: TurnContext{{/if}}) {
    const userName = context.activity.from.name || 'there';
    
    await context.sendActivity(
      MessageFactory.text(`Hi ${userName}! I'm the {{projectName}} bot. Type "help" to see what I can do.`)
    );
  }

  /**
   * Send welcome message
   */
  private async sendWelcomeMessage(context{{#if typescript}}: TurnContext{{/if}}, member{{#if typescript}}: any{{/if}}) {
    const welcomeCard = CardFactory.adaptiveCard({
      type: 'AdaptiveCard',
      $schema: 'http://adaptivecards.io/schemas/adaptive-card.json',
      version: '1.3',
      body: [
        {
          type: 'Container',
          items: [
            {
              type: 'TextBlock',
              text: `Welcome ${member.name}! üëã`,
              size: 'Large',
              weight: 'Bolder'
            },
            {
              type: 'TextBlock',
              text: 'I\'m the {{projectName}} bot, here to help you get started.',
              wrap: true
            }
          ]
        },
        {
          type: 'Container',
          separator: true,
          items: [
            {
              type: 'TextBlock',
              text: '**Getting Started:**',
              weight: 'Bolder'
            },
            {
              type: 'TextBlock',
              text: '‚Ä¢ Type "help" to see available commands\n‚Ä¢ Check out our documentation\n‚Ä¢ Join the {{projectName}} team channel',
              wrap: true
            }
          ]
        }
      ],
      actions: [
        {
          type: 'Action.Execute',
          title: 'Get Started',
          verb: 'get_started'
        },
        {
          type: 'Action.OpenUrl',
          title: 'View Docs',
          url: 'https://docs.{{projectName}}.com'
        }
      ]
    });

    await context.sendActivity(MessageFactory.attachment(welcomeCard));
  }

  /**
   * Handle deploy command
   */
  private async handleDeployCommand(context{{#if typescript}}: TurnContext{{/if}}, text{{#if typescript}}: string{{/if}}) {
    const environment = text.split('deploy')[1]?.trim() || 'staging';
    const user = context.activity.from.name;
    
    // Start deployment process
    await this.startDeployment(environment, user);
    
    const deployCard = CardFactory.adaptiveCard({
      type: 'AdaptiveCard',
      $schema: 'http://adaptivecards.io/schemas/adaptive-card.json',
      version: '1.3',
      body: [
        {
          type: 'Container',
          style: 'accent',
          items: [
            {
              type: 'ColumnSet',
              columns: [
                {
                  type: 'Column',
                  width: 'auto',
                  items: [
                    {
                      type: 'TextBlock',
                      text: 'üöÄ',
                      size: 'Large'
                    }
                  ]
                },
                {
                  type: 'Column',
                  width: 'stretch',
                  items: [
                    {
                      type: 'TextBlock',
                      text: 'Deployment Started',
                      size: 'Large',
                      weight: 'Bolder'
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          type: 'FactSet',
          facts: [
            {
              title: 'Environment',
              value: environment
            },
            {
              title: 'Initiated by',
              value: user
            },
            {
              title: 'Started at',
              value: new Date().toLocaleString()
            }
          ]
        }
      ],
      actions: [
        {
          type: 'Action.Execute',
          title: 'View Progress',
          verb: 'view_deployment',
          data: { environment }
        }
      ]
    });

    await context.sendActivity(MessageFactory.attachment(deployCard));
  }

  /**
   * Handle report command
   */
  private async handleReportCommand(context{{#if typescript}}: TurnContext{{/if}}, text{{#if typescript}}: string{{/if}}) {
    const reportType = text.split('report')[1]?.trim() || 'daily';
    
    await context.sendActivity(
      MessageFactory.text(`Generating ${reportType} report... You'll receive it shortly.`)
    );
    
    // Generate report asynchronously
    this.generateReport(reportType, context.activity.from.id);
  }

  /**
   * Handle approval action
   */
  private async handleApproval(context{{#if typescript}}: TurnContext{{/if}}, invokeValue{{#if typescript}}: any{{/if}}) {
    const user = context.activity.from.name;
    console.log(`Approval by ${user}:`, invokeValue.action.data);
    
    // Update the card to show approval
    const approvedCard = CardFactory.adaptiveCard({
      type: 'AdaptiveCard',
      $schema: 'http://adaptivecards.io/schemas/adaptive-card.json',
      version: '1.3',
      body: [
        {
          type: 'Container',
          style: 'good',
          items: [
            {
              type: 'TextBlock',
              text: `‚úÖ Approved by ${user}`,
              size: 'Medium',
              weight: 'Bolder'
            }
          ]
        }
      ]
    });

    await context.updateActivity({
      ...context.activity,
      attachments: [approvedCard]
    });

    return { statusCode: 200 };
  }

  /**
   * Handle rejection action
   */
  private async handleRejection(context{{#if typescript}}: TurnContext{{/if}}, invokeValue{{#if typescript}}: any{{/if}}) {
    const user = context.activity.from.name;
    console.log(`Rejection by ${user}:`, invokeValue.action.data);
    
    // Update the card to show rejection
    const rejectedCard = CardFactory.adaptiveCard({
      type: 'AdaptiveCard',
      $schema: 'http://adaptivecards.io/schemas/adaptive-card.json',
      version: '1.3',
      body: [
        {
          type: 'Container',
          style: 'attention',
          items: [
            {
              type: 'TextBlock',
              text: `‚ùå Rejected by ${user}`,
              size: 'Medium',
              weight: 'Bolder'
            }
          ]
        }
      ]
    });

    await context.updateActivity({
      ...context.activity,
      attachments: [rejectedCard]
    });

    return { statusCode: 200 };
  }

  /**
   * Handle view details action
   */
  private async handleViewDetails(context{{#if typescript}}: TurnContext{{/if}}, invokeValue{{#if typescript}}: any{{/if}}) {
    // Send a new message with details
    const detailsCard = CardFactory.adaptiveCard({
      type: 'AdaptiveCard',
      $schema: 'http://adaptivecards.io/schemas/adaptive-card.json',
      version: '1.3',
      body: [
        {
          type: 'TextBlock',
          text: 'Details',
          size: 'Large',
          weight: 'Bolder'
        },
        {
          type: 'TextBlock',
          text: JSON.stringify(invokeValue.action.data, null, 2),
          wrap: true,
          fontType: 'Monospace'
        }
      ]
    });

    await context.sendActivity(MessageFactory.attachment(detailsCard));
    return { statusCode: 200 };
  }

  /**
   * Send app installed message
   */
  private async sendAppInstalledMessage(context{{#if typescript}}: TurnContext{{/if}}) {
    await context.sendActivity(
      MessageFactory.text('Thanks for installing the {{projectName}} app! Type "help" to get started.')
    );
  }

  /**
   * Utility functions
   */
  private async getSystemStatus() {
    // Implement your status check logic
    return {
      healthy: true,
      api: 'Operational',
      database: 'Healthy',
      cache: 'Active',
      queue: '0 pending'
    };
  }

  private async startDeployment(environment{{#if typescript}}: string{{/if}}, user{{#if typescript}}: string{{/if}}) {
    // Implement deployment logic
    console.log(`Starting deployment to ${environment} by ${user}`);
  }

  private async generateReport(reportType{{#if typescript}}: string{{/if}}, userId{{#if typescript}}: string{{/if}}) {
    // Implement report generation
    console.log(`Generating ${reportType} report for ${userId}`);
  }
}

/**
 * Create notification card for external systems
 */
export function createNotificationCard(
  title{{#if typescript}}: string{{/if}},
  message{{#if typescript}}: string{{/if}},
  type{{#if typescript}}: 'info' | 'warning' | 'error' | 'success'{{/if}} = 'info'
){{#if typescript}}: Attachment{{/if}} {
  const typeConfig = {
    info: { color: 'Default', icon: '‚ÑπÔ∏è' },
    warning: { color: 'Warning', icon: '‚ö†Ô∏è' },
    error: { color: 'Attention', icon: '‚ùå' },
    success: { color: 'Good', icon: '‚úÖ' }
  };

  const config = typeConfig[type];

  return CardFactory.adaptiveCard({
    type: 'AdaptiveCard',
    $schema: 'http://adaptivecards.io/schemas/adaptive-card.json',
    version: '1.3',
    body: [
      {
        type: 'Container',
        style: config.color.toLowerCase(),
        items: [
          {
            type: 'ColumnSet',
            columns: [
              {
                type: 'Column',
                width: 'auto',
                items: [
                  {
                    type: 'TextBlock',
                    text: config.icon,
                    size: 'Large'
                  }
                ]
              },
              {
                type: 'Column',
                width: 'stretch',
                items: [
                  {
                    type: 'TextBlock',
                    text: title,
                    size: 'Large',
                    weight: 'Bolder'
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        type: 'TextBlock',
        text: message,
        wrap: true,
        separator: true
      },
      {
        type: 'TextBlock',
        text: `${new Date().toLocaleString()} | {{projectName}}`,
        size: 'Small',
        color: 'Light',
        separator: true
      }
    ]
  });
}

/**
 * Create approval request card
 */
export function createApprovalCard(
  title{{#if typescript}}: string{{/if}},
  description{{#if typescript}}: string{{/if}},
  details{{#if typescript}}: Record<string, string>{{/if}}
){{#if typescript}}: Attachment{{/if}} {
  const facts = Object.entries(details).map(([key, value]) => ({
    title: key,
    value: value
  }));

  return CardFactory.adaptiveCard({
    type: 'AdaptiveCard',
    $schema: 'http://adaptivecards.io/schemas/adaptive-card.json',
    version: '1.3',
    body: [
      {
        type: 'TextBlock',
        text: title,
        size: 'Large',
        weight: 'Bolder'
      },
      {
        type: 'TextBlock',
        text: description,
        wrap: true,
        separator: true
      },
      {
        type: 'FactSet',
        facts,
        separator: true
      }
    ],
    actions: [
      {
        type: 'Action.Execute',
        title: '‚úÖ Approve',
        verb: 'approve',
        style: 'positive',
        data: details
      },
      {
        type: 'Action.Execute',
        title: '‚ùå Reject',
        verb: 'reject',
        style: 'destructive',
        data: details
      },
      {
        type: 'Action.Execute',
        title: 'View Details',
        verb: 'viewDetails',
        data: details
      }
    ]
  });
}

// Export the bot class
{{#if typescript}}export default {{projectName}}TeamsBot;{{else}}module.exports = {{projectName}}TeamsBot;{{/if}}