{{#if typescript}}
import type { 
  AltinnUser, 
  AltinnForm, 
  Organization, 
  Person,
  AltinnCorrespondence,
  AltinnAuthorization 
} from './altinn.types';
{{/if}}

/**
 * Altinn Client for {{projectName}}
 * Handles communication with Norwegian government digital services
 */
export class AltinnClient {
  private baseUrl{{#if typescript}}: string{{/if}};
  private apiKey{{#if typescript}}: string{{/if}};
  private organizationNumber{{#if typescript}}: string{{/if}};
  private environment{{#if typescript}}: 'test' | 'production'{{/if}};
  private tokenCache{{#if typescript}}: Map<string, { token: string; expires: number }>{{/if}} = new Map();

  constructor(config{{#if typescript}}: { 
    apiKey: string; 
    organizationNumber: string; 
    environment?: 'test' | 'production' 
  }{{/if}}) {
    this.apiKey = config.apiKey;
    this.organizationNumber = config.organizationNumber;
    this.environment = config.environment || 'test';
    this.baseUrl = this.environment === 'production' 
      ? 'https://platform.altinn.no'
      : 'https://platform.tt02.altinn.no';
    
    this.validateConfig();
  }

  /**
   * Validate configuration
   */
  private validateConfig(){{#if typescript}}: void{{/if}} {
    if (!this.apiKey) {
      throw new Error('Altinn API key is required');
    }
    
    if (!this.organizationNumber || !/^\d{9}$/.test(this.organizationNumber)) {
      throw new Error('Valid organization number (9 digits) is required');
    }
  }

  /**
   * Make authenticated API request
   */
  private async makeRequest(
    endpoint{{#if typescript}}: string{{/if}}, 
    options{{#if typescript}}?: RequestInit{{/if}} = {}
  ){{#if typescript}}: Promise<any>{{/if}} {
    const url = `${this.baseUrl}${endpoint}`;
    
    const response = await fetch(url, {
      ...options,
      headers: {
        'ApiKey': this.apiKey,
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        ...options.headers,
      },
    });

    if (!response.ok) {
      const errorData = await response.text();
      throw new Error(`Altinn API error: ${response.status} ${response.statusText} - ${errorData}`);
    }

    const contentType = response.headers.get('content-type');
    if (contentType && contentType.includes('application/json')) {
      return response.json();
    }
    
    return response.text();
  }

  /**
   * Authentication Methods
   */
  async initiateAuthentication(
    method{{#if typescript}}: 'idporten' | 'bankid'{{/if}},
    redirectUri{{#if typescript}}: string{{/if}},
    requiredRoles{{#if typescript}}?: string[]{{/if}}
  ){{#if typescript}}: Promise<{ authUrl: string; sessionId: string }>{{/if}} {
    const state = this.generateStateParameter();
    
    if (method === 'idporten') {
      const authUrl = this.getIdPortenAuthUrl(state, redirectUri);
      return { authUrl, sessionId: state };
    }
    
    // For BankID, initiate through Altinn's BankID bridge
    const response = await this.makeRequest('/authentication/api/v1/bankid/init', {
      method: 'POST',
      body: JSON.stringify({
        organizationNumber: this.organizationNumber,
        redirectUri,
        requiredRoles,
        state,
      }),
    });
    
    return {
      authUrl: response.authUrl,
      sessionId: response.sessionId,
    };
  }

  async completeAuthentication(
    code{{#if typescript}}: string{{/if}}, 
    state{{#if typescript}}: string{{/if}}
  ){{#if typescript}}: Promise<AltinnUser>{{/if}} {
    const response = await this.makeRequest('/authentication/api/v1/exchange', {
      method: 'POST',
      body: JSON.stringify({
        code,
        state,
        provider: 'idporten',
      }),
    });

    // Cache the access token
    if (response.accessToken) {
      this.tokenCache.set('main', {
        token: response.accessToken,
        expires: Date.now() + (response.expiresIn || 3600) * 1000,
      });
    }

    // Get user profile
    const userProfile = await this.getUserProfile(response.accessToken);
    
    return {
      ...userProfile,
      accessToken: response.accessToken,
      refreshToken: response.refreshToken,
    };
  }

  async getUserProfile(accessToken{{#if typescript}}?: string{{/if}}){{#if typescript}}: Promise<AltinnUser>{{/if}} {
    const token = accessToken || this.getAccessToken();
    
    return this.makeRequest('/authentication/api/v1/profile', {
      headers: {
        'Authorization': `Bearer ${token}`,
      },
    });
  }

  /**
   * Forms and Storage Methods
   */
  async getAvailableForms(userId{{#if typescript}}?: string{{/if}}){{#if typescript}}: Promise<AltinnForm[]>{{/if}} {
    const endpoint = `/storage/api/v1/applications/${this.organizationNumber}/forms`;
    const headers{{#if typescript}}: any{{/if}} = {};
    
    if (userId) {
      headers['UserId'] = userId;
    }
    
    return this.makeRequest(endpoint, { headers });
  }

  async getForm(formId{{#if typescript}}: string{{/if}}){{#if typescript}}: Promise<AltinnForm>{{/if}} {
    return this.makeRequest(
      `/storage/api/v1/applications/${this.organizationNumber}/forms/${formId}`
    );
  }

  async submitForm(
    formId{{#if typescript}}: string{{/if}}, 
    data{{#if typescript}}: any{{/if}}, 
    userId{{#if typescript}}: string{{/if}}
  ){{#if typescript}}: Promise<{ instanceId: string; receiptId: string }>{{/if}} {
    {{#if gdprCompliant}}
    // GDPR compliance: Log data processing
    await this.logDataProcessing('form_submission', userId, {
      formId,
      timestamp: new Date().toISOString(),
      dataCategories: this.extractDataCategories(data),
    });
    {{/if}}

    const response = await this.makeRequest(
      `/storage/api/v1/applications/${this.organizationNumber}/instances`,
      {
        method: 'POST',
        headers: {
          'UserId': userId,
        },
        body: JSON.stringify({
          appId: formId,
          instanceOwner: {
            personNumber: userId,
            organisationNumber: this.organizationNumber,
          },
          dataValues: data,
        }),
      }
    );

    return {
      instanceId: response.id,
      receiptId: response.data?.receiptId || response.id,
    };
  }

  async uploadAttachment(
    instanceId{{#if typescript}}: string{{/if}}, 
    dataType{{#if typescript}}: string{{/if}}, 
    file{{#if typescript}}: File | Buffer{{/if}}
  ){{#if typescript}}: Promise<{ attachmentId: string; url: string }>{{/if}} {
    const formData = new FormData();
    
    if (file instanceof File) {
      formData.append('file', file);
    } else {
      formData.append('file', new Blob([file]), 'attachment');
    }

    const response = await fetch(
      `${this.baseUrl}/storage/api/v1/instances/${instanceId}/data?dataType=${dataType}`,
      {
        method: 'POST',
        headers: {
          'ApiKey': this.apiKey,
        },
        body: formData,
      }
    );

    if (!response.ok) {
      throw new Error(`Upload failed: ${response.status}`);
    }

    const result = await response.json();
    return {
      attachmentId: result.id,
      url: result.selfLinks.download,
    };
  }

  /**
   * Registry Methods
   */
  async searchOrganizations(query{{#if typescript}}: string{{/if}}){{#if typescript}}: Promise<Organization[]>{{/if}} {
    const response = await this.makeRequest(
      `/register/api/v1/organizations?query=${encodeURIComponent(query)}`
    );
    
    return response.organizations || [];
  }

  async getOrganization(orgNumber{{#if typescript}}: string{{/if}}){{#if typescript}}: Promise<Organization>{{/if}} {
    return this.makeRequest(`/register/api/v1/organizations/${orgNumber}`);
  }

  async searchPersons(
    query{{#if typescript}}: string{{/if}}, 
    includeAddress{{#if typescript}}: boolean{{/if}} = false
  ){{#if typescript}}: Promise<Person[]>{{/if}} {
    {{#if gdprCompliant}}
    // GDPR compliance: Person search requires special authorization
    const authorized = await this.checkPersonSearchAuthorization();
    if (!authorized) {
      throw new Error('Not authorized to search persons');
    }
    {{/if}}

    const response = await this.makeRequest(
      `/register/api/v1/persons?query=${encodeURIComponent(query)}&includeAddress=${includeAddress}`,
      {
        headers: {
          'X-GDPR-Purpose': 'legitimate-interest',
        },
      }
    );
    
    return response.persons || [];
  }

  /**
   * Correspondence Methods
   */
  async sendCorrespondence(
    correspondence{{#if typescript}}: AltinnCorrespondence{{/if}}
  ){{#if typescript}}: Promise<{ correspondenceId: string }>{{/if}} {
    const response = await this.makeRequest('/correspondence/api/v1/correspondence', {
      method: 'POST',
      body: JSON.stringify({
        serviceCode: correspondence.serviceCode,
        serviceEdition: correspondence.serviceEdition,
        reportee: correspondence.recipientNumber,
        content: {
          title: correspondence.title,
          body: correspondence.body,
          summary: correspondence.summary,
          attachments: correspondence.attachments,
        },
        visibleDateTime: correspondence.visibleDateTime || new Date().toISOString(),
        allowSystemDeleteDateTime: correspondence.allowSystemDeleteDateTime,
        dueDateTime: correspondence.dueDateTime,
        notification: correspondence.sendNotification,
        {{#if gdprCompliant}}
        gdprMetadata: {
          purpose: correspondence.gdprPurpose || 'service-delivery',
          legalBasis: correspondence.legalBasis || 'contract',
          dataCategories: correspondence.dataCategories || ['contact-info'],
        },
        {{/if}}
      }),
    });

    return {
      correspondenceId: response.correspondenceId,
    };
  }

  async getCorrespondence(
    correspondenceId{{#if typescript}}: string{{/if}}
  ){{#if typescript}}: Promise<AltinnCorrespondence>{{/if}} {
    return this.makeRequest(`/correspondence/api/v1/correspondence/${correspondenceId}`);
  }

  /**
   * Authorization Methods
   */
  async checkAuthorization(
    userId{{#if typescript}}: string{{/if}}, 
    resource{{#if typescript}}: string{{/if}}, 
    action{{#if typescript}}: string{{/if}}
  ){{#if typescript}}: Promise<boolean>{{/if}} {
    try {
      const response = await this.makeRequest('/authorization/api/v1/decision', {
        method: 'POST',
        body: JSON.stringify({
          subject: {
            type: 'person',
            id: userId,
          },
          resource: {
            type: 'app',
            id: resource,
            org: this.organizationNumber,
          },
          action: action,
        }),
      });

      return response.decision === 'permit';
    } catch (error) {
      console.error('Authorization check error:', error);
      return false;
    }
  }

  async getUserRoles(userId{{#if typescript}}: string{{/if}}){{#if typescript}}: Promise<string[]>{{/if}} {
    const response = await this.makeRequest(
      `/authorization/api/v1/roles?subject=${userId}&org=${this.organizationNumber}`
    );
    
    return response.map((role{{#if typescript}}: any{{/if}}) => role.code);
  }

  async delegateAccess(
    fromUserId{{#if typescript}}: string{{/if}}, 
    toUserId{{#if typescript}}: string{{/if}}, 
    resource{{#if typescript}}: string{{/if}}, 
    rights{{#if typescript}}: string[]{{/if}}
  ){{#if typescript}}: Promise<{ delegationId: string }>{{/if}} {
    const response = await this.makeRequest('/authorization/api/v1/delegations', {
      method: 'POST',
      body: JSON.stringify({
        from: {
          type: 'person',
          id: fromUserId,
        },
        to: {
          type: 'person',
          id: toUserId,
        },
        resource: {
          type: 'app',
          id: resource,
          org: this.organizationNumber,
        },
        rights: rights,
      }),
    });

    return {
      delegationId: response.delegationId,
    };
  }

  {{#if gdprCompliant}}
  /**
   * GDPR Compliance Methods
   */
  private async logDataProcessing(
    activity{{#if typescript}}: string{{/if}}, 
    userId{{#if typescript}}: string{{/if}}, 
    metadata{{#if typescript}}: any{{/if}}
  ){{#if typescript}}: Promise<void>{{/if}} {
    try {
      await this.makeRequest('/gdpr/api/v1/audit', {
        method: 'POST',
        body: JSON.stringify({
          activity,
          userId,
          organizationNumber: this.organizationNumber,
          timestamp: new Date().toISOString(),
          metadata,
        }),
      });
    } catch (error) {
      console.warn('GDPR audit logging failed:', error);
    }
  }

  private extractDataCategories(data{{#if typescript}}: any{{/if}}){{#if typescript}}: string[]{{/if}} {
    const categories{{#if typescript}}: string[]{{/if}} = [];
    
    if (data.personalNumber || data.ssn) categories.push('national-id');
    if (data.email) categories.push('contact-info');
    if (data.phone || data.mobile) categories.push('contact-info');
    if (data.address) categories.push('location-data');
    if (data.bankAccount) categories.push('financial-data');
    if (data.healthData) categories.push('health-data');
    
    return [...new Set(categories)];
  }

  private async checkPersonSearchAuthorization(){{#if typescript}}: Promise<boolean>{{/if}} {
    // Check if the organization has authorization to search persons
    try {
      return this.checkAuthorization(
        this.organizationNumber,
        'person-registry',
        'search'
      );
    } catch {
      return false;
    }
  }

  async exportUserData(userId{{#if typescript}}: string{{/if}}){{#if typescript}}: Promise<any>{{/if}} {
    return this.makeRequest(`/gdpr/api/v1/users/${userId}/export`);
  }

  async deleteUserData(userId{{#if typescript}}: string{{/if}}){{#if typescript}}: Promise<boolean>{{/if}} {
    try {
      await this.makeRequest(`/gdpr/api/v1/users/${userId}`, {
        method: 'DELETE',
      });
      return true;
    } catch {
      return false;
    }
  }
  {{/if}}

  /**
   * Utility Methods
   */
  private generateStateParameter(){{#if typescript}}: string{{/if}} {
    const array = new Uint8Array(32);
    crypto.getRandomValues(array);
    return Array.from(array, byte => byte.toString(16).padStart(2, '0')).join('');
  }

  private getIdPortenAuthUrl(state{{#if typescript}}: string{{/if}}, redirectUri{{#if typescript}}: string{{/if}}){{#if typescript}}: string{{/if}} {
    const baseAuthUrl = this.environment === 'production'
      ? 'https://idporten.difi.no/authorize'
      : 'https://idporten-ver2.difi.no/authorize';
    
    const params = new URLSearchParams({
      response_type: 'code',
      client_id: this.organizationNumber,
      redirect_uri: redirectUri,
      scope: 'openid profile altinn:organizations altinn:instances.read',
      state: state,
      nonce: this.generateStateParameter().substring(0, 32),
      ui_locales: 'nb',
      acr_values: 'Level4',
    });

    return `${baseAuthUrl}?${params.toString()}`;
  }

  private getAccessToken(){{#if typescript}}: string{{/if}} {
    const cached = this.tokenCache.get('main');
    if (cached && cached.expires > Date.now()) {
      return cached.token;
    }
    
    throw new Error('No valid access token available');
  }

  isAuthenticated(){{#if typescript}}: boolean{{/if}} {
    try {
      this.getAccessToken();
      return true;
    } catch {
      return false;
    }
  }

  clearTokenCache(){{#if typescript}}: void{{/if}} {
    this.tokenCache.clear();
  }
}

// Create and export client instance
const altinnClient = new AltinnClient({
  apiKey: process.env.ALTINN_API_KEY || '',
  organizationNumber: process.env.ALTINN_ORGANIZATION_NUMBER || '',
  environment: (process.env.ALTINN_ENVIRONMENT || 'test'){{#if typescript}} as 'test' | 'production'{{/if}},
});

export default altinnClient;