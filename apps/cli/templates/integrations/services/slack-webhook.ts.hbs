{{#if typescript}}
import type { NextApiRequest, NextApiResponse } from 'next';
import type { 
  SlackEvent,
  SlashCommand,
  InteractionPayload,
  ViewSubmissionPayload
} from '@slack/bolt';
{{/if}}
import crypto from 'crypto';

/**
 * Slack Webhook Handler for {{projectName}}
 * Processes incoming Slack webhooks and events
 */

const SLACK_SIGNING_SECRET = process.env.SLACK_SIGNING_SECRET || '';

/**
 * Verify Slack request signature
 */
function verifySlackSignature(
  req{{#if typescript}}: NextApiRequest{{/if}}
){{#if typescript}}: boolean{{/if}} {
  const signature = req.headers['x-slack-signature']{{#if typescript}} as string{{/if}};
  const timestamp = req.headers['x-slack-request-timestamp']{{#if typescript}} as string{{/if}};
  const body = JSON.stringify(req.body);

  if (!signature || !timestamp) {
    return false;
  }

  // Check if timestamp is within 5 minutes
  const time = Math.floor(new Date().getTime() / 1000);
  if (Math.abs(time - parseInt(timestamp)) > 300) {
    return false;
  }

  const sigBasestring = `v0:${timestamp}:${body}`;
  const mySignature = `v0=${crypto
    .createHmac('sha256', SLACK_SIGNING_SECRET)
    .update(sigBasestring)
    .digest('hex')}`;

  return crypto.timingSafeEqual(
    Buffer.from(mySignature),
    Buffer.from(signature)
  );
}

/**
 * Main webhook handler
 */
export async function handleSlackWebhook(
  req{{#if typescript}}: NextApiRequest{{/if}},
  res{{#if typescript}}: NextApiResponse{{/if}}
) {
  // Only accept POST requests
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  // Verify Slack signature
  if (!verifySlackSignature(req)) {
    return res.status(401).json({ error: 'Invalid signature' });
  }

  const { type, challenge } = req.body;

  try {
    // Handle URL verification
    if (type === 'url_verification') {
      return res.status(200).json({ challenge });
    }

    // Handle events
    if (type === 'event_callback') {
      await handleEvent(req.body.event);
      return res.status(200).json({ ok: true });
    }

    // Handle slash commands
    if (req.body.command) {
      const response = await handleSlashCommand(req.body);
      return res.status(200).json(response);
    }

    // Handle interactive components
    if (req.body.payload) {
      const payload = JSON.parse(req.body.payload);
      const response = await handleInteraction(payload);
      return res.status(200).json(response);
    }

    // Unknown webhook type
    console.warn('Unknown webhook type:', type);
    return res.status(200).json({ ok: true });

  } catch (error) {
    console.error('Webhook handler error:', error);
    return res.status(500).json({ error: 'Internal server error' });
  }
}

/**
 * Handle Slack events
 */
async function handleEvent(event{{#if typescript}}: SlackEvent{{/if}}) {
  console.log('Handling event:', event.type);

  switch (event.type) {
    case 'app_mention':
      await handleAppMention(event);
      break;

    case 'message':
      await handleMessage(event);
      break;

    case 'team_join':
      await handleTeamJoin(event);
      break;

    case 'channel_created':
      await handleChannelCreated(event);
      break;

    case 'file_shared':
      await handleFileShared(event);
      break;

    default:
      console.log('Unhandled event type:', event.type);
  }
}

/**
 * Handle app mentions
 */
async function handleAppMention(event{{#if typescript}}: any{{/if}}) {
  const { user, text, channel, ts } = event;
  
  // Parse the mention text
  const mentionText = text.replace(/<@[A-Z0-9]+>/g, '').trim();
  
  // Respond based on mention content
  if (mentionText.includes('help')) {
    await sendHelpMessage(channel, ts);
  } else if (mentionText.includes('status')) {
    await sendStatusMessage(channel, ts);
  } else {
    await sendDefaultResponse(channel, ts, user);
  }
}

/**
 * Handle messages
 */
async function handleMessage(event{{#if typescript}}: any{{/if}}) {
  // Skip bot messages to avoid loops
  if (event.bot_id) return;

  const { text, channel, user } = event;

  // Check for specific keywords
  if (text && text.toLowerCase().includes('{{projectName}}')) {
    await sendProjectInfo(channel, user);
  }
}

/**
 * Handle team join events
 */
async function handleTeamJoin(event{{#if typescript}}: any{{/if}}) {
  const { user } = event;
  
  // Send welcome message to new team member
  await sendWelcomeMessage(user.id);
}

/**
 * Handle channel created events
 */
async function handleChannelCreated(event{{#if typescript}}: any{{/if}}) {
  const { channel } = event;
  
  console.log('New channel created:', channel.name);
  // You can add logic to auto-join channels or send notifications
}

/**
 * Handle file shared events
 */
async function handleFileShared(event{{#if typescript}}: any{{/if}}) {
  const { file_id, user_id, channel_id } = event;
  
  console.log(`File ${file_id} shared by ${user_id} in ${channel_id}`);
  // You can add file processing logic here
}

/**
 * Handle slash commands
 */
async function handleSlashCommand(
  command{{#if typescript}}: SlashCommand{{/if}}
){{#if typescript}}: Promise<any>{{/if}} {
  const { command: cmd, text, user_id, channel_id } = command;

  console.log(`Slash command: ${cmd} from ${user_id}`);

  switch (cmd) {
    case '/{{projectName}}-help':
      return createHelpResponse();

    case '/{{projectName}}-status':
      return await createStatusResponse();

    case '/{{projectName}}-deploy':
      return await handleDeployCommand(text, user_id, channel_id);

    case '/{{projectName}}-report':
      return await handleReportCommand(text, user_id, channel_id);

    default:
      return {
        response_type: 'ephemeral',
        text: `Unknown command: ${cmd}`,
      };
  }
}

/**
 * Handle interactive components (buttons, select menus, etc.)
 */
async function handleInteraction(
  payload{{#if typescript}}: InteractionPayload{{/if}}
){{#if typescript}}: Promise<any>{{/if}} {
  const { type, user, actions, callback_id } = payload;

  console.log(`Interaction: ${type} from ${user.id}`);

  switch (type) {
    case 'block_actions':
      return await handleBlockActions(payload);

    case 'view_submission':
      return await handleViewSubmission(payload);

    case 'view_closed':
      return await handleViewClosed(payload);

    default:
      console.log('Unhandled interaction type:', type);
      return { ok: true };
  }
}

/**
 * Handle block actions (button clicks, etc.)
 */
async function handleBlockActions(payload{{#if typescript}}: any{{/if}}) {
  const { actions, user, channel, message } = payload;
  
  for (const action of actions) {
    switch (action.action_id) {
      case 'approve_action':
        await handleApproval(user, channel, message);
        break;

      case 'reject_action':
        await handleRejection(user, channel, message);
        break;

      case 'view_details':
        await showDetailsModal(payload.trigger_id, action.value);
        break;

      default:
        console.log('Unknown action:', action.action_id);
    }
  }

  return { ok: true };
}

/**
 * Handle view submissions (modal submits)
 */
async function handleViewSubmission(
  payload{{#if typescript}}: ViewSubmissionPayload{{/if}}
) {
  const { view, user } = payload;
  const { callback_id, state } = view;

  console.log(`View submission: ${callback_id} from ${user.id}`);

  // Extract form values from state
  const values = state.values;

  switch (callback_id) {
    case 'feedback_modal':
      await processFeedback(values, user);
      break;

    case 'settings_modal':
      await updateSettings(values, user);
      break;

    default:
      console.log('Unknown view callback:', callback_id);
  }

  // Close the modal
  return { response_action: 'clear' };
}

/**
 * Handle view closed events
 */
async function handleViewClosed(payload{{#if typescript}}: any{{/if}}) {
  console.log('View closed:', payload.view.callback_id);
  // Clean up any temporary data if needed
}

/**
 * Helper functions for sending messages
 */
async function sendHelpMessage(channel{{#if typescript}}: string{{/if}}, thread_ts{{#if typescript}}: string{{/if}}) {
  const blocks = [
    {
      type: 'section',
      text: {
        type: 'mrkdwn',
        text: '*{{projectName}} Help* :question:\n\nHere are the available commands:',
      },
    },
    {
      type: 'section',
      fields: [
        {
          type: 'mrkdwn',
          text: '*`/{{projectName}}-help`*\nShow this help message',
        },
        {
          type: 'mrkdwn',
          text: '*`/{{projectName}}-status`*\nCheck system status',
        },
        {
          type: 'mrkdwn',
          text: '*`/{{projectName}}-deploy`*\nTrigger a deployment',
        },
        {
          type: 'mrkdwn',
          text: '*`/{{projectName}}-report`*\nGenerate a report',
        },
      ],
    },
  ];

  // Send help message via Slack API
  await sendSlackMessage(channel, blocks, thread_ts);
}

async function sendStatusMessage(channel{{#if typescript}}: string{{/if}}, thread_ts{{#if typescript}}: string{{/if}}) {
  // Get actual system status
  const status = await getSystemStatus();
  
  const blocks = [
    {
      type: 'section',
      text: {
        type: 'mrkdwn',
        text: `*System Status* ${status.healthy ? ':green_circle:' : ':red_circle:'}`,
      },
    },
    {
      type: 'section',
      fields: [
        {
          type: 'mrkdwn',
          text: `*API:* ${status.api}`,
        },
        {
          type: 'mrkdwn',
          text: `*Database:* ${status.database}`,
        },
        {
          type: 'mrkdwn',
          text: `*Cache:* ${status.cache}`,
        },
        {
          type: 'mrkdwn',
          text: `*Queue:* ${status.queue}`,
        },
      ],
    },
  ];

  await sendSlackMessage(channel, blocks, thread_ts);
}

async function sendDefaultResponse(
  channel{{#if typescript}}: string{{/if}}, 
  thread_ts{{#if typescript}}: string{{/if}}, 
  user{{#if typescript}}: string{{/if}}
) {
  const text = `Hi <@${user}>! I'm here to help. Type "help" to see what I can do.`;
  await sendSlackMessage(channel, text, thread_ts);
}

async function sendWelcomeMessage(userId{{#if typescript}}: string{{/if}}) {
  const blocks = [
    {
      type: 'section',
      text: {
        type: 'mrkdwn',
        text: `Welcome to the team! :wave:\n\nI'm the {{projectName}} bot, here to help you get started.`,
      },
    },
    {
      type: 'section',
      text: {
        type: 'mrkdwn',
        text: '*Getting Started:*\n• Check out our <https://docs.{{projectName}}.com|documentation>\n• Join the #{{projectName}}-help channel\n• Try `/{{projectName}}-help` to see available commands',
      },
    },
  ];

  // Send direct message to user
  await sendDirectMessage(userId, blocks);
}

/**
 * Command handlers
 */
function createHelpResponse() {
  return {
    response_type: 'ephemeral',
    blocks: [
      {
        type: 'section',
        text: {
          type: 'mrkdwn',
          text: '*{{projectName}} Commands:*',
        },
      },
      {
        type: 'section',
        text: {
          type: 'mrkdwn',
          text: '• `/{{projectName}}-help` - Show this help message\n• `/{{projectName}}-status` - Check system status\n• `/{{projectName}}-deploy [env]` - Deploy to environment\n• `/{{projectName}}-report [type]` - Generate report',
        },
      },
    ],
  };
}

async function createStatusResponse() {
  const status = await getSystemStatus();
  
  return {
    response_type: 'in_channel',
    blocks: [
      {
        type: 'section',
        text: {
          type: 'mrkdwn',
          text: `*System Status:* ${status.healthy ? ':green_circle: All systems operational' : ':red_circle: Issues detected'}`,
        },
      },
    ],
  };
}

async function handleDeployCommand(
  text{{#if typescript}}: string{{/if}}, 
  userId{{#if typescript}}: string{{/if}}, 
  channelId{{#if typescript}}: string{{/if}}
) {
  const environment = text.trim() || 'staging';
  
  // Start deployment process
  await startDeployment(environment, userId);
  
  return {
    response_type: 'in_channel',
    text: `Deployment to ${environment} initiated by <@${userId}>`,
  };
}

async function handleReportCommand(
  text{{#if typescript}}: string{{/if}}, 
  userId{{#if typescript}}: string{{/if}}, 
  channelId{{#if typescript}}: string{{/if}}
) {
  const reportType = text.trim() || 'daily';
  
  return {
    response_type: 'ephemeral',
    text: `Generating ${reportType} report... You'll receive it shortly.`,
  };
}

/**
 * Utility functions (implement these based on your needs)
 */
async function sendSlackMessage(
  channel{{#if typescript}}: string{{/if}}, 
  content{{#if typescript}}: string | any[]{{/if}}, 
  thread_ts{{#if typescript}}?: string{{/if}}
) {
  // Implement using Slack Web API client
  console.log('Sending message to:', channel);
}

async function sendDirectMessage(
  userId{{#if typescript}}: string{{/if}}, 
  blocks{{#if typescript}}: any[]{{/if}}
) {
  // Implement using Slack Web API client
  console.log('Sending DM to:', userId);
}

async function getSystemStatus() {
  // Implement your status check logic
  return {
    healthy: true,
    api: 'Operational',
    database: 'Healthy',
    cache: 'Active',
    queue: '0 pending',
  };
}

async function startDeployment(
  environment{{#if typescript}}: string{{/if}}, 
  userId{{#if typescript}}: string{{/if}}
) {
  // Implement deployment logic
  console.log(`Starting deployment to ${environment} by ${userId}`);
}

async function showDetailsModal(
  triggerId{{#if typescript}}: string{{/if}}, 
  value{{#if typescript}}: string{{/if}}
) {
  // Implement modal display using views.open
  console.log('Opening modal for:', value);
}

async function processFeedback(
  values{{#if typescript}}: any{{/if}}, 
  user{{#if typescript}}: any{{/if}}
) {
  // Process feedback form submission
  console.log('Processing feedback from:', user.id);
}

async function updateSettings(
  values{{#if typescript}}: any{{/if}}, 
  user{{#if typescript}}: any{{/if}}
) {
  // Update user settings
  console.log('Updating settings for:', user.id);
}

async function handleApproval(
  user{{#if typescript}}: any{{/if}}, 
  channel{{#if typescript}}: any{{/if}}, 
  message{{#if typescript}}: any{{/if}}
) {
  // Handle approval action
  console.log(`Approval by ${user.id} in ${channel.id}`);
}

async function handleRejection(
  user{{#if typescript}}: any{{/if}}, 
  channel{{#if typescript}}: any{{/if}}, 
  message{{#if typescript}}: any{{/if}}
) {
  // Handle rejection action
  console.log(`Rejection by ${user.id} in ${channel.id}`);
}

async function sendProjectInfo(
  channel{{#if typescript}}: string{{/if}}, 
  user{{#if typescript}}: string{{/if}}
) {
  // Send project information
  console.log(`Sending project info to ${channel} for ${user}`);
}

// Export handlers
export default handleSlackWebhook;

export const slackWebhookHandlers = {
  webhook: handleSlackWebhook,
  event: handleEvent,
  slashCommand: handleSlashCommand,
  interaction: handleInteraction,
};