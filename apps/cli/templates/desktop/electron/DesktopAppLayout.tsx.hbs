{{#if typescript}}'use client';{{/if}}

/**
 * DesktopAppLayout Component - Xala UI System Compliant
 * Generated with Xaheen CLI - Desktop Platform Specific
 * 
 * MANDATORY COMPLIANCE RULES:
 * ❌ NO raw HTML elements (div, span, p, h1-h6, button, input, etc.)
 * ✅ ONLY semantic components from @xala-technologies/ui-system
 * ❌ NO hardcoded styling (no style={{}}, no arbitrary Tailwind values)
 * ✅ MANDATORY design token usage for all colors, spacing, typography
 * ✅ Enhanced 8pt Grid System - all spacing in 8px increments
 * ✅ WCAG 2.2 AAA compliance for accessibility
 * ❌ NO hardcoded user-facing text - ALL text must use t() function
 * ✅ MANDATORY localization: English, Norwegian Bokmål, French, Arabic
 * ✅ Explicit TypeScript return types (no 'any' types)
 * ✅ SOLID principles and component composition
 * ✅ Maximum 200 lines per file, 20 lines per function
 * 
 * Desktop Platform Features:
 * - Native desktop window controls
 * - Menu bar integration
 * - Keyboard shortcuts
 * - Multi-window support
 * - System tray integration
 * - File system access
 * - Norwegian desktop UX patterns
 */

{{#if typescript}}
import React from 'react';
import { useTranslation } from 'next-intl';
import {
  Box,
  Stack,
  Container,
  Typography,
  Button,
  Icon,
  Badge,
  Avatar,
  MenuBar,
  TitleBar,
  Sidebar,
  StatusBar,
  Toolbar,
  Splitter,
  ContextMenu,
  KeyboardShortcut,
  WindowControls,
  Resizable
} from '@xala-technologies/ui-system';
import { 
  Menu,
  Minimize2,
  Maximize2,
  X,
  Settings,
  File,
  Edit,
  View,
  Help,
  Search,
  Bell,
  User,
  Folder,
  Save,
  Undo,
  Redo
} from 'lucide-react';

interface DesktopAppLayoutProps {
  children: React.ReactNode;
  title: string;
  subtitle?: string;
  showMenuBar?: boolean;
  showTitleBar?: boolean;
  showSidebar?: boolean;
  showStatusBar?: boolean;
  showToolbar?: boolean;
  sidebarContent?: React.ReactNode;
  toolbarContent?: React.ReactNode;
  statusBarContent?: React.ReactNode;
  menuItems?: MenuBarItem[];
  onWindowAction?: (action: 'minimize' | 'maximize' | 'close') => void;
  onMenuAction?: (action: string) => void;
  shortcuts?: KeyboardShortcutItem[];
  windowState?: 'normal' | 'maximized' | 'minimized';
  resizable?: boolean;
  locale?: string;
  theme?: 'light' | 'dark' | 'high-contrast';
}

interface MenuBarItem {
  id: string;
  label: string;
  items: MenuBarSubItem[];
}

interface MenuBarSubItem {
  id: string;
  label: string;
  shortcut?: string;
  separator?: boolean;
  disabled?: boolean;
  submenu?: MenuBarSubItem[];
}

interface KeyboardShortcutItem {
  keys: string[];
  action: string;
  description: string;
}
{{else}}
import React from 'react';
import { useTranslation } from 'next-intl';
import {
  Box,
  Stack,
  Container,
  Typography,
  Button,
  Icon,
  Badge,
  Avatar,
  MenuBar,
  TitleBar,
  Sidebar,
  StatusBar,
  Toolbar,
  Splitter,
  ContextMenu,
  KeyboardShortcut,
  WindowControls,
  Resizable
} from '@xala-technologies/ui-system';
import { 
  Menu,
  Minimize2,
  Maximize2,
  X,
  Settings,
  File,
  Edit,
  View,
  Help,
  Search,
  Bell,
  User,
  Folder,
  Save,
  Undo,
  Redo
} from 'lucide-react';
{{/if}}

/**
 * Default desktop menu structure
 */
const defaultMenuItems{{#if typescript}}: MenuBarItem[]{{/if}} = [
  {
    id: 'file',
    label: 'menu.file',
    items: [
      { id: 'new', label: 'menu.file.new', shortcut: 'Ctrl+N' },
      { id: 'open', label: 'menu.file.open', shortcut: 'Ctrl+O' },
      { id: 'save', label: 'menu.file.save', shortcut: 'Ctrl+S' },
      { id: 'separator1', label: '', separator: true },
      { id: 'exit', label: 'menu.file.exit', shortcut: 'Alt+F4' },
    ],
  },
  {
    id: 'edit',
    label: 'menu.edit',
    items: [
      { id: 'undo', label: 'menu.edit.undo', shortcut: 'Ctrl+Z' },
      { id: 'redo', label: 'menu.edit.redo', shortcut: 'Ctrl+Y' },
      { id: 'separator2', label: '', separator: true },
      { id: 'cut', label: 'menu.edit.cut', shortcut: 'Ctrl+X' },
      { id: 'copy', label: 'menu.edit.copy', shortcut: 'Ctrl+C' },
      { id: 'paste', label: 'menu.edit.paste', shortcut: 'Ctrl+V' },
    ],
  },
  {
    id: 'view',
    label: 'menu.view',
    items: [
      { id: 'zoom-in', label: 'menu.view.zoomIn', shortcut: 'Ctrl+Plus' },
      { id: 'zoom-out', label: 'menu.view.zoomOut', shortcut: 'Ctrl+Minus' },
      { id: 'zoom-reset', label: 'menu.view.zoomReset', shortcut: 'Ctrl+0' },
      { id: 'separator3', label: '', separator: true },
      { id: 'fullscreen', label: 'menu.view.fullscreen', shortcut: 'F11' },
    ],
  },
  {
    id: 'help',
    label: 'menu.help',
    items: [
      { id: 'about', label: 'menu.help.about' },
      { id: 'documentation', label: 'menu.help.documentation', shortcut: 'F1' },
      { id: 'shortcuts', label: 'menu.help.shortcuts' },
    ],
  },
];

/**
 * Default keyboard shortcuts
 */
const defaultShortcuts{{#if typescript}}: KeyboardShortcutItem[]{{/if}} = [
  { keys: ['Ctrl', 'N'], action: 'new', description: 'shortcuts.new' },
  { keys: ['Ctrl', 'O'], action: 'open', description: 'shortcuts.open' },
  { keys: ['Ctrl', 'S'], action: 'save', description: 'shortcuts.save' },
  { keys: ['Ctrl', 'Z'], action: 'undo', description: 'shortcuts.undo' },
  { keys: ['Ctrl', 'Y'], action: 'redo', description: 'shortcuts.redo' },
  { keys: ['Ctrl', 'F'], action: 'search', description: 'shortcuts.search' },
  { keys: ['F11'], action: 'fullscreen', description: 'shortcuts.fullscreen' },
];

/**
 * DesktopAppLayout - Native desktop application experience
 * Optimized for keyboard navigation and Norwegian desktop patterns
 */
{{#if typescript}}
export default function DesktopAppLayout({
  children,
  title,
  subtitle,
  showMenuBar = true,
  showTitleBar = true,
  showSidebar = false,
  showStatusBar = true,
  showToolbar = true,
  sidebarContent,
  toolbarContent,
  statusBarContent,
  menuItems = defaultMenuItems,
  onWindowAction,
  onMenuAction,
  shortcuts = defaultShortcuts,
  windowState = 'normal',
  resizable = true,
  locale = 'en',
  theme = 'light'
}: DesktopAppLayoutProps): React.ReactElement {
{{else}}
export default function DesktopAppLayout({
  children,
  title,
  subtitle,
  showMenuBar = true,
  showTitleBar = true,
  showSidebar = false,
  showStatusBar = true,
  showToolbar = true,
  sidebarContent,
  toolbarContent,
  statusBarContent,
  menuItems = defaultMenuItems,
  onWindowAction,
  onMenuAction,
  shortcuts = defaultShortcuts,
  windowState = 'normal',
  resizable = true,
  locale = 'en',
  theme = 'light'
}) {
{{/if}}
  const { t } = useTranslation();
  const [sidebarWidth, setSidebarWidth] = React.useState(240);

  // Keyboard shortcuts handler
  React.useEffect(() => {
    const handleKeyDown = (event{{#if typescript}}: KeyboardEvent{{/if}}) => {
      const pressedKeys = [];
      if (event.ctrlKey) pressedKeys.push('Ctrl');
      if (event.altKey) pressedKeys.push('Alt');
      if (event.shiftKey) pressedKeys.push('Shift');
      if (event.metaKey) pressedKeys.push('Meta');
      
      if (event.key !== 'Control' && event.key !== 'Alt' && event.key !== 'Shift' && event.key !== 'Meta') {
        pressedKeys.push(event.key);
      }

      const shortcut = shortcuts.find(s => 
        s.keys.length === pressedKeys.length &&
        s.keys.every(key => pressedKeys.includes(key))
      );

      if (shortcut && onMenuAction) {
        event.preventDefault();
        onMenuAction(shortcut.action);
      }
    };

    document.addEventListener('keydown', handleKeyDown);
    return () => document.removeEventListener('keydown', handleKeyDown);
  }, [shortcuts, onMenuAction]);

  const handleWindowAction = (action{{#if typescript}}: 'minimize' | 'maximize' | 'close'{{/if}}){{#if typescript}}: void{{/if}} => {
    if (onWindowAction) {
      onWindowAction(action);
    }
  };

  const renderTitleBar = {{#if typescript}}(): React.ReactElement | null{{/if}} => {
    if (!showTitleBar) return null;

    return (
      <TitleBar
        backgroundColor="card"
        borderBottom="1"
        height="8"
        draggable={true}
      >
        <Stack direction="horizontal" align="center" justify="between" height="full" paddingHorizontal="4">
          {/* App Title */}
          <Stack direction="horizontal" align="center" spacing="3">
            <Icon component={Folder} size="sm" />
            <Stack direction="vertical" spacing="0">
              <Typography variant="body" size="sm" weight="medium">
                {t(title, title)}
              </Typography>
              {subtitle && (
                <Typography variant="caption" size="xs" color="muted">
                  {t(subtitle, subtitle)}
                </Typography>
              )}
            </Stack>
          </Stack>

          {/* Window Controls */}
          <WindowControls
            onMinimize={() => handleWindowAction('minimize')}
            onMaximize={() => handleWindowAction('maximize')}
            onClose={() => handleWindowAction('close')}
            maximized={windowState === 'maximized'}
          />
        </Stack>
      </TitleBar>
    );
  };

  const renderMenuBar = {{#if typescript}}(): React.ReactElement | null{{/if}} => {
    if (!showMenuBar) return null;

    return (
      <MenuBar backgroundColor="card" borderBottom="1" height="8">
        <Stack direction="horizontal" align="center" spacing="0" height="full">
          {menuItems.map((menu) => (
            <MenuBar.Menu key={menu.id} trigger={t(menu.label, menu.label)}>
              {menu.items.map((item) => {
                if (item.separator) {
                  return <MenuBar.Separator key={item.id} />;
                }

                return (
                  <MenuBar.Item
                    key={item.id}
                    disabled={item.disabled}
                    onSelect={() => onMenuAction && onMenuAction(item.id)}
                  >
                    {t(item.label, item.label)}
                    {item.shortcut && (
                      <MenuBar.Shortcut>{item.shortcut}</MenuBar.Shortcut>
                    )}
                  </MenuBar.Item>
                );
              })}
            </MenuBar.Menu>
          ))}
        </Stack>
      </MenuBar>
    );
  };

  const renderToolbar = {{#if typescript}}(): React.ReactElement | null{{/if}} => {
    if (!showToolbar) return null;

    const defaultToolbar = (
      <Stack direction="horizontal" align="center" spacing="2">
        <Button variant="ghost" size="sm" onClick={() => onMenuAction && onMenuAction('new')}>
          <Icon component={File} size="sm" />
          <Typography variant="body" size="sm">
            {t('toolbar.new', 'New')}
          </Typography>
        </Button>
        
        <Button variant="ghost" size="sm" onClick={() => onMenuAction && onMenuAction('save')}>
          <Icon component={Save} size="sm" />
          <Typography variant="body" size="sm">
            {t('toolbar.save', 'Save')}
          </Typography>
        </Button>

        <Box width="px" height="6" backgroundColor="border" />

        <Button variant="ghost" size="sm" onClick={() => onMenuAction && onMenuAction('undo')}>
          <Icon component={Undo} size="sm" />
        </Button>
        
        <Button variant="ghost" size="sm" onClick={() => onMenuAction && onMenuAction('redo')}>
          <Icon component={Redo} size="sm" />
        </Button>

        <Box width="px" height="6" backgroundColor="border" />

        <Button variant="ghost" size="sm" onClick={() => onMenuAction && onMenuAction('search')}>
          <Icon component={Search} size="sm" />
          <Typography variant="body" size="sm">
            {t('toolbar.search', 'Search')}
          </Typography>
        </Button>
      </Stack>
    );

    return (
      <Toolbar backgroundColor="card" borderBottom="1" padding="2">
        {toolbarContent || defaultToolbar}
      </Toolbar>
    );
  };

  const renderSidebar = {{#if typescript}}(): React.ReactElement | null{{/if}} => {
    if (!showSidebar) return null;

    const defaultSidebarContent = (
      <Stack direction="vertical" spacing="4" padding="4">
        <Typography variant="heading" size="md" weight="medium">
          {t('sidebar.explorer', 'Explorer')}
        </Typography>
        
        <Stack direction="vertical" spacing="2">
          <Button variant="ghost" size="sm" justifyContent="start">
            <Icon component={Folder} size="sm" />
            <Typography variant="body" size="sm">
              {t('sidebar.documents', 'Documents')}
            </Typography>
          </Button>
          
          <Button variant="ghost" size="sm" justifyContent="start">
            <Icon component={File} size="sm" />
            <Typography variant="body" size="sm">
              {t('sidebar.recent', 'Recent Files')}
            </Typography>
          </Button>
        </Stack>
      </Stack>
    );

    return (
      <Resizable
        width={sidebarWidth}
        onResize={setSidebarWidth}
        minWidth={200}
        maxWidth={400}
        direction="horizontal"
      >
        <Sidebar
          width={sidebarWidth}
          backgroundColor="card"
          borderRight="1"
          height="full"
        >
          {sidebarContent || defaultSidebarContent}
        </Sidebar>
      </Resizable>
    );
  };

  const renderStatusBar = {{#if typescript}}(): React.ReactElement | null{{/if}} => {
    if (!showStatusBar) return null;

    const defaultStatusContent = (
      <Stack direction="horizontal" align="center" justify="between" width="full">
        <Stack direction="horizontal" align="center" spacing="4">
          <Typography variant="body" size="sm" color="muted">
            {t('status.ready', 'Ready')}
          </Typography>
        </Stack>

        <Stack direction="horizontal" align="center" spacing="4">
          <Typography variant="body" size="sm" color="muted">
            {new Intl.DateTimeFormat(locale, {
              hour: '2-digit',
              minute: '2-digit',
            }).format(new Date())}
          </Typography>
        </Stack>
      </Stack>
    );

    return (
      <StatusBar backgroundColor="card" borderTop="1" padding="2" height="6">
        {statusBarContent || defaultStatusContent}
      </StatusBar>
    );
  };

  const renderMainContent = {{#if typescript}}(): React.ReactElement{{/if}} => {
    const content = (
      <Box flex="1" backgroundColor="background" overflow="hidden">
        {children}
      </Box>
    );

    if (showSidebar) {
      return (
        <Splitter orientation="horizontal" defaultSizes={[sidebarWidth, 'auto']}>
          {renderSidebar()}
          {content}
        </Splitter>
      );
    }

    return content;
  };

  const layoutContent = (
    <Stack direction="vertical" height="screen" overflow="hidden">
      {renderTitleBar()}
      {renderMenuBar()}
      {renderToolbar()}
      
      <Box flex="1" overflow="hidden">
        {renderMainContent()}
      </Box>
      
      {renderStatusBar()}
    </Stack>
  );

  if (resizable) {
    return (
      <Resizable
        width="100vw"
        height="100vh"
        minWidth={800}
        minHeight={600}
        direction="both"
      >
        {layoutContent}
      </Resizable>
    );
  }

  return layoutContent;
}

{{#if includeExamples}}
// Example usage:
/*
import DesktopAppLayout from '@/platforms/desktop/DesktopAppLayout';
import { FileText, Image, Video } from 'lucide-react';

export default function DesktopApp() {
  const customMenuItems = [
    {
      id: 'file',
      label: 'menu.file',
      items: [
        { id: 'new-project', label: 'menu.file.newProject', shortcut: 'Ctrl+Shift+N' },
        { id: 'open-project', label: 'menu.file.openProject', shortcut: 'Ctrl+Shift+O' },
        { id: 'separator1', label: '', separator: true },
        { id: 'export', label: 'menu.file.export', shortcut: 'Ctrl+E' },
      ],
    },
  ];

  const sidebarContent = (
    <Stack direction="vertical" spacing="4" padding="4">
      <Typography variant="heading" size="md">
        Project Files
      </Typography>
      
      <Stack direction="vertical" spacing="2">
        <Button variant="ghost" size="sm" justifyContent="start">
          <Icon component={FileText} size="sm" />
          <Typography variant="body" size="sm">
            README.md
          </Typography>
        </Button>
        
        <Button variant="ghost" size="sm" justifyContent="start">
          <Icon component={Image} size="sm" />
          <Typography variant="body" size="sm">
            logo.png
          </Typography>
        </Button>
      </Stack>
    </Stack>
  );

  return (
    <DesktopAppLayout
      title="app.title"
      subtitle="app.subtitle"
      menuItems={customMenuItems}
      showSidebar={true}
      sidebarContent={sidebarContent}
      onWindowAction={handleWindowAction}
      onMenuAction={handleMenuAction}
      locale="nb"
      theme="light"
    >
      <Container padding="6">
        <Typography variant="heading" size="xl">
          Desktop Application Content
        </Typography>
      </Container>
    </DesktopAppLayout>
  );
}
*/
{{/if}}
