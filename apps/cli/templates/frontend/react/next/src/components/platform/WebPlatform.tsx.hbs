{{#if typescript}}'use client';{{/if}}

/**
 * WebPlatform Component - Xala UI System Compliant
 * Generated with Xaheen CLI - Web Platform Optimizations
 * 
 * MANDATORY COMPLIANCE RULES:
 * ❌ NO raw HTML elements (div, span, p, h1-h6, button, input, etc.)
 * ✅ ONLY semantic components from @xala-technologies/ui-system
 * ❌ NO hardcoded styling (no style={{}}, no arbitrary Tailwind values)
 * ✅ MANDATORY design token usage for all colors, spacing, typography
 * ✅ Enhanced 8pt Grid System - all spacing in 8px increments
 * ✅ WCAG 2.2 AAA compliance for accessibility
 * ❌ NO hardcoded user-facing text - ALL text must use t() function
 * ✅ MANDATORY localization: English, Norwegian Bokmål, French, Arabic
 * ✅ Explicit TypeScript return types (no 'any' types)
 * ✅ SOLID principles and component composition
 * ✅ Maximum 200 lines per file, 20 lines per function
 * 
 * Web Platform Features:
 * - Progressive Web App (PWA) support
 * - Service Worker integration
 * - Web-specific performance optimizations
 * - Desktop-first responsive design
 * - Browser API integrations
 * - SEO optimizations
 */

{{#if typescript}}
import React from 'react';
{{/if}}
import { 
  Container,
  Stack,
  Text,
  Heading,
  Card,
  Button,
  Grid
} from '@xala-technologies/ui-system';
{{#if includeLocalization}}
import { useTranslations } from 'next-intl';
{{/if}}
import { usePlatform } from '@/hooks/usePlatform';
{{#if hasGDPR}}
import { useGDPRConsent } from '@/hooks/useGDPRConsent';
{{/if}}
{{#if hasWCAG}}
import { useFocusManagement } from '@/hooks/useFocusManagement';
{{/if}}
{{#if hasNorwegian}}
import { useBankID } from '@/hooks/useBankID';
import { useAltinn } from '@/hooks/useAltinn';
{{/if}}

{{#if typescript}}
interface WebPlatformProps {
  children: React.ReactNode;
  enablePWA?: boolean;
  enableServiceWorker?: boolean;
  seoOptimized?: boolean;
}

interface WebCapabilities {
  serviceWorker: boolean;
  pushNotifications: boolean;
  geolocation: boolean;
  camera: boolean;
  microphone: boolean;
  fullscreen: boolean;
}
{{/if}}

export default function WebPlatform({{#if typescript}}props: WebPlatformProps{{/if}}){{#if typescript}}: JSX.Element{{/if}} {
  {{#if typescript}}
  const {
    children,
    enablePWA = true,
    enableServiceWorker = true,
    seoOptimized = true
  } = props;
  {{/if}}

  {{#if includeLocalization}}
  const t = useTranslations('webPlatform');
  {{/if}}

  // Platform detection and capabilities
  const { platform, capabilities, isWebPlatform } = usePlatform();

  {{#if hasGDPR}}
  const { hasConsent } = useGDPRConsent();
  {{/if}}

  {{#if hasWCAG}}
  const { focusRing } = useFocusManagement();
  {{/if}}

  {{#if hasNorwegian}}
  const { isAvailable: bankIDAvailable } = useBankID();
  const { isConnected: altinnConnected } = useAltinn();
  {{/if}}

  // Web-specific capabilities detection
  const webCapabilities{{#if typescript}}: WebCapabilities{{/if}} = {
    serviceWorker: 'serviceWorker' in navigator,
    pushNotifications: 'PushManager' in window,
    geolocation: 'geolocation' in navigator,
    camera: 'mediaDevices' in navigator,
    microphone: 'mediaDevices' in navigator,
    fullscreen: 'requestFullscreen' in document.documentElement
  };

  // PWA installation prompt
  const handleInstallPWA = (){{#if typescript}}: void{{/if}} => {
    // PWA installation logic
    {{#if includeLocalization}}
    console.log(t('pwa.installing'));
    {{else}}
    console.log('Installing PWA...');
    {{/if}}
  };

  // Service Worker registration
  React.useEffect(() => {
    if (enableServiceWorker && webCapabilities.serviceWorker) {
      navigator.serviceWorker.register('/sw.js')
        .then((registration) => {
          {{#if includeLocalization}}
          console.log(t('serviceWorker.registered'), registration);
          {{else}}
          console.log('Service Worker registered:', registration);
          {{/if}}
        })
        .catch((error) => {
          {{#if includeLocalization}}
          console.error(t('serviceWorker.error'), error);
          {{else}}
          console.error('Service Worker registration failed:', error);
          {{/if}}
        });
    }
  }, [enableServiceWorker]);

  if (!isWebPlatform) {
    return (
      <Container variant="centered" minHeight="screen">
        <Card variant="elevated" padding="6">
          <Text variant="body" color="warning">
            {{#if includeLocalization}}
            {t('platformMismatch')}
            {{else}}
            This component is optimized for web platforms.
            {{/if}}
          </Text>
        </Card>
      </Container>
    );
  }

  return (
    <Container
      variant="full"
      data-testid="web-platform"
      role="application"
      aria-label="{{#if includeLocalization}}{t('ariaLabel')}{{else}}Web application{{/if}}"
    >
      <Stack direction="vertical" spacing="0" minHeight="screen">
        {/* Web Platform Header */}
        <Container variant="content" padding="4">
          <Stack direction="horizontal" justify="between" align="center">
            <Heading level={2} variant="section">
              {{#if includeLocalization}}
              {t('title')}
              {{else}}
              Web Platform
              {{/if}}
            </Heading>
            
            <Stack direction="horizontal" spacing="3">
              {enablePWA && (
                <Button variant="outline" size="sm" onClick={handleInstallPWA}>
                  {{#if includeLocalization}}
                  {t('pwa.install')}
                  {{else}}
                  Install App
                  {{/if}}
                </Button>
              )}
              
              {{#if hasNorwegian}}
              {bankIDAvailable && (
                <Button variant="primary" size="sm">
                  {t('bankid.available')}
                </Button>
              )}
              {{/if}}
            </Stack>
          </Stack>
        </Container>

        {/* Web Capabilities Overview */}
        <Container variant="content" padding="4">
          <Grid cols="3" gap="4" responsive>
            <Card variant="outline" padding="4">
              <Stack direction="vertical" spacing="2">
                <Text variant="label" color="primary">
                  {{#if includeLocalization}}
                  {t('capabilities.pwa')}
                  {{else}}
                  PWA Support
                  {{/if}}
                </Text>
                <Text variant="body-sm" color={webCapabilities.serviceWorker ? 'success' : 'secondary'}>
                  {{#if includeLocalization}}
                  {webCapabilities.serviceWorker ? t('status.available') : t('status.unavailable')}
                  {{else}}
                  {webCapabilities.serviceWorker ? 'Available' : 'Unavailable'}
                  {{/if}}
                </Text>
              </Stack>
            </Card>
            
            <Card variant="outline" padding="4">
              <Stack direction="vertical" spacing="2">
                <Text variant="label" color="primary">
                  {{#if includeLocalization}}
                  {t('capabilities.notifications')}
                  {{else}}
                  Push Notifications
                  {{/if}}
                </Text>
                <Text variant="body-sm" color={webCapabilities.pushNotifications ? 'success' : 'secondary'}>
                  {{#if includeLocalization}}
                  {webCapabilities.pushNotifications ? t('status.available') : t('status.unavailable')}
                  {{else}}
                  {webCapabilities.pushNotifications ? 'Available' : 'Unavailable'}
                  {{/if}}
                </Text>
              </Stack>
            </Card>
            
            <Card variant="outline" padding="4">
              <Stack direction="vertical" spacing="2">
                <Text variant="label" color="primary">
                  {{#if includeLocalization}}
                  {t('capabilities.geolocation')}
                  {{else}}
                  Geolocation
                  {{/if}}
                </Text>
                <Text variant="body-sm" color={webCapabilities.geolocation ? 'success' : 'secondary'}>
                  {{#if includeLocalization}}
                  {webCapabilities.geolocation ? t('status.available') : t('status.unavailable')}
                  {{else}}
                  {webCapabilities.geolocation ? 'Available' : 'Unavailable'}
                  {{/if}}
                </Text>
              </Stack>
            </Card>
          </Grid>
        </Container>

        {/* Main Content */}
        <Container variant="content" padding="6" flex="1">
          {children}
        </Container>
      </Stack>
    </Container>
  );
}

{{#if includeExamples}}
// Example usage:
/*
<WebPlatform 
  enablePWA={true}
  enableServiceWorker={true}
  seoOptimized={true}
>
  <YourAppContent />
</WebPlatform>
*/
{{/if}}
