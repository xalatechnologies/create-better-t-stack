{{#if typescript}}'use client';{{/if}}

/**
 * AuthLayout Component - Xala UI System Compliant
 * Generated with Xaheen CLI - Authentication Layout
 * 
 * MANDATORY COMPLIANCE RULES:
 * ❌ NO raw HTML elements (div, span, p, h1-h6, button, input, etc.)
 * ✅ ONLY semantic components from @xala-technologies/ui-system
 * ❌ NO hardcoded styling (no style={{}}, no arbitrary Tailwind values)
 * ✅ MANDATORY design token usage for all colors, spacing, typography
 * ✅ Enhanced 8pt Grid System - all spacing in 8px increments
 * ✅ WCAG 2.2 AAA compliance for accessibility
 * ❌ NO hardcoded user-facing text - ALL text must use t() function
 * ✅ MANDATORY localization: English, Norwegian Bokmål, French, Arabic
 * ✅ Explicit TypeScript return types (no 'any' types)
 * ✅ SOLID principles and component composition
 * ✅ Maximum 200 lines per file, 20 lines per function
 * 
 * Features:
 * - Multiple authentication methods (BankID, Vipps, OAuth, Email)
 * - Norwegian authentication patterns
 * - GDPR-compliant privacy notices
 * - Accessibility-first design
 * - Multi-step authentication flows
 * - Security indicators and trust signals
 * - Responsive design for all devices
 */

{{#if typescript}}
import React from 'react';
import { useTranslation } from 'next-intl';
import {
  Box,
  Stack,
  Container,
  Typography,
  Button,
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  Form,
  Input,
  Checkbox,
  Link,
  Icon,
  Badge,
  Alert,
  Separator,
  Logo,
  LanguageSelector,
  ThemeToggle
} from '@xala-technologies/ui-system';
import { 
  Shield,
  Lock,
  Eye,
  EyeOff,
  ArrowRight,
  ArrowLeft,
  CheckCircle,
  AlertTriangle,
  Globe,
  Smartphone,
  CreditCard,
  Mail,
  Github,
  Google,
  Microsoft
} from 'lucide-react';
import BaseLayout from './BaseLayout';

interface AuthLayoutProps {
  children: React.ReactNode;
  mode: 'login' | 'register' | 'forgot-password' | 'reset-password' | 'verify-email' | 'two-factor';
  title?: string;
  subtitle?: string;
  showLogo?: boolean;
  showLanguageSelector?: boolean;
  showThemeToggle?: boolean;
  enabledProviders?: AuthProvider[];
  showPrivacyNotice?: boolean;
  showSecurityIndicators?: boolean;
  allowGuestAccess?: boolean;
  onBack?: () => void;
  locale?: string;
  theme?: 'light' | 'dark' | 'high-contrast';
  brandConfig?: BrandConfig;
}

interface AuthProvider {
  id: string;
  name: string;
  icon: React.ComponentType;
  color: string;
  enabled: boolean;
  norwegian?: boolean;
  trustLevel?: 'high' | 'medium' | 'low';
}

interface BrandConfig {
  logo?: string;
  name: string;
  primaryColor?: string;
  supportUrl?: string;
  privacyUrl?: string;
  termsUrl?: string;
}
{{else}}
import React from 'react';
import { useTranslation } from 'next-intl';
import {
  Box,
  Stack,
  Container,
  Typography,
  Button,
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  Form,
  Input,
  Checkbox,
  Link,
  Icon,
  Badge,
  Alert,
  Separator,
  Logo,
  LanguageSelector,
  ThemeToggle
} from '@xala-technologies/ui-system';
import { 
  Shield,
  Lock,
  Eye,
  EyeOff,
  ArrowRight,
  ArrowLeft,
  CheckCircle,
  AlertTriangle,
  Globe,
  Smartphone,
  CreditCard,
  Mail,
  Github,
  Google,
  Microsoft
} from 'lucide-react';
import BaseLayout from './BaseLayout';
{{/if}}

/**
 * AuthLayout - Professional authentication layout
 * Optimized for Norwegian authentication patterns and GDPR compliance
 */
{{#if typescript}}
export default function AuthLayout({
  children,
  mode,
  title,
  subtitle,
  showLogo = true,
  showLanguageSelector = true,
  showThemeToggle = true,
  enabledProviders = [],
  showPrivacyNotice = true,
  showSecurityIndicators = true,
  allowGuestAccess = false,
  onBack,
  locale = 'en',
  theme = 'light',
  brandConfig
}: AuthLayoutProps): React.ReactElement {
{{else}}
export default function AuthLayout({
  children,
  mode,
  title,
  subtitle,
  showLogo = true,
  showLanguageSelector = true,
  showThemeToggle = true,
  enabledProviders = [],
  showPrivacyNotice = true,
  showSecurityIndicators = true,
  allowGuestAccess = false,
  onBack,
  locale = 'en',
  theme = 'light',
  brandConfig
}) {
{{/if}}
  const { t } = useTranslation();

  const getDefaultTitle = {{#if typescript}}(): string{{/if}} => {
    switch (mode) {
      case 'login':
        return t('auth.login.title', 'Sign In');
      case 'register':
        return t('auth.register.title', 'Create Account');
      case 'forgot-password':
        return t('auth.forgotPassword.title', 'Reset Password');
      case 'reset-password':
        return t('auth.resetPassword.title', 'Set New Password');
      case 'verify-email':
        return t('auth.verifyEmail.title', 'Verify Email');
      case 'two-factor':
        return t('auth.twoFactor.title', 'Two-Factor Authentication');
      default:
        return t('auth.title', 'Authentication');
    }
  };

  const getDefaultSubtitle = {{#if typescript}}(): string{{/if}} => {
    switch (mode) {
      case 'login':
        return t('auth.login.subtitle', 'Welcome back! Please sign in to your account.');
      case 'register':
        return t('auth.register.subtitle', 'Create your account to get started.');
      case 'forgot-password':
        return t('auth.forgotPassword.subtitle', 'Enter your email to receive reset instructions.');
      case 'reset-password':
        return t('auth.resetPassword.subtitle', 'Choose a strong password for your account.');
      case 'verify-email':
        return t('auth.verifyEmail.subtitle', 'Check your email for verification instructions.');
      case 'two-factor':
        return t('auth.twoFactor.subtitle', 'Enter the code from your authenticator app.');
      default:
        return '';
    }
  };

  const renderHeader = {{#if typescript}}(): React.ReactElement{{/if}} => (
    <Stack direction="vertical" align="center" spacing="6" textAlign="center">
      {/* Logo */}
      {showLogo && (
        <Box>
          {brandConfig?.logo ? (
            <Logo
              src={brandConfig.logo}
              alt={brandConfig.name}
              size="lg"
            />
          ) : (
            <Box
              width="16"
              height="16"
              borderRadius="md"
              backgroundColor="primary"
              display="flex"
              alignItems="center"
              justifyContent="center"
            >
              <Icon component={Shield} size="lg" color="primary-foreground" />
            </Box>
          )}
        </Box>
      )}

      {/* Title and Subtitle */}
      <Stack direction="vertical" align="center" spacing="2">
        <Typography variant="heading" size="2xl" weight="bold">
          {title || getDefaultTitle()}
        </Typography>
        
        {(subtitle || getDefaultSubtitle()) && (
          <Typography variant="body" size="lg" color="muted" maxWidth="96">
            {subtitle || getDefaultSubtitle()}
          </Typography>
        )}
      </Stack>

      {/* Back Button */}
      {onBack && (
        <Button
          variant="ghost"
          size="sm"
          onClick={onBack}
          className="self-start"
        >
          <Icon component={ArrowLeft} size="sm" />
          {t('auth.back', 'Back')}
        </Button>
      )}
    </Stack>
  );

  const renderNorwegianProviders = {{#if typescript}}(): React.ReactElement | null{{/if}} => {
    const norwegianProviders = enabledProviders.filter(provider => provider.norwegian);
    
    if (norwegianProviders.length === 0) return null;

    return (
      <Stack direction="vertical" spacing="4">
        <Stack direction="horizontal" align="center" spacing="2">
          <Icon component={Shield} size="sm" color="success" />
          <Typography variant="body" size="sm" weight="medium" color="success">
            {t('auth.norwegianAuth', 'Norwegian Authentication')}
          </Typography>
        </Stack>

        <Stack direction="vertical" spacing="3">
          {norwegianProviders.map((provider) => (
            <Button
              key={provider.id}
              variant="outline"
              size="lg"
              width="full"
              className="justify-start"
            >
              <Stack direction="horizontal" align="center" spacing="3" width="full">
                <Icon component={provider.icon} size="md" />
                
                <Stack direction="vertical" align="start" spacing="0" flex="1">
                  <Typography variant="body" size="md" weight="medium">
                    {t(`auth.providers.${provider.id}`, provider.name)}
                  </Typography>
                  
                  {provider.trustLevel === 'high' && (
                    <Stack direction="horizontal" align="center" spacing="1">
                      <Icon component={CheckCircle} size="xs" color="success" />
                      <Typography variant="caption" size="xs" color="success">
                        {t('auth.highTrust', 'High Trust Level')}
                      </Typography>
                    </Stack>
                  )}
                </Stack>

                <Icon component={ArrowRight} size="sm" color="muted" />
              </Stack>
            </Button>
          ))}
        </Stack>
      </Stack>
    );
  };

  const renderInternationalProviders = {{#if typescript}}(): React.ReactElement | null{{/if}} => {
    const internationalProviders = enabledProviders.filter(provider => !provider.norwegian);
    
    if (internationalProviders.length === 0) return null;

    return (
      <Stack direction="vertical" spacing="4">
        <Stack direction="horizontal" align="center" spacing="2">
          <Icon component={Globe} size="sm" color="muted" />
          <Typography variant="body" size="sm" weight="medium" color="muted">
            {t('auth.otherOptions', 'Other Sign-in Options')}
          </Typography>
        </Stack>

        <Stack direction="horizontal" spacing="2" wrap>
          {internationalProviders.map((provider) => (
            <Button
              key={provider.id}
              variant="outline"
              size="md"
              flex="1"
              minWidth="32"
            >
              <Stack direction="horizontal" align="center" spacing="2">
                <Icon component={provider.icon} size="sm" />
                <Typography variant="body" size="sm">
                  {t(`auth.providers.${provider.id}`, provider.name)}
                </Typography>
              </Stack>
            </Button>
          ))}
        </Stack>
      </Stack>
    );
  };

  const renderSecurityIndicators = {{#if typescript}}(): React.ReactElement | null{{/if}} => {
    if (!showSecurityIndicators) return null;

    return (
      <Card variant="outline" backgroundColor="muted">
        <CardContent padding="4">
          <Stack direction="horizontal" align="center" spacing="3">
            <Icon component={Lock} size="sm" color="success" />
            
            <Stack direction="vertical" spacing="1" flex="1">
              <Typography variant="body" size="sm" weight="medium">
                {t('auth.security.title', 'Your data is secure')}
              </Typography>
              
              <Typography variant="caption" size="xs" color="muted">
                {t('auth.security.description', 'End-to-end encryption and GDPR compliance')}
              </Typography>
            </Stack>

            <Stack direction="horizontal" spacing="1">
              <Badge variant="success" size="sm">
                {t('auth.security.ssl', 'SSL')}
              </Badge>
              
              <Badge variant="success" size="sm">
                {t('auth.security.gdpr', 'GDPR')}
              </Badge>
            </Stack>
          </Stack>
        </CardContent>
      </Card>
    );
  };

  const renderPrivacyNotice = {{#if typescript}}(): React.ReactElement | null{{/if}} => {
    if (!showPrivacyNotice) return null;

    return (
      <Box textAlign="center">
        <Typography variant="caption" size="xs" color="muted" lineHeight="relaxed">
          {t('auth.privacy.notice', 'By continuing, you agree to our')}{' '}
          <Link
            href={brandConfig?.termsUrl || '/terms'}
            variant="muted"
            size="xs"
            underline="hover"
          >
            {t('auth.privacy.terms', 'Terms of Service')}
          </Link>
          {' '}{t('common.and', 'and')}{' '}
          <Link
            href={brandConfig?.privacyUrl || '/privacy'}
            variant="muted"
            size="xs"
            underline="hover"
          >
            {t('auth.privacy.policy', 'Privacy Policy')}
          </Link>
          .
        </Typography>
      </Box>
    );
  };

  const renderGuestAccess = {{#if typescript}}(): React.ReactElement | null{{/if}} => {
    if (!allowGuestAccess) return null;

    return (
      <Stack direction="vertical" spacing="3" textAlign="center">
        <Separator />
        
        <Typography variant="body" size="sm" color="muted">
          {t('auth.guest.title', 'Don\'t want to create an account?')}
        </Typography>
        
        <Button variant="ghost" size="sm">
          {t('auth.guest.continue', 'Continue as Guest')}
        </Button>
      </Stack>
    );
  };

  const renderUtilityActions = {{#if typescript}}(): React.ReactElement{{/if}} => (
    <Stack direction="horizontal" align="center" justify="between" spacing="4">
      {/* Language Selector */}
      {showLanguageSelector && (
        <LanguageSelector
          currentLocale={locale}
          availableLocales={['en', 'nb', 'fr', 'ar']}
          size="sm"
        />
      )}

      {/* Theme Toggle */}
      {showThemeToggle && (
        <ThemeToggle
          currentTheme={theme}
          size="sm"
        />
      )}
    </Stack>
  );

  return (
    <BaseLayout locale={locale} theme={theme} enableCompliance={true}>
      <Box
        minHeight="screen"
        backgroundColor="background"
        display="flex"
        alignItems="center"
        justifyContent="center"
        padding="6"
      >
        <Container maxWidth="120">
          <Stack direction="vertical" spacing="8">
            {/* Utility Actions */}
            <Box alignSelf="end">
              {renderUtilityActions()}
            </Box>

            {/* Main Auth Card */}
            <Card maxWidth="120" margin="auto">
              <CardContent padding="8">
                <Stack direction="vertical" spacing="8">
                  {/* Header */}
                  {renderHeader()}

                  {/* Norwegian Providers */}
                  {renderNorwegianProviders()}

                  {/* Separator */}
                  {enabledProviders.some(p => p.norwegian) && 
                   enabledProviders.some(p => !p.norwegian) && (
                    <Stack direction="horizontal" align="center" spacing="4">
                      <Separator flex="1" />
                      <Typography variant="caption" size="xs" color="muted">
                        {t('common.or', 'or')}
                      </Typography>
                      <Separator flex="1" />
                    </Stack>
                  )}

                  {/* International Providers */}
                  {renderInternationalProviders()}

                  {/* Main Form Content */}
                  {(enabledProviders.length > 0) && (
                    <Stack direction="horizontal" align="center" spacing="4">
                      <Separator flex="1" />
                      <Typography variant="caption" size="xs" color="muted">
                        {t('common.or', 'or')}
                      </Typography>
                      <Separator flex="1" />
                    </Stack>
                  )}

                  <Box>
                    {children}
                  </Box>

                  {/* Guest Access */}
                  {renderGuestAccess()}

                  {/* Security Indicators */}
                  {renderSecurityIndicators()}

                  {/* Privacy Notice */}
                  {renderPrivacyNotice()}
                </Stack>
              </CardContent>
            </Card>

            {/* Support Link */}
            <Box textAlign="center">
              <Link
                href={brandConfig?.supportUrl || '/support'}
                variant="muted"
                size="sm"
                underline="hover"
              >
                {t('auth.support', 'Need help? Contact support')}
              </Link>
            </Box>
          </Stack>
        </Container>
      </Box>
    </BaseLayout>
  );
}

{{#if includeExamples}}
// Example usage:
/*
import AuthLayout from '@/layouts/AuthLayout';
import { CreditCard, Smartphone, Mail, Github, Google } from 'lucide-react';

// Norwegian BankID icon (custom)
const BankIDIcon = () => (
  <svg viewBox="0 0 24 24" fill="currentColor">
    <path d="..." />
  </svg>
);

// Vipps icon (custom)
const VippsIcon = () => (
  <svg viewBox="0 0 24 24" fill="currentColor">
    <path d="..." />
  </svg>
);

export default function LoginPage() {
  const authProviders = [
    {
      id: 'bankid',
      name: 'BankID',
      icon: BankIDIcon,
      color: '#005AA0',
      enabled: true,
      norwegian: true,
      trustLevel: 'high',
    },
    {
      id: 'vipps',
      name: 'Vipps',
      icon: VippsIcon,
      color: '#FF5B24',
      enabled: true,
      norwegian: true,
      trustLevel: 'high',
    },
    {
      id: 'google',
      name: 'Google',
      icon: Google,
      color: '#4285F4',
      enabled: true,
      norwegian: false,
      trustLevel: 'medium',
    },
    {
      id: 'github',
      name: 'GitHub',
      icon: Github,
      color: '#24292e',
      enabled: true,
      norwegian: false,
      trustLevel: 'medium',
    },
  ];

  const brandConfig = {
    name: 'Xaheen Platform',
    logo: '/logo.svg',
    supportUrl: '/support',
    privacyUrl: '/privacy',
    termsUrl: '/terms',
  };

  return (
    <AuthLayout
      mode="login"
      enabledProviders={authProviders}
      showSecurityIndicators={true}
      showPrivacyNotice={true}
      allowGuestAccess={false}
      brandConfig={brandConfig}
      locale="nb"
    >
      <LoginForm />
    </AuthLayout>
  );
}

// Register page example
<AuthLayout
  mode="register"
  title="Join Xaheen"
  subtitle="Create your account and start building amazing applications."
  enabledProviders={authProviders}
  showPrivacyNotice={true}
  locale="nb"
>
  <RegisterForm />
</AuthLayout>

// Two-factor authentication example
<AuthLayout
  mode="two-factor"
  showSecurityIndicators={true}
  onBack={() => router.back()}
  locale="nb"
>
  <TwoFactorForm />
</AuthLayout>
*/
{{/if}}
