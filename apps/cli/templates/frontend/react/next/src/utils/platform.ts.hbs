{{#if (eq ui "xala")}}
/**
 * Platform configuration and utilities for Xala UI System
 * Provides platform-specific settings and capabilities
 */

interface PlatformConfig {
  platform: "web" | "mobile" | "desktop";
  capabilities: {
    touch: boolean;
    keyboard: boolean;
    mouse: boolean;
    camera: boolean;
    geolocation: boolean;
    notifications: boolean;
  };
  breakpoints: {
    mobile: number;
    tablet: number;
    laptop: number;
    desktop: number;
    desktopLg: number;
  };
  features: {
    darkMode: boolean;
    animations: boolean;
    accessibility: boolean;
    offline: boolean;
  };
}

export const getPlatformConfig = (): PlatformConfig => {
  return {
    platform: "web",
    capabilities: {
      touch: typeof window !== "undefined" && ("ontouchstart" in window || navigator.maxTouchPoints > 0),
      keyboard: true,
      mouse: true,
      camera: typeof navigator !== "undefined" && "mediaDevices" in navigator,
      geolocation: typeof navigator !== "undefined" && "geolocation" in navigator,
      notifications: typeof window !== "undefined" && "Notification" in window,
    },
    breakpoints: {
      mobile: 320,
      tablet: 768,
      laptop: 1024,
      desktop: 1440,
      desktopLg: 2560,
    },
    features: {
      darkMode: true,
      animations: typeof window !== "undefined" && !window.matchMedia("(prefers-reduced-motion: reduce)").matches,
      accessibility: true,
      offline: typeof navigator !== "undefined" && "serviceWorker" in navigator,
    },
  };
};

export const detectPlatform = (): "web" | "mobile" | "desktop" => {
  if (typeof window === "undefined") return "web";
  
  const userAgent = navigator.userAgent;
  const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(userAgent);
  
  return isMobile ? "mobile" : "web";
};

export const getBreakpoint = (width: number): string => {
  const config = getPlatformConfig();
  
  if (width < config.breakpoints.tablet) return "mobile";
  if (width < config.breakpoints.laptop) return "tablet";
  if (width < config.breakpoints.desktop) return "laptop";
  if (width < config.breakpoints.desktopLg) return "desktop";
  return "desktop-lg";
};

export const isNorwegianLocale = (locale: string): boolean => {
  return locale === "nb" || locale === "nn" || locale === "no";
};

export const formatNorwegianCurrency = (amount: number): string => {
  return new Intl.NumberFormat("nb-NO", {
    style: "currency",
    currency: "NOK",
  }).format(amount);
};

export const formatNorwegianDate = (date: Date): string => {
  return new Intl.DateTimeFormat("nb-NO", {
    year: "numeric",
    month: "long",
    day: "numeric",
  }).format(date);
};
{{else}}
export const getPlatformConfig = () => {
  return {
    platform: "web" as const,
    capabilities: {
      touch: typeof window !== "undefined" && ("ontouchstart" in window),
      keyboard: true,
      mouse: true,
    },
  };
};

export const detectPlatform = () => {
  return "web" as const;
};
{{/if}}
