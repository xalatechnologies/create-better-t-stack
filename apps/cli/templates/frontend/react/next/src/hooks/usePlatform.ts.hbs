{{#if (eq ui "xala")}}
"use client";

import { useState, useEffect } from "react";

interface PlatformInfo {
  platform: "web" | "mobile" | "desktop";
  isMobile: boolean;
  isDesktop: boolean;
  isWeb: boolean;
  capabilities: {
    touch: boolean;
    keyboard: boolean;
    mouse: boolean;
  };
  userAgent: string;
  viewport: {
    width: number;
    height: number;
  };
}

interface PlatformDimensions {
  width: number;
  height: number;
  breakpoint: "mobile" | "tablet" | "laptop" | "desktop" | "desktop-lg";
}

export const usePlatform = (): PlatformInfo => {
  const [platformInfo, setPlatformInfo] = useState<PlatformInfo>({
    platform: "web",
    isMobile: false,
    isDesktop: false,
    isWeb: true,
    capabilities: {
      touch: false,
      keyboard: true,
      mouse: true,
    },
    userAgent: "",
    viewport: {
      width: 1024,
      height: 768,
    },
  });

  useEffect(() => {
    if (typeof window !== "undefined") {
      const userAgent = navigator.userAgent;
      const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(userAgent);
      const hasTouch = "ontouchstart" in window || navigator.maxTouchPoints > 0;
      
      setPlatformInfo({
        platform: "web",
        isMobile,
        isDesktop: !isMobile,
        isWeb: true,
        capabilities: {
          touch: hasTouch,
          keyboard: true,
          mouse: !isMobile,
        },
        userAgent,
        viewport: {
          width: window.innerWidth,
          height: window.innerHeight,
        },
      });
    }
  }, []);

  return platformInfo;
};

export const usePlatformDimensions = (): PlatformDimensions => {
  const [dimensions, setDimensions] = useState<PlatformDimensions>({
    width: 1024,
    height: 768,
    breakpoint: "laptop",
  });

  useEffect(() => {
    const updateDimensions = () => {
      if (typeof window !== "undefined") {
        const width = window.innerWidth;
        const height = window.innerHeight;
        
        let breakpoint: PlatformDimensions["breakpoint"] = "laptop";
        if (width < 425) breakpoint = "mobile";
        else if (width < 768) breakpoint = "tablet";
        else if (width < 1024) breakpoint = "laptop";
        else if (width < 1440) breakpoint = "desktop";
        else breakpoint = "desktop-lg";

        setDimensions({ width, height, breakpoint });
      }
    };

    updateDimensions();
    window.addEventListener("resize", updateDimensions);
    return () => window.removeEventListener("resize", updateDimensions);
  }, []);

  return dimensions;
};
{{else}}
"use client";

import { useState, useEffect } from "react";

export const usePlatform = () => {
  const [isMobile, setIsMobile] = useState(false);

  useEffect(() => {
    if (typeof window !== "undefined") {
      const userAgent = navigator.userAgent;
      setIsMobile(/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(userAgent));
    }
  }, []);

  return { isMobile };
};

export const usePlatformDimensions = () => {
  const [dimensions, setDimensions] = useState({ width: 1024, height: 768 });

  useEffect(() => {
    const updateDimensions = () => {
      if (typeof window !== "undefined") {
        setDimensions({
          width: window.innerWidth,
          height: window.innerHeight,
        });
      }
    };

    updateDimensions();
    window.addEventListener("resize", updateDimensions);
    return () => window.removeEventListener("resize", updateDimensions);
  }, []);

  return dimensions;
};
{{/if}}
