{{#if typescript}}'use client';{{/if}}

/**
 * Platform Hooks - Xala UI System Compliant
 * Generated with Xaheen CLI - Multi-Platform React Hooks
 * 
 * MANDATORY COMPLIANCE RULES:
 * ❌ NO raw HTML elements (div, span, p, h1-h6, button, input, etc.)
 * ✅ ONLY semantic components from @xala-technologies/ui-system
 * ❌ NO hardcoded styling (no style={{}}, no arbitrary Tailwind values)
 * ✅ MANDATORY design token usage for all colors, spacing, typography
 * ✅ Enhanced 8pt Grid System - all spacing in 8px increments
 * ✅ WCAG 2.2 AAA compliance for accessibility
 * ❌ NO hardcoded user-facing text - ALL text must use t() function
 * ✅ MANDATORY localization: English, Norwegian Bokmål, French, Arabic
 * ✅ Explicit TypeScript return types (no 'any' types)
 * ✅ SOLID principles and component composition
 * ✅ Maximum 200 lines per file, 20 lines per function
 * 
 * Platform Hooks:
 * - usePlatform: Platform detection and info
 * - usePlatformDimensions: Screen dimensions and safe areas
 * - usePlatformStorage: Cross-platform storage
 * - usePlatformNavigation: Platform-specific navigation
 * - usePlatformPermissions: Platform permissions
 * - usePlatformNotifications: Cross-platform notifications
 */

{{#if typescript}}
import { useState, useEffect, useCallback } from 'react';
import { 
  getPlatformInfo, 
  getPlatformDimensions, 
  getPlatformStorage, 
  getPlatformAPIs,
  type PlatformInfo 
} from '../utils/platform';

interface PlatformDimensions {
  width: number;
  height: number;
  safeAreaTop: number;
  safeAreaBottom: number;
  safeAreaLeft: number;
  safeAreaRight: number;
}

interface PlatformStorage {
  getItem: (key: string) => Promise<string | null>;
  setItem: (key: string, value: string) => Promise<void>;
  removeItem: (key: string) => Promise<void>;
  clear: () => Promise<void>;
}

interface PlatformPermission {
  granted: boolean;
  denied: boolean;
  prompt: boolean;
}

interface PlatformNotification {
  id: string;
  title: string;
  body: string;
  data?: any;
  timestamp: number;
}
{{else}}
import { useState, useEffect, useCallback } from 'react';
import { 
  getPlatformInfo, 
  getPlatformDimensions, 
  getPlatformStorage, 
  getPlatformAPIs 
} from '../utils/platform';
{{/if}}

/**
 * Hook for platform detection and information
 */
{{#if typescript}}
export function usePlatform(): PlatformInfo {
{{else}}
export function usePlatform() {
{{/if}}
  const [platformInfo, setPlatformInfo] = useState(() => getPlatformInfo());

  useEffect(() => {
    // Update platform info if needed (e.g., orientation changes)
    const updatePlatformInfo = () => {
      setPlatformInfo(getPlatformInfo());
    };

    if (typeof window !== 'undefined') {
      window.addEventListener('resize', updatePlatformInfo);
      window.addEventListener('orientationchange', updatePlatformInfo);

      return () => {
        window.removeEventListener('resize', updatePlatformInfo);
        window.removeEventListener('orientationchange', updatePlatformInfo);
      };
    }
  }, []);

  return platformInfo;
}

/**
 * Hook for platform dimensions and safe areas
 */
{{#if typescript}}
export function usePlatformDimensions(): PlatformDimensions {
{{else}}
export function usePlatformDimensions() {
{{/if}}
  const [dimensions, setDimensions] = useState(() => getPlatformDimensions());
  const platformInfo = usePlatform();

  useEffect(() => {
    const updateDimensions = () => {
      setDimensions(getPlatformDimensions());
    };

    if (platformInfo.isReactNative) {
      // React Native dimension updates
      try {
        const { Dimensions } = require('react-native');
        const subscription = Dimensions.addEventListener('change', updateDimensions);
        return () => subscription?.remove();
      } catch {
        // Fallback for when React Native is not available
      }
    } else if (typeof window !== 'undefined') {
      // Web/Electron dimension updates
      window.addEventListener('resize', updateDimensions);
      window.addEventListener('orientationchange', updateDimensions);

      return () => {
        window.removeEventListener('resize', updateDimensions);
        window.removeEventListener('orientationchange', updateDimensions);
      };
    }
  }, [platformInfo]);

  return dimensions;
}

/**
 * Hook for cross-platform storage
 */
{{#if typescript}}
export function usePlatformStorage(): PlatformStorage {
{{else}}
export function usePlatformStorage() {
{{/if}}
  const storage = getPlatformStorage();

  return storage;
}

/**
 * Hook for platform-specific navigation
 */
{{#if typescript}}
export function usePlatformNavigation(): {
  navigate: (route: string, params?: any) => void;
  goBack: () => void;
  canGoBack: () => boolean;
  reset: (routes: string[]) => void;
} {
{{else}}
export function usePlatformNavigation() {
{{/if}}
  const platformInfo = usePlatform();

  const navigate = useCallback((route{{#if typescript}}: string{{/if}}, params{{#if typescript}}?: any{{/if}}) => {
    if (platformInfo.isReactNative) {
      // React Navigation
      try {
        const { useNavigation } = require('@react-navigation/native');
        const navigation = useNavigation();
        navigation.navigate(route, params);
      } catch {
        console.warn('React Navigation not available');
      }
    } else {
      // Web/Electron navigation
      if (typeof window !== 'undefined') {
        const url = params ? `${route}?${new URLSearchParams(params).toString()}` : route;
        window.history.pushState(null, '', url);
      }
    }
  }, [platformInfo]);

  const goBack = useCallback(() => {
    if (platformInfo.isReactNative) {
      try {
        const { useNavigation } = require('@react-navigation/native');
        const navigation = useNavigation();
        navigation.goBack();
      } catch {
        console.warn('React Navigation not available');
      }
    } else {
      if (typeof window !== 'undefined') {
        window.history.back();
      }
    }
  }, [platformInfo]);

  const canGoBack = useCallback((){{#if typescript}}: boolean{{/if}} => {
    if (platformInfo.isReactNative) {
      try {
        const { useNavigation } = require('@react-navigation/native');
        const navigation = useNavigation();
        return navigation.canGoBack();
      } catch {
        return false;
      }
    } else {
      return typeof window !== 'undefined' && window.history.length > 1;
    }
  }, [platformInfo]);

  const reset = useCallback((routes{{#if typescript}}: string[]{{/if}}) => {
    if (platformInfo.isReactNative) {
      try {
        const { useNavigation } = require('@react-navigation/native');
        const navigation = useNavigation();
        navigation.reset({
          index: routes.length - 1,
          routes: routes.map(route => ({ name: route })),
        });
      } catch {
        console.warn('React Navigation not available');
      }
    } else {
      if (typeof window !== 'undefined' && routes.length > 0) {
        window.history.replaceState(null, '', routes[routes.length - 1]);
      }
    }
  }, [platformInfo]);

  return {
    navigate,
    goBack,
    canGoBack,
    reset,
  };
}

/**
 * Hook for platform permissions
 */
{{#if typescript}}
export function usePlatformPermissions(): {
  checkPermission: (permission: string) => Promise<PlatformPermission>;
  requestPermission: (permission: string) => Promise<PlatformPermission>;
} {
{{else}}
export function usePlatformPermissions() {
{{/if}}
  const platformInfo = usePlatform();

  const checkPermission = useCallback(async (permission{{#if typescript}}: string{{/if}}){{#if typescript}}: Promise<PlatformPermission>{{/if}} => {
    if (platformInfo.isReactNative) {
      // React Native permissions
      try {
        const { PermissionsAndroid, Platform } = require('react-native');
        
        if (Platform.OS === 'android') {
          const result = await PermissionsAndroid.check(permission);
          return {
            granted: result,
            denied: !result,
            prompt: false,
          };
        } else {
          // iOS permissions would use different approach
          return {
            granted: true,
            denied: false,
            prompt: false,
          };
        }
      } catch {
        return {
          granted: false,
          denied: true,
          prompt: false,
        };
      }
    } else {
      // Web/Electron permissions
      if (typeof navigator !== 'undefined' && navigator.permissions) {
        try {
          const result = await navigator.permissions.query({ name: permission });
          return {
            granted: result.state === 'granted',
            denied: result.state === 'denied',
            prompt: result.state === 'prompt',
          };
        } catch {
          return {
            granted: false,
            denied: false,
            prompt: true,
          };
        }
      }
      
      return {
        granted: false,
        denied: false,
        prompt: true,
      };
    }
  }, [platformInfo]);

  const requestPermission = useCallback(async (permission{{#if typescript}}: string{{/if}}){{#if typescript}}: Promise<PlatformPermission>{{/if}} => {
    if (platformInfo.isReactNative) {
      // React Native permission request
      try {
        const { PermissionsAndroid, Platform } = require('react-native');
        
        if (Platform.OS === 'android') {
          const result = await PermissionsAndroid.request(permission);
          return {
            granted: result === PermissionsAndroid.RESULTS.GRANTED,
            denied: result === PermissionsAndroid.RESULTS.DENIED,
            prompt: result === PermissionsAndroid.RESULTS.NEVER_ASK_AGAIN,
          };
        } else {
          // iOS permissions
          return {
            granted: true,
            denied: false,
            prompt: false,
          };
        }
      } catch {
        return {
          granted: false,
          denied: true,
          prompt: false,
        };
      }
    } else {
      // Web permission request
      if (permission === 'notifications' && 'Notification' in window) {
        const result = await Notification.requestPermission();
        return {
          granted: result === 'granted',
          denied: result === 'denied',
          prompt: result === 'default',
        };
      }
      
      return {
        granted: false,
        denied: false,
        prompt: true,
      };
    }
  }, [platformInfo]);

  return {
    checkPermission,
    requestPermission,
  };
}

/**
 * Hook for cross-platform notifications
 */
{{#if typescript}}
export function usePlatformNotifications(): {
  showNotification: (notification: Omit<PlatformNotification, 'id' | 'timestamp'>) => Promise<void>;
  scheduleNotification: (notification: Omit<PlatformNotification, 'id' | 'timestamp'>, delay: number) => Promise<void>;
  cancelNotification: (id: string) => Promise<void>;
  clearAllNotifications: () => Promise<void>;
} {
{{else}}
export function usePlatformNotifications() {
{{/if}}
  const platformInfo = usePlatform();
  const { requestPermission } = usePlatformPermissions();

  const showNotification = useCallback(async (notification{{#if typescript}}: Omit<PlatformNotification, 'id' | 'timestamp'>{{/if}}) => {
    // Request permission first
    const permission = await requestPermission('notifications');
    if (!permission.granted) {
      throw new Error('Notification permission not granted');
    }

    if (platformInfo.isReactNative) {
      // React Native notifications
      try {
        const PushNotification = require('react-native-push-notification');
        PushNotification.localNotification({
          title: notification.title,
          message: notification.body,
          userInfo: notification.data,
        });
      } catch {
        console.warn('React Native push notifications not available');
      }
    } else {
      // Web notifications
      if ('Notification' in window) {
        new Notification(notification.title, {
          body: notification.body,
          data: notification.data,
          icon: '/icon-192x192.png',
        });
      }
    }
  }, [platformInfo, requestPermission]);

  const scheduleNotification = useCallback(async (
    notification{{#if typescript}}: Omit<PlatformNotification, 'id' | 'timestamp'>{{/if}}, 
    delay{{#if typescript}}: number{{/if}}
  ) => {
    if (platformInfo.isReactNative) {
      // React Native scheduled notifications
      try {
        const PushNotification = require('react-native-push-notification');
        PushNotification.localNotificationSchedule({
          title: notification.title,
          message: notification.body,
          userInfo: notification.data,
          date: new Date(Date.now() + delay),
        });
      } catch {
        console.warn('React Native scheduled notifications not available');
      }
    } else {
      // Web scheduled notifications (using setTimeout)
      setTimeout(() => {
        showNotification(notification);
      }, delay);
    }
  }, [platformInfo, showNotification]);

  const cancelNotification = useCallback(async (id{{#if typescript}}: string{{/if}}) => {
    if (platformInfo.isReactNative) {
      try {
        const PushNotification = require('react-native-push-notification');
        PushNotification.cancelLocalNotifications({ id });
      } catch {
        console.warn('React Native notification cancellation not available');
      }
    } else {
      // Web notifications don't have a built-in cancel mechanism
      console.warn('Web notification cancellation not supported');
    }
  }, [platformInfo]);

  const clearAllNotifications = useCallback(async () => {
    if (platformInfo.isReactNative) {
      try {
        const PushNotification = require('react-native-push-notification');
        PushNotification.cancelAllLocalNotifications();
      } catch {
        console.warn('React Native notification clearing not available');
      }
    } else {
      // Web notifications auto-clear
      console.log('Web notifications cleared');
    }
  }, [platformInfo]);

  return {
    showNotification,
    scheduleNotification,
    cancelNotification,
    clearAllNotifications,
  };
}

/**
 * Hook for platform-specific file system access
 */
{{#if typescript}}
export function usePlatformFileSystem(): {
  readFile: (path: string) => Promise<string>;
  writeFile: (path: string, content: string) => Promise<void>;
  deleteFile: (path: string) => Promise<void>;
  listFiles: (directory: string) => Promise<string[]>;
  pickFile: () => Promise<{ uri: string; name: string; type: string } | null>;
} {
{{else}}
export function usePlatformFileSystem() {
{{/if}}
  const platformInfo = usePlatform();

  const readFile = useCallback(async (path{{#if typescript}}: string{{/if}}){{#if typescript}}: Promise<string>{{/if}} => {
    if (platformInfo.isReactNative) {
      try {
        const RNFS = require('react-native-fs');
        return await RNFS.readFile(path, 'utf8');
      } catch (error) {
        throw new Error(`Failed to read file: ${error}`);
      }
    } else if (platformInfo.isElectron) {
      try {
        const fs = window.require('fs').promises;
        return await fs.readFile(path, 'utf8');
      } catch (error) {
        throw new Error(`Failed to read file: ${error}`);
      }
    } else {
      throw new Error('File system access not available on web platform');
    }
  }, [platformInfo]);

  const writeFile = useCallback(async (path{{#if typescript}}: string{{/if}}, content{{#if typescript}}: string{{/if}}) => {
    if (platformInfo.isReactNative) {
      try {
        const RNFS = require('react-native-fs');
        await RNFS.writeFile(path, content, 'utf8');
      } catch (error) {
        throw new Error(`Failed to write file: ${error}`);
      }
    } else if (platformInfo.isElectron) {
      try {
        const fs = window.require('fs').promises;
        await fs.writeFile(path, content, 'utf8');
      } catch (error) {
        throw new Error(`Failed to write file: ${error}`);
      }
    } else {
      throw new Error('File system access not available on web platform');
    }
  }, [platformInfo]);

  const deleteFile = useCallback(async (path{{#if typescript}}: string{{/if}}) => {
    if (platformInfo.isReactNative) {
      try {
        const RNFS = require('react-native-fs');
        await RNFS.unlink(path);
      } catch (error) {
        throw new Error(`Failed to delete file: ${error}`);
      }
    } else if (platformInfo.isElectron) {
      try {
        const fs = window.require('fs').promises;
        await fs.unlink(path);
      } catch (error) {
        throw new Error(`Failed to delete file: ${error}`);
      }
    } else {
      throw new Error('File system access not available on web platform');
    }
  }, [platformInfo]);

  const listFiles = useCallback(async (directory{{#if typescript}}: string{{/if}}){{#if typescript}}: Promise<string[]>{{/if}} => {
    if (platformInfo.isReactNative) {
      try {
        const RNFS = require('react-native-fs');
        const files = await RNFS.readDir(directory);
        return files.map((file{{#if typescript}}: any{{/if}}) => file.name);
      } catch (error) {
        throw new Error(`Failed to list files: ${error}`);
      }
    } else if (platformInfo.isElectron) {
      try {
        const fs = window.require('fs').promises;
        return await fs.readdir(directory);
      } catch (error) {
        throw new Error(`Failed to list files: ${error}`);
      }
    } else {
      throw new Error('File system access not available on web platform');
    }
  }, [platformInfo]);

  const pickFile = useCallback(async (){{#if typescript}}: Promise<{ uri: string; name: string; type: string } | null>{{/if}} => {
    if (platformInfo.isReactNative) {
      try {
        const DocumentPicker = require('react-native-document-picker');
        const result = await DocumentPicker.pick({
          type: [DocumentPicker.types.allFiles],
        });
        return result[0];
      } catch (error) {
        if (DocumentPicker.isCancel(error)) {
          return null;
        }
        throw new Error(`Failed to pick file: ${error}`);
      }
    } else if (platformInfo.isElectron) {
      try {
        const { dialog } = window.require('electron').remote;
        const result = await dialog.showOpenDialog({
          properties: ['openFile'],
        });
        
        if (!result.canceled && result.filePaths.length > 0) {
          const filePath = result.filePaths[0];
          const fileName = filePath.split('/').pop() || 'unknown';
          return {
            uri: filePath,
            name: fileName,
            type: 'file',
          };
        }
        return null;
      } catch (error) {
        throw new Error(`Failed to pick file: ${error}`);
      }
    } else {
      // Web file picker
      return new Promise((resolve) => {
        const input = document.createElement('input');
        input.type = 'file';
        input.onchange = (event{{#if typescript}}: any{{/if}}) => {
          const file = event.target.files[0];
          if (file) {
            resolve({
              uri: URL.createObjectURL(file),
              name: file.name,
              type: file.type,
            });
          } else {
            resolve(null);
          }
        };
        input.click();
      });
    }
  }, [platformInfo]);

  return {
    readFile,
    writeFile,
    deleteFile,
    listFiles,
    pickFile,
  };
}
