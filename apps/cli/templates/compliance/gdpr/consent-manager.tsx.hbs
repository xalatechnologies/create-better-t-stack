{{#if typescript}}'use client';{{/if}}

import React{{#if typescript}}, { type FC }{{/if}} from 'react';
import { 
  Box,
  Container,
  Stack, 
  Typography,
  Card,
  Button,
  Checkbox,
  Icon,
  Badge,
  Separator,
  Grid,
  Switch,
  Alert
} from '@xala-technologies/ui-system';
{{#if localization}}
import { useTranslation } from 'next-intl';
{{/if}}
{{#if state}}
import { useState, useEffect } from 'react';
{{/if}}

{{#if typescript}}
/**
 * GDPR Consent Purpose
 */
export interface ConsentPurpose {
  readonly id: string;
  readonly name: string;
  readonly description: string;
  readonly legalBasis: 'CONSENT' | 'LEGITIMATE_INTEREST';
  readonly required: boolean;
  readonly category: 'ESSENTIAL' | 'FUNCTIONAL' | 'ANALYTICS' | 'MARKETING';
  readonly dataTypes: string[];
  readonly retentionDays: number;
  readonly thirdParties?: string[];
}

/**
 * Consent Record
 */
export interface ConsentRecord {
  readonly purposeId: string;
  readonly granted: boolean;
  readonly timestamp: string;
  readonly method: 'EXPLICIT' | 'IMPLIED';
  readonly ipAddress?: string;
  readonly userAgent?: string;
  readonly withdrawnAt?: string;
}

/**
 * Consent Manager Props
 */
export interface {{capitalize componentName}}Props {
  readonly purposes: ConsentPurpose[];
  readonly currentConsents?: ConsentRecord[];
  readonly onConsentChange?: (purposeId: string, granted: boolean) => void;
  readonly onSaveConsents?: (consents: ConsentRecord[]) => Promise<void>;
  readonly showDetailedInfo?: boolean;
  readonly compactMode?: boolean;
  readonly locale?: 'nb' | 'en';
}
{{/if}}

/**
 * {{capitalize componentName}} - GDPR Consent Manager
 * Generated with Xaheen CLI
 * 
 * Features:
 * - GDPR Article 7 compliant consent management
 * - Granular consent control per purpose
 * - Clear information about data processing
 * - Easy consent withdrawal
 * - Audit trail for consent changes
 * - Norwegian localization support
 * - WCAG 2.2 AAA accessibility compliant
 * - Professional semantic components only
 */
const {{capitalize componentName}}{{#if typescript}}: FC<{{capitalize componentName}}Props>{{/if}} = ({
  purposes = [],
  currentConsents = [],
  onConsentChange,
  onSaveConsents,
  showDetailedInfo = true,
  compactMode = false,
  locale = 'nb'
}{{#if typescript}}: {{capitalize componentName}}Props{{/if}}) => {
  {{#if localization}}
  const { t } = useTranslation('consent');
  {{/if}}
  
  {{#if state}}
  const [consents, setConsents] = useState<Record<string, boolean>>(() => {
    const initial: Record<string, boolean> = {};
    purposes.forEach(purpose => {
      const existing = currentConsents.find(c => c.purposeId === purpose.id && !c.withdrawnAt);
      initial[purpose.id] = existing?.granted || false;
    });
    return initial;
  });

  const [isLoading, setIsLoading] = useState(false);
  const [showDetails, setShowDetails] = useState<Record<string, boolean>>({});
  const [hasChanges, setHasChanges] = useState(false);
  {{/if}}

  {{#if state}}
  // Track changes
  useEffect(() => {
    const hasAnyChanges = purposes.some(purpose => {
      const existing = currentConsents.find(c => c.purposeId === purpose.id && !c.withdrawnAt);
      const currentValue = consents[purpose.id] || false;
      const existingValue = existing?.granted || false;
      return currentValue !== existingValue;
    });
    setHasChanges(hasAnyChanges);
  }, [consents, currentConsents, purposes]);

  const handleConsentToggle = (purposeId: string, granted: boolean) => {
    setConsents(prev => ({ ...prev, [purposeId]: granted }));
    onConsentChange?.(purposeId, granted);
  };

  const handleSaveConsents = async () => {
    if (!onSaveConsents) return;

    setIsLoading(true);
    try {
      const consentRecords: ConsentRecord[] = purposes.map(purpose => ({
        purposeId: purpose.id,
        granted: consents[purpose.id] || false,
        timestamp: new Date().toISOString(),
        method: 'EXPLICIT',
        ipAddress: undefined, // Would be populated by backend
        userAgent: navigator.userAgent,
      }));

      await onSaveConsents(consentRecords);
      setHasChanges(false);
    } catch (error) {
      console.error('Failed to save consents:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const toggleDetails = (purposeId: string) => {
    setShowDetails(prev => ({ ...prev, [purposeId]: !prev[purposeId] }));
  };
  {{/if}}

  const getCategoryIcon = (category: string) => {
    const iconMap: Record<string, string> = {
      'ESSENTIAL': 'shield-check',
      'FUNCTIONAL': 'settings',
      'ANALYTICS': 'bar-chart',
      'MARKETING': 'target',
    };
    return iconMap[category] || 'info';
  };

  const getCategoryColor = (category: string) => {
    const colorMap: Record<string, string> = {
      'ESSENTIAL': 'success',
      'FUNCTIONAL': 'primary',
      'ANALYTICS': 'secondary',
      'MARKETING': 'warning',
    };
    return colorMap[category] || 'muted';
  };

  const essentialPurposes = purposes.filter(p => p.category === 'ESSENTIAL');
  const optionalPurposes = purposes.filter(p => p.category !== 'ESSENTIAL');

  return (
    <Box variant="section">
      <Container>
        <Stack spacing="8">
          {/* Header */}
          <Stack spacing="4" align="center">
            <Typography variant="heading" size="2xl" weight="bold" align="center">
              {{#if localization}}
              {t('title', 'Personverninnstillinger')}
              {{else}}
              Personverninnstillinger
              {{/if}}
            </Typography>
            
            <Typography variant="body" size="lg" color="muted" align="center" maxWidth="2xl">
              {{#if localization}}
              {t('description', 'Vi respekterer ditt personvern. Du kan velge hvilke typer data vi kan behandle og til hvilke formål. Du kan når som helst endre eller trekke tilbake ditt samtykke.')}
              {{else}}
              Vi respekterer ditt personvern. Du kan velge hvilke typer data vi kan behandle og til hvilke formål. Du kan når som helst endre eller trekke tilbake ditt samtykke.
              {{/if}}
            </Typography>
          </Stack>

          {/* GDPR Rights Information */}
          <Card variant="info" spacing="6">
            <Stack spacing="4">
              <Stack direction="horizontal" align="center" spacing="3">
                <Icon name="shield-check" size="md" color="primary" />
                <Typography variant="heading" size="lg" weight="semibold">
                  {{#if localization}}
                  {t('rights.title', 'Dine rettigheter')}
                  {{else}}
                  Dine rettigheter
                  {{/if}}
                </Typography>
              </Stack>
              
              <Typography variant="body" size="md" color="muted">
                {{#if localization}}
                {t('rights.description', 'I henhold til GDPR har du rett til innsyn, retting, sletting, begrensning, dataportabilitet og innsigelse. Du kan når som helst trekke tilbake ditt samtykke uten at det påvirker lovligheten av behandlingen basert på samtykke før tilbaketrekkingen.')}
                {{else}}
                I henhold til GDPR har du rett til innsyn, retting, sletting, begrensning, dataportabilitet og innsigelse. Du kan når som helst trekke tilbake ditt samtykke uten at det påvirker lovligheten av behandlingen basert på samtykke før tilbaketrekkingen.
                {{/if}}
              </Typography>
            </Stack>
          </Card>

          {/* Essential Purposes */}
          {essentialPurposes.length > 0 && (
            <Stack spacing="6">
              <Stack spacing="2">
                <Typography variant="heading" size="xl" weight="semibold">
                  {{#if localization}}
                  {t('essential.title', 'Nødvendige tjenester')}
                  {{else}}
                  Nødvendige tjenester
                  {{/if}}
                </Typography>
                <Typography variant="body" size="md" color="muted">
                  {{#if localization}}
                  {t('essential.description', 'Disse tjenestene er nødvendige for at nettsiden skal fungere og kan ikke deaktiveres.')}
                  {{else}}
                  Disse tjenestene er nødvendige for at nettsiden skal fungere og kan ikke deaktiveres.
                  {{/if}}
                </Typography>
              </Stack>

              <Stack spacing="4">
                {essentialPurposes.map((purpose) => (
                  <Card key={purpose.id} variant="outlined" spacing="6">
                    <Stack spacing="4">
                      <Stack direction="horizontal" justify="between" align="center">
                        <Stack direction="horizontal" align="center" spacing="4">
                          <Icon 
                            name={getCategoryIcon(purpose.category)} 
                            size="md" 
                            color={getCategoryColor(purpose.category)}
                          />
                          
                          <Stack spacing="1">
                            <Typography variant="heading" size="md" weight="semibold">
                              {purpose.name}
                            </Typography>
                            <Badge variant={getCategoryColor(purpose.category)} size="sm">
                              {{#if localization}}
                              {t('categories.essential', 'Nødvendig')}
                              {{else}}
                              Nødvendig
                              {{/if}}
                            </Badge>
                          </Stack>
                        </Stack>

                        <Stack direction="horizontal" align="center" spacing="3">
                          <Typography variant="body" size="sm" color="success" weight="medium">
                            {{#if localization}}
                            {t('status.active', 'Aktiv')}
                            {{else}}
                            Aktiv
                            {{/if}}
                          </Typography>
                          <Icon name="check-circle" size="sm" color="success" />
                        </Stack>
                      </Stack>

                      <Typography variant="body" size="md" color="muted">
                        {purpose.description}
                      </Typography>

                      {showDetailedInfo && (
                        <Stack spacing="3">
                          <Button
                            variant="link"
                            size="sm"
                            onClick={() => toggleDetails(purpose.id)}
                            justify="start"
                          >
                            <Stack direction="horizontal" align="center" spacing="2">
                              <Icon 
                                name={showDetails[purpose.id] ? "chevron-up" : "chevron-down"} 
                                size="sm" 
                              />
                              <Typography variant="body" size="sm">
                                {{#if localization}}
                                {t('showDetails', 'Vis detaljer')}
                                {{else}}
                                Vis detaljer
                                {{/if}}
                              </Typography>
                            </Stack>
                          </Button>

                          {showDetails[purpose.id] && (
                            <Card variant="subtle" spacing="4">
                              <Stack spacing="3">
                                <Stack spacing="2">
                                  <Typography variant="body" size="sm" weight="medium">
                                    {{#if localization}}
                                    {t('details.dataTypes', 'Datatyper:')}
                                    {{else}}
                                    Datatyper:
                                    {{/if}}
                                  </Typography>
                                  <Typography variant="body" size="sm" color="muted">
                                    {purpose.dataTypes.join(', ')}
                                  </Typography>
                                </Stack>

                                <Stack spacing="2">
                                  <Typography variant="body" size="sm" weight="medium">
                                    {{#if localization}}
                                    {t('details.retention', 'Oppbevaringstid:')}
                                    {{else}}
                                    Oppbevaringstid:
                                    {{/if}}
                                  </Typography>
                                  <Typography variant="body" size="sm" color="muted">
                                    {purpose.retentionDays} {{#if localization}}{t('days', 'dager')}{{else}}dager{{/if}}
                                  </Typography>
                                </Stack>

                                <Stack spacing="2">
                                  <Typography variant="body" size="sm" weight="medium">
                                    {{#if localization}}
                                    {t('details.legalBasis', 'Rettsgrunnlag:')}
                                    {{else}}
                                    Rettsgrunnlag:
                                    {{/if}}
                                  </Typography>
                                  <Typography variant="body" size="sm" color="muted">
                                    {purpose.legalBasis === 'CONSENT' ? 
                                      {{#if localization}}t('legalBasis.consent', 'Samtykke'){{else}}'Samtykke'{{/if}} : 
                                      {{#if localization}}t('legalBasis.legitimateInterest', 'Berettiget interesse'){{else}}'Berettiget interesse'{{/if}}
                                    }
                                  </Typography>
                                </Stack>
                              </Stack>
                            </Card>
                          )}
                        </Stack>
                      )}
                    </Stack>
                  </Card>
                ))}
              </Stack>
            </Stack>
          )}

          {/* Optional Purposes */}
          {optionalPurposes.length > 0 && (
            <Stack spacing="6">
              <Separator />
              
              <Stack spacing="2">
                <Typography variant="heading" size="xl" weight="semibold">
                  {{#if localization}}
                  {t('optional.title', 'Valgfrie tjenester')}
                  {{else}}
                  Valgfrie tjenester
                  {{/if}}
                </Typography>
                <Typography variant="body" size="md" color="muted">
                  {{#if localization}}
                  {t('optional.description', 'Du kan velge å aktivere eller deaktivere disse tjenestene basert på dine preferanser.')}
                  {{else}}
                  Du kan velge å aktivere eller deaktivere disse tjenestene basert på dine preferanser.
                  {{/if}}
                </Typography>
              </Stack>

              <Stack spacing="4">
                {optionalPurposes.map((purpose) => (
                  <Card key={purpose.id} variant="outlined" spacing="6">
                    <Stack spacing="4">
                      <Stack direction="horizontal" justify="between" align="center">
                        <Stack direction="horizontal" align="center" spacing="4">
                          <Icon 
                            name={getCategoryIcon(purpose.category)} 
                            size="md" 
                            color={getCategoryColor(purpose.category)}
                          />
                          
                          <Stack spacing="1">
                            <Typography variant="heading" size="md" weight="semibold">
                              {purpose.name}
                            </Typography>
                            <Badge variant={getCategoryColor(purpose.category)} size="sm">
                              {{#if localization}}
                              {t(`categories.${purpose.category.toLowerCase()}`, purpose.category)}
                              {{else}}
                              {purpose.category}
                              {{/if}}
                            </Badge>
                          </Stack>
                        </Stack>

                        <Switch
                          checked={consents[purpose.id] || false}
                          onCheckedChange={(checked) => handleConsentToggle(purpose.id, checked)}
                          aria-label={`${{{#if localization}}t('toggle', 'Aktiver/deaktiver'){{else}}'Aktiver/deaktiver'{{/if}}} ${purpose.name}`}
                        />
                      </Stack>

                      <Typography variant="body" size="md" color="muted">
                        {purpose.description}
                      </Typography>

                      {purpose.thirdParties && purpose.thirdParties.length > 0 && (
                        <Alert variant="info" spacing="3">
                          <Stack direction="horizontal" align="center" spacing="2">
                            <Icon name="users" size="sm" color="primary" />
                            <Typography variant="body" size="sm">
                              {{#if localization}}
                              {t('thirdParties', 'Deles med tredjeparter:')} {purpose.thirdParties.join(', ')}
                              {{else}}
                              Deles med tredjeparter: {purpose.thirdParties.join(', ')}
                              {{/if}}
                            </Typography>
                          </Stack>
                        </Alert>
                      )}

                      {showDetailedInfo && (
                        <Stack spacing="3">
                          <Button
                            variant="link"
                            size="sm"
                            onClick={() => toggleDetails(purpose.id)}
                            justify="start"
                          >
                            <Stack direction="horizontal" align="center" spacing="2">
                              <Icon 
                                name={showDetails[purpose.id] ? "chevron-up" : "chevron-down"} 
                                size="sm" 
                              />
                              <Typography variant="body" size="sm">
                                {{#if localization}}
                                {t('showDetails', 'Vis detaljer')}
                                {{else}}
                                Vis detaljer
                                {{/if}}
                              </Typography>
                            </Stack>
                          </Button>

                          {showDetails[purpose.id] && (
                            <Card variant="subtle" spacing="4">
                              <Stack spacing="3">
                                <Stack spacing="2">
                                  <Typography variant="body" size="sm" weight="medium">
                                    {{#if localization}}
                                    {t('details.dataTypes', 'Datatyper:')}
                                    {{else}}
                                    Datatyper:
                                    {{/if}}
                                  </Typography>
                                  <Typography variant="body" size="sm" color="muted">
                                    {purpose.dataTypes.join(', ')}
                                  </Typography>
                                </Stack>

                                <Stack spacing="2">
                                  <Typography variant="body" size="sm" weight="medium">
                                    {{#if localization}}
                                    {t('details.retention', 'Oppbevaringstid:')}
                                    {{else}}
                                    Oppbevaringstid:
                                    {{/if}}
                                  </Typography>
                                  <Typography variant="body" size="sm" color="muted">
                                    {purpose.retentionDays} {{#if localization}}{t('days', 'dager')}{{else}}dager{{/if}}
                                  </Typography>
                                </Stack>

                                <Stack spacing="2">
                                  <Typography variant="body" size="sm" weight="medium">
                                    {{#if localization}}
                                    {t('details.legalBasis', 'Rettsgrunnlag:')}
                                    {{else}}
                                    Rettsgrunnlag:
                                    {{/if}}
                                  </Typography>
                                  <Typography variant="body" size="sm" color="muted">
                                    {purpose.legalBasis === 'CONSENT' ? 
                                      {{#if localization}}t('legalBasis.consent', 'Samtykke'){{else}}'Samtykke'{{/if}} : 
                                      {{#if localization}}t('legalBasis.legitimateInterest', 'Berettiget interesse'){{else}}'Berettiget interesse'{{/if}}
                                    }
                                  </Typography>
                                </Stack>
                              </Stack>
                            </Card>
                          )}
                        </Stack>
                      )}
                    </Stack>
                  </Card>
                ))}
              </Stack>
            </Stack>
          )}

          {/* Action Buttons */}
          {hasChanges && (
            <Card variant="elevated" spacing="6">
              <Stack spacing="4">
                <Typography variant="heading" size="md" weight="semibold">
                  {{#if localization}}
                  {t('changes.title', 'Du har ulagrede endringer')}
                  {{else}}
                  Du har ulagrede endringer
                  {{/if}}
                </Typography>
                
                <Stack direction="horizontal" spacing="4">
                  <Button
                    variant="primary"
                    size="lg"
                    onClick={handleSaveConsents}
                    disabled={isLoading}
                  >
                    {isLoading && <Icon name="loader" variant="spinner" />}
                    {{#if localization}}
                    {t('actions.save', 'Lagre innstillinger')}
                    {{else}}
                    Lagre innstillinger
                    {{/if}}
                  </Button>
                  
                  <Button
                    variant="secondary"
                    size="lg"
                    onClick={() => {
                      // Reset to current consents
                      const resetConsents: Record<string, boolean> = {};
                      purposes.forEach(purpose => {
                        const existing = currentConsents.find(c => c.purposeId === purpose.id && !c.withdrawnAt);
                        resetConsents[purpose.id] = existing?.granted || false;
                      });
                      setConsents(resetConsents);
                    }}
                  >
                    {{#if localization}}
                    {t('actions.cancel', 'Avbryt')}
                    {{else}}
                    Avbryt
                    {{/if}}
                  </Button>
                </Stack>
              </Stack>
            </Card>
          )}

          {/* Footer Information */}
          <Stack spacing="4" paddingTop="8">
            <Separator />
            
            <Stack spacing="3" align="center">
              <Typography variant="caption" size="sm" color="muted" align="center">
                {{#if localization}}
                {t('footer.compliance', 'Denne løsningen er i samsvar med GDPR (EU 2016/679) og norsk personopplysningslov.')}
                {{else}}
                Denne løsningen er i samsvar med GDPR (EU 2016/679) og norsk personopplysningslov.
                {{/if}}
              </Typography>
              
              <Stack direction="horizontal" justify="center" spacing="4">
                <Button variant="link" size="sm">
                  {{#if localization}}
                  {t('links.privacy', 'Personvernpolicy')}
                  {{else}}
                  Personvernpolicy
                  {{/if}}
                </Button>
                <Button variant="link" size="sm">
                  {{#if localization}}
                  {t('links.contact', 'Kontakt oss')}
                  {{else}}
                  Kontakt oss
                  {{/if}}
                </Button>
                <Button variant="link" size="sm">
                  {{#if localization}}
                  {t('links.rights', 'Dine rettigheter')}
                  {{else}}
                  Dine rettigheter
                  {{/if}}
                </Button>
              </Stack>
            </Stack>
          </Stack>
        </Stack>
      </Container>
    </Box>
  );
};

export default {{capitalize componentName}};

{{#if includeExamples}}
// Example usage:
/*
const consentPurposes = [
  {
    id: 'essential-functionality',
    name: 'Grunnleggende funksjonalitet',
    description: 'Nødvendig for at nettsiden skal fungere',
    legalBasis: 'LEGITIMATE_INTEREST',
    required: true,
    category: 'ESSENTIAL',
    dataTypes: ['Session data', 'Preferences'],
    retentionDays: 30,
  },
  {
    id: 'analytics',
    name: 'Analyse og statistikk',
    description: 'Hjelper oss å forbedre nettsiden',
    legalBasis: 'CONSENT',
    required: false,
    category: 'ANALYTICS',
    dataTypes: ['Usage data', 'Performance metrics'],
    retentionDays: 365,
    thirdParties: ['Google Analytics'],
  },
];

<{{capitalize componentName}}
  purposes={consentPurposes}
  currentConsents={existingConsents}
  onConsentChange={(purposeId, granted) => {
    console.log(`Consent ${granted ? 'granted' : 'withdrawn'} for ${purposeId}`);
  }}
  onSaveConsents={async (consents) => {
    await saveConsentsToBackend(consents);
  }}
  showDetailedInfo={true}
  locale="nb"
/>
*/
{{/if}}
