{{#if typescript}}'use client';{{/if}}

/**
 * {{capitalize handlerName}} - GDPR Data Handler
 * Generated with Xaheen CLI
 * 
 * Features:
 * - Full GDPR Article compliance (6, 7, 17, 20, etc.)
 * - Data subject rights implementation
 * - Consent management and tracking
 * - Data portability and export
 * - Right to erasure (right to be forgotten)
 * - Data breach notification
 * - Professional TypeScript patterns
 * - Norwegian localization support
 */

{{#if typescript}}
/**
 * GDPR Legal Basis (Article 6)
 */
export type GDPRLegalBasis = 
  | 'CONSENT'           // Art. 6(1)(a) - Samtykke
  | 'CONTRACT'          // Art. 6(1)(b) - Kontrakt
  | 'LEGAL_OBLIGATION'  // Art. 6(1)(c) - Rettslig forpliktelse
  | 'VITAL_INTERESTS'   // Art. 6(1)(d) - Vitale interesser
  | 'PUBLIC_TASK'       // Art. 6(1)(e) - Offentlig oppgave
  | 'LEGITIMATE_INTEREST'; // Art. 6(1)(f) - Berettiget interesse

/**
 * Data Subject Rights (GDPR Chapter III)
 */
export type DataSubjectRight = 
  | 'ACCESS'           // Art. 15 - Rett til innsyn
  | 'RECTIFICATION'    // Art. 16 - Rett til retting
  | 'ERASURE'          // Art. 17 - Rett til sletting
  | 'RESTRICT'         // Art. 18 - Rett til begrensning
  | 'PORTABILITY'      // Art. 20 - Rett til dataportabilitet
  | 'OBJECT'           // Art. 21 - Rett til innsigelse
  | 'WITHDRAW_CONSENT'; // Art. 7(3) - Tilbaketrekking av samtykke

/**
 * Data Categories for Processing
 */
export type DataCategory = 
  | 'PERSONAL'         // Personopplysninger
  | 'SENSITIVE'        // Sensitive personopplysninger
  | 'SPECIAL'          // SÃ¦rlige kategorier (Art. 9)
  | 'CRIMINAL'         // Straffbare forhold (Art. 10)
  | 'BIOMETRIC'        // Biometriske data
  | 'HEALTH'           // Helsedata
  | 'GENETIC';         // Genetiske data

/**
 * Processing Purpose
 */
export interface ProcessingPurpose {
  readonly id: string;
  readonly name: string;
  readonly description: string;
  readonly legalBasis: GDPRLegalBasis;
  readonly dataCategories: DataCategory[];
  readonly retentionPeriod: number; // days
  readonly isEssential: boolean;
  readonly consentRequired: boolean;
}

/**
 * Consent Record (Article 7)
 */
export interface ConsentRecord {
  readonly id: string;
  readonly subjectId: string;
  readonly purposeId: string;
  readonly granted: boolean;
  readonly timestamp: string;
  readonly method: 'EXPLICIT' | 'IMPLIED' | 'OPT_IN' | 'OPT_OUT';
  readonly ipAddress?: string;
  readonly userAgent?: string;
  readonly withdrawnAt?: string;
  readonly withdrawalReason?: string;
}

/**
 * Data Processing Record (Article 30)
 */
export interface ProcessingRecord {
  readonly id: string;
  readonly timestamp: string;
  readonly subjectId: string;
  readonly operation: 'CREATE' | 'READ' | 'UPDATE' | 'DELETE' | 'EXPORT' | 'ANONYMIZE';
  readonly dataCategory: DataCategory;
  readonly purpose: ProcessingPurpose;
  readonly legalBasis: GDPRLegalBasis;
  readonly processorId: string;
  readonly location: string; // Data processing location
  readonly encrypted: boolean;
  readonly retention: {
    readonly expiresAt: string;
    readonly anonymizeAfterExpiry: boolean;
  };
}

/**
 * Data Subject Request
 */
export interface DataSubjectRequest {
  readonly id: string;
  readonly subjectId: string;
  readonly type: DataSubjectRight;
  readonly status: 'PENDING' | 'IN_PROGRESS' | 'COMPLETED' | 'REJECTED';
  readonly requestedAt: string;
  readonly completedAt?: string;
  readonly reason?: string;
  readonly verificationMethod: 'EMAIL' | 'PHONE' | 'ID_DOCUMENT' | 'BANKID';
  readonly verifiedAt?: string;
  readonly responseData?: unknown;
  readonly rejectionReason?: string;
}

/**
 * Data Breach Incident (Article 33-34)
 */
export interface DataBreachIncident {
  readonly id: string;
  readonly detectedAt: string;
  readonly reportedAt?: string;
  readonly type: 'CONFIDENTIALITY' | 'INTEGRITY' | 'AVAILABILITY';
  readonly severity: 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL';
  readonly affectedSubjects: number;
  readonly dataCategories: DataCategory[];
  readonly description: string;
  readonly containmentActions: string[];
  readonly notificationRequired: boolean;
  readonly authorityNotified: boolean;
  readonly subjectsNotified: boolean;
  readonly riskAssessment: {
    readonly likelihood: 'LOW' | 'MEDIUM' | 'HIGH';
    readonly impact: 'LOW' | 'MEDIUM' | 'HIGH';
    readonly overallRisk: 'LOW' | 'MEDIUM' | 'HIGH';
  };
}

/**
 * GDPR Handler Configuration
 */
export interface GDPRHandlerConfig {
  readonly organizationName: string;
  readonly dataProtectionOfficer: {
    readonly name: string;
    readonly email: string;
    readonly phone: string;
  };
  readonly supervisoryAuthority: {
    readonly name: string;
    readonly email: string;
    readonly reportingUrl: string;
  };
  readonly defaultRetentionDays: number;
  readonly breachNotificationHours: number; // 72 hours by law
  readonly subjectRequestResponseDays: number; // 30 days by law
  readonly encryptionRequired: boolean;
  readonly auditingEnabled: boolean;
}

/**
 * Handler Response
 */
export interface GDPRResponse<T = unknown> {
  readonly success: boolean;
  readonly data?: T;
  readonly error?: {
    readonly code: string;
    readonly message: string;
    readonly details?: Record<string, unknown>;
  };
  readonly compliance: {
    readonly articleCompliance: string[];
    readonly legalBasisValidated: boolean;
    readonly consentObtained: boolean;
    readonly auditLogged: boolean;
  };
}
{{/if}}

/**
 * GDPR Data Handler Class
 */
export class {{capitalize handlerName}} {
  private readonly config: {{#if typescript}}GDPRHandlerConfig{{else}}any{{/if}};
  private readonly processingRecords: {{#if typescript}}ProcessingRecord[]{{else}}any[]{{/if}} = [];
  private readonly consentRecords: {{#if typescript}}ConsentRecord[]{{else}}any[]{{/if}} = [];
  private readonly subjectRequests: {{#if typescript}}DataSubjectRequest[]{{else}}any[]{{/if}} = [];
  private readonly breachIncidents: {{#if typescript}}DataBreachIncident[]{{else}}any[]{{/if}} = [];

  constructor(config: {{#if typescript}}GDPRHandlerConfig{{else}}any{{/if}}) {
    this.config = config;
    this.validateConfiguration();
  }

  /**
   * Validate GDPR handler configuration
   */
  private validateConfiguration(): void {
    if (!this.config.organizationName) {
      throw new Error('Organization name is required for GDPR compliance');
    }

    if (!this.config.dataProtectionOfficer?.email) {
      throw new Error('Data Protection Officer contact is required');
    }

    if (!this.config.supervisoryAuthority?.email) {
      throw new Error('Supervisory Authority contact is required');
    }

    if (this.config.breachNotificationHours > 72) {
      console.warn('GDPR requires breach notification within 72 hours');
    }

    if (this.config.subjectRequestResponseDays > 30) {
      console.warn('GDPR requires response to subject requests within 30 days');
    }
  }

  /**
   * Process data with GDPR compliance (Article 6)
   */
  async processPersonalData<T>(
    operation: 'CREATE' | 'READ' | 'UPDATE' | 'DELETE' | 'EXPORT',
    data: T,
    options: {
      readonly subjectId: string;
      readonly purpose: {{#if typescript}}ProcessingPurpose{{else}}any{{/if}};
      readonly dataCategory: {{#if typescript}}DataCategory{{else}}string{{/if}};
      readonly processorId: string;
      readonly location?: string;
    }
  ): Promise<{{#if typescript}}GDPRResponse<T>{{else}}any{{/if}}> {
    try {
      // Step 1: Validate legal basis (Article 6)
      const legalBasisValid = await this.validateLegalBasis(options.purpose, options.dataCategory);
      if (!legalBasisValid) {
        return this.createErrorResponse('INVALID_LEGAL_BASIS', 'No valid legal basis for processing');
      }

      // Step 2: Check consent if required (Article 7)
      let consentObtained = true;
      if (options.purpose.consentRequired) {
        consentObtained = await this.hasValidConsent(options.subjectId, options.purpose.id);
        if (!consentObtained) {
          return this.createErrorResponse('CONSENT_REQUIRED', 'Valid consent required for processing');
        }
      }

      // Step 3: Validate special category data (Article 9)
      if (this.isSpecialCategoryData(options.dataCategory)) {
        const specialProcessingAllowed = await this.validateSpecialCategoryProcessing(
          options.dataCategory, 
          options.purpose
        );
        if (!specialProcessingAllowed) {
          return this.createErrorResponse('SPECIAL_CATEGORY_FORBIDDEN', 'Special category data processing not allowed');
        }
      }

      // Step 4: Execute the processing
      const result = await this.executeProcessing(operation, data, options);

      // Step 5: Log processing record (Article 30)
      await this.logProcessingRecord({
        id: this.generateId(),
        timestamp: new Date().toISOString(),
        subjectId: options.subjectId,
        operation,
        dataCategory: options.dataCategory,
        purpose: options.purpose,
        legalBasis: options.purpose.legalBasis,
        processorId: options.processorId,
        location: options.location || 'Norway',
        encrypted: this.config.encryptionRequired,
        retention: {
          expiresAt: new Date(Date.now() + options.purpose.retentionPeriod * 24 * 60 * 60 * 1000).toISOString(),
          anonymizeAfterExpiry: !options.purpose.isEssential,
        },
      });

      return {
        success: true,
        data: result,
        compliance: {
          articleCompliance: ['Article 6', 'Article 7', 'Article 30'],
          legalBasisValidated: true,
          consentObtained,
          auditLogged: true,
        },
      };

    } catch (error) {
      return this.createErrorResponse(
        'PROCESSING_ERROR',
        error instanceof Error ? error.message : 'Unknown processing error'
      );
    }
  }

  /**
   * Handle data subject rights requests (Articles 15-22)
   */
  async handleSubjectRequest(
    subjectId: string,
    requestType: {{#if typescript}}DataSubjectRight{{else}}string{{/if}},
    verificationMethod: string = 'EMAIL'
  ): Promise<{{#if typescript}}GDPRResponse<DataSubjectRequest>{{else}}any{{/if}}> {
    const request: {{#if typescript}}DataSubjectRequest{{else}}any{{/if}} = {
      id: this.generateId(),
      subjectId,
      type: requestType,
      status: 'PENDING',
      requestedAt: new Date().toISOString(),
      verificationMethod: verificationMethod as any,
    };

    this.subjectRequests.push(request);

    try {
      let responseData: unknown;

      switch (requestType) {
        case 'ACCESS':
          responseData = await this.handleAccessRequest(subjectId);
          break;
        case 'RECTIFICATION':
          responseData = await this.handleRectificationRequest(subjectId);
          break;
        case 'ERASURE':
          responseData = await this.handleErasureRequest(subjectId);
          break;
        case 'RESTRICT':
          responseData = await this.handleRestrictionRequest(subjectId);
          break;
        case 'PORTABILITY':
          responseData = await this.handlePortabilityRequest(subjectId);
          break;
        case 'OBJECT':
          responseData = await this.handleObjectionRequest(subjectId);
          break;
        case 'WITHDRAW_CONSENT':
          responseData = await this.handleConsentWithdrawal(subjectId);
          break;
        default:
          throw new Error(`Unsupported request type: ${requestType}`);
      }

      // Update request status
      request.status = 'COMPLETED';
      request.completedAt = new Date().toISOString();
      request.responseData = responseData;

      return {
        success: true,
        data: request,
        compliance: {
          articleCompliance: this.getArticleComplianceForRequest(requestType),
          legalBasisValidated: true,
          consentObtained: true,
          auditLogged: true,
        },
      };

    } catch (error) {
      request.status = 'REJECTED';
      request.rejectionReason = error instanceof Error ? error.message : 'Unknown error';

      return this.createErrorResponse(
        'REQUEST_FAILED',
        `Failed to process ${requestType} request: ${request.rejectionReason}`
      );
    }
  }

  /**
   * Handle data access request (Article 15)
   */
  private async handleAccessRequest(subjectId: string): Promise<unknown> {
    const subjectData = {
      personalData: await this.getPersonalData(subjectId),
      processingRecords: this.processingRecords.filter(r => r.subjectId === subjectId),
      consentRecords: this.consentRecords.filter(r => r.subjectId === subjectId),
      dataRetention: await this.getRetentionInfo(subjectId),
      thirdPartySharing: await this.getThirdPartySharing(subjectId),
    };

    return subjectData;
  }

  /**
   * Handle data rectification request (Article 16)
   */
  private async handleRectificationRequest(subjectId: string): Promise<unknown> {
    // In a real implementation, this would update incorrect data
    return { message: 'Data rectification process initiated', subjectId };
  }

  /**
   * Handle data erasure request (Article 17)
   */
  private async handleErasureRequest(subjectId: string): Promise<unknown> {
    // Check if erasure is legally required
    const canErase = await this.canEraseData(subjectId);
    
    if (!canErase) {
      throw new Error('Data cannot be erased due to legal obligations or legitimate interests');
    }

    // In a real implementation, this would delete/anonymize the data
    return { message: 'Data erasure process initiated', subjectId };
  }

  /**
   * Handle data restriction request (Article 18)
   */
  private async handleRestrictionRequest(subjectId: string): Promise<unknown> {
    // In a real implementation, this would restrict processing
    return { message: 'Data processing restriction applied', subjectId };
  }

  /**
   * Handle data portability request (Article 20)
   */
  private async handlePortabilityRequest(subjectId: string): Promise<unknown> {
    const portableData = await this.getPortableData(subjectId);
    
    return {
      format: 'JSON',
      data: portableData,
      exportedAt: new Date().toISOString(),
      subjectId,
    };
  }

  /**
   * Handle objection request (Article 21)
   */
  private async handleObjectionRequest(subjectId: string): Promise<unknown> {
    // In a real implementation, this would stop processing based on legitimate interests
    return { message: 'Processing objection recorded', subjectId };
  }

  /**
   * Handle consent withdrawal (Article 7(3))
   */
  private async handleConsentWithdrawal(subjectId: string): Promise<unknown> {
    // Withdraw all consents for the subject
    const withdrawnConsents = this.consentRecords
      .filter(r => r.subjectId === subjectId && r.granted && !r.withdrawnAt)
      .map(consent => {
        consent.withdrawnAt = new Date().toISOString();
        consent.withdrawalReason = 'Subject request';
        return consent;
      });

    return { message: 'Consent withdrawn', withdrawnConsents: withdrawnConsents.length };
  }

  /**
   * Report data breach (Articles 33-34)
   */
  async reportDataBreach(
    incident: Omit<{{#if typescript}}DataBreachIncident{{else}}any{{/if}}, 'id' | 'detectedAt'>
  ): Promise<{{#if typescript}}GDPRResponse<DataBreachIncident>{{else}}any{{/if}}> {
    const breach: {{#if typescript}}DataBreachIncident{{else}}any{{/if}} = {
      id: this.generateId(),
      detectedAt: new Date().toISOString(),
      ...incident,
    };

    this.breachIncidents.push(breach);

    try {
      // Assess if notification is required (Article 33)
      if (breach.riskAssessment.overallRisk !== 'LOW') {
        breach.notificationRequired = true;
        
        // Notify supervisory authority within 72 hours
        if (breach.authorityNotified !== true) {
          await this.notifySupervisoryAuthority(breach);
          breach.authorityNotified = true;
          breach.reportedAt = new Date().toISOString();
        }

        // Notify affected data subjects if high risk (Article 34)
        if (breach.riskAssessment.overallRisk === 'HIGH') {
          await this.notifyAffectedSubjects(breach);
          breach.subjectsNotified = true;
        }
      }

      return {
        success: true,
        data: breach,
        compliance: {
          articleCompliance: ['Article 33', 'Article 34'],
          legalBasisValidated: true,
          consentObtained: true,
          auditLogged: true,
        },
      };

    } catch (error) {
      return this.createErrorResponse(
        'BREACH_REPORTING_FAILED',
        error instanceof Error ? error.message : 'Failed to report breach'
      );
    }
  }

  /**
   * Validate legal basis for processing
   */
  private async validateLegalBasis(
    purpose: {{#if typescript}}ProcessingPurpose{{else}}any{{/if}}, 
    dataCategory: {{#if typescript}}DataCategory{{else}}string{{/if}}
  ): Promise<boolean> {
    // Special category data requires explicit legal basis (Article 9)
    if (this.isSpecialCategoryData(dataCategory)) {
      return purpose.legalBasis === 'CONSENT' || purpose.legalBasis === 'VITAL_INTERESTS';
    }

    // Regular personal data can use any Article 6 basis
    return Object.values(['CONSENT', 'CONTRACT', 'LEGAL_OBLIGATION', 'VITAL_INTERESTS', 'PUBLIC_TASK', 'LEGITIMATE_INTEREST'])
      .includes(purpose.legalBasis);
  }

  /**
   * Check if data subject has valid consent
   */
  private async hasValidConsent(subjectId: string, purposeId: string): Promise<boolean> {
    const consent = this.consentRecords.find(
      r => r.subjectId === subjectId && 
           r.purposeId === purposeId && 
           r.granted && 
           !r.withdrawnAt
    );

    return !!consent;
  }

  /**
   * Check if data category is special category (Article 9)
   */
  private isSpecialCategoryData(dataCategory: {{#if typescript}}DataCategory{{else}}string{{/if}}): boolean {
    return ['SENSITIVE', 'SPECIAL', 'BIOMETRIC', 'HEALTH', 'GENETIC'].includes(dataCategory);
  }

  /**
   * Validate special category data processing (Article 9)
   */
  private async validateSpecialCategoryProcessing(
    dataCategory: {{#if typescript}}DataCategory{{else}}string{{/if}}, 
    purpose: {{#if typescript}}ProcessingPurpose{{else}}any{{/if}}
  ): Promise<boolean> {
    // Article 9(2) exceptions
    const allowedPurposes = [
      'HEALTHCARE',
      'EMPLOYMENT_LAW',
      'VITAL_INTERESTS',
      'PUBLIC_HEALTH',
      'RESEARCH',
      'LEGAL_CLAIMS'
    ];

    return allowedPurposes.some(allowed => purpose.name.includes(allowed));
  }

  /**
   * Execute the actual data processing
   */
  private async executeProcessing<T>(
    operation: string,
    data: T,
    options: any
  ): Promise<T> {
    // Simulate processing
    await new Promise(resolve => setTimeout(resolve, 100));
    return data;
  }

  /**
   * Log processing record for audit trail
   */
  private async logProcessingRecord(record: {{#if typescript}}ProcessingRecord{{else}}any{{/if}}): Promise<void> {
    this.processingRecords.push(record);
    
    if (this.config.auditingEnabled) {
      console.log('[GDPR Processing Record]', JSON.stringify(record, null, 2));
    }
  }

  /**
   * Helper methods for data subject requests
   */
  private async getPersonalData(subjectId: string): Promise<unknown> {
    // In a real implementation, this would fetch actual personal data
    return { subjectId, message: 'Personal data would be returned here' };
  }

  private async getRetentionInfo(subjectId: string): Promise<unknown> {
    const records = this.processingRecords.filter(r => r.subjectId === subjectId);
    return records.map(r => ({
      purpose: r.purpose.name,
      expiresAt: r.retention.expiresAt,
      willAnonymize: r.retention.anonymizeAfterExpiry,
    }));
  }

  private async getThirdPartySharing(subjectId: string): Promise<unknown> {
    // In a real implementation, this would return third-party sharing info
    return { message: 'No third-party sharing configured' };
  }

  private async canEraseData(subjectId: string): Promise<boolean> {
    // Check if data is needed for legal obligations
    const essentialRecords = this.processingRecords.filter(
      r => r.subjectId === subjectId && r.purpose.isEssential
    );

    return essentialRecords.length === 0;
  }

  private async getPortableData(subjectId: string): Promise<unknown> {
    // Return data in structured, machine-readable format
    return {
      personalData: await this.getPersonalData(subjectId),
      processingHistory: this.processingRecords.filter(r => r.subjectId === subjectId),
      consentHistory: this.consentRecords.filter(r => r.subjectId === subjectId),
    };
  }

  private async notifySupervisoryAuthority(breach: {{#if typescript}}DataBreachIncident{{else}}any{{/if}}): Promise<void> {
    // In a real implementation, this would send notification to authority
    console.log(`[GDPR Breach Notification] Notifying ${this.config.supervisoryAuthority.name}`, breach);
  }

  private async notifyAffectedSubjects(breach: {{#if typescript}}DataBreachIncident{{else}}any{{/if}}): Promise<void> {
    // In a real implementation, this would notify affected data subjects
    console.log(`[GDPR Subject Notification] Notifying ${breach.affectedSubjects} subjects`, breach);
  }

  /**
   * Get article compliance for request type
   */
  private getArticleComplianceForRequest(requestType: {{#if typescript}}DataSubjectRight{{else}}string{{/if}}): string[] {
    const articleMap: Record<string, string[]> = {
      'ACCESS': ['Article 15'],
      'RECTIFICATION': ['Article 16'],
      'ERASURE': ['Article 17'],
      'RESTRICT': ['Article 18'],
      'PORTABILITY': ['Article 20'],
      'OBJECT': ['Article 21'],
      'WITHDRAW_CONSENT': ['Article 7'],
    };

    return articleMap[requestType] || [];
  }

  /**
   * Create error response
   */
  private createErrorResponse(code: string, message: string): {{#if typescript}}GDPRResponse{{else}}any{{/if}} {
    return {
      success: false,
      error: { code, message },
      compliance: {
        articleCompliance: [],
        legalBasisValidated: false,
        consentObtained: false,
        auditLogged: true,
      },
    };
  }

  /**
   * Generate unique ID
   */
  private generateId(): string {
    return `gdpr-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
  }

  /**
   * Get processing records
   */
  getProcessingRecords(): {{#if typescript}}ProcessingRecord[]{{else}}any[]{{/if}} {
    return [...this.processingRecords];
  }

  /**
   * Get subject requests
   */
  getSubjectRequests(): {{#if typescript}}DataSubjectRequest[]{{else}}any[]{{/if}} {
    return [...this.subjectRequests];
  }

  /**
   * Get breach incidents
   */
  getBreachIncidents(): {{#if typescript}}DataBreachIncident[]{{else}}any[]{{/if}} {
    return [...this.breachIncidents];
  }
}

{{#if includeFactory}}
/**
 * Factory function to create GDPR handler
 */
export function createGDPRHandler(
  config: {{#if typescript}}Partial<GDPRHandlerConfig>{{else}}any{{/if}} = {}
): {{capitalize handlerName}} {
  const defaultConfig: {{#if typescript}}GDPRHandlerConfig{{else}}any{{/if}} = {
    organizationName: 'Xaheen Platform',
    dataProtectionOfficer: {
      name: 'Data Protection Officer',
      email: 'dpo@xaheen.com',
      phone: '+47 12345678',
    },
    supervisoryAuthority: {
      name: 'Datatilsynet',
      email: 'postkasse@datatilsynet.no',
      reportingUrl: 'https://www.datatilsynet.no/om-datatilsynet/kontakt-oss/meld-fra-om-personvernbrudd/',
    },
    defaultRetentionDays: 1095, // 3 years
    breachNotificationHours: 72,
    subjectRequestResponseDays: 30,
    encryptionRequired: true,
    auditingEnabled: true,
  };

  return new {{capitalize handlerName}}({ ...defaultConfig, ...config });
}
{{/if}}

{{#if includeExamples}}
// Example usage:
/*
// Create GDPR handler
const gdprHandler = createGDPRHandler({
  organizationName: 'My Company AS',
  encryptionRequired: true,
});

// Process personal data
const result = await gdprHandler.processPersonalData('CREATE', userData, {
  subjectId: 'user-123',
  purpose: {
    id: 'user-registration',
    name: 'User Registration',
    description: 'Creating user account',
    legalBasis: 'CONSENT',
    dataCategories: ['PERSONAL'],
    retentionPeriod: 1095,
    isEssential: false,
    consentRequired: true,
  },
  dataCategory: 'PERSONAL',
  processorId: 'system-001',
});

// Handle subject access request
const accessRequest = await gdprHandler.handleSubjectRequest(
  'user-123',
  'ACCESS',
  'EMAIL'
);

// Report data breach
const breachReport = await gdprHandler.reportDataBreach({
  type: 'CONFIDENTIALITY',
  severity: 'HIGH',
  affectedSubjects: 1000,
  dataCategories: ['PERSONAL', 'SENSITIVE'],
  description: 'Unauthorized access to user database',
  containmentActions: ['Database secured', 'Access logs reviewed'],
  notificationRequired: true,
  authorityNotified: false,
  subjectsNotified: false,
  riskAssessment: {
    likelihood: 'HIGH',
    impact: 'HIGH',
    overallRisk: 'HIGH',
  },
});
*/
{{/if}}
