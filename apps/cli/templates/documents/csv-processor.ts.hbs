import { CSVProcessor, importCSV, exportCSV, type CSVProcessingResult } from '{{relativePath}}/documents/processors/csv-processor';
import { promises as fs } from 'fs';
import path from 'path';

/**
 * {{componentName}} - CSV Data Processor
 * Generated with Xaheen CLI
 * 
 * Features:
 * - CSV parsing with Papa Parse library
 * - Data validation and sanitization
 * - Error handling for malformed CSV files
 * - Progress tracking for large file processing
 * - GDPR-compliant data handling and anonymization
 * {{#if includeValidation}}
 * - Schema validation with Zod
 * {{/if}}
 * {{#if includeTransformation}}
 * - Data transformation pipeline
 * {{/if}}
 */

{{#if includeValidation}}
import { z } from 'zod';

// Define your data schema here
const {{componentName}}Schema = z.object({
  // Add your schema fields here
  // Example:
  // name: z.string().min(1),
  // email: z.string().email(),
  // age: z.number().positive(),
});

export type {{componentName}}Data = z.infer<typeof {{componentName}}Schema>;
{{else}}
export interface {{componentName}}Data {
  // Define your data interface here
  [key: string]: any;
}
{{/if}}

export interface {{componentName}}Options {
  inputPath?: string;
  outputPath?: string;
  delimiter?: string;
  encoding?: BufferEncoding;
  {{#if includeGDPR}}
  gdprCompliant?: boolean;
  anonymizeFields?: string[];
  {{/if}}
  {{#if includeValidation}}
  validateData?: boolean;
  skipInvalidRows?: boolean;
  {{/if}}
  {{#if includeTransformation}}
  transformData?: boolean;
  customTransform?: (data: any) => any;
  {{/if}}
}

export class {{componentName}} {
  private processor: CSVProcessor;
  private options: {{componentName}}Options;

  constructor(options: {{componentName}}Options = {}) {
    this.processor = new CSVProcessor();
    this.options = {
      delimiter: ',',
      encoding: 'utf-8',
      {{#if includeGDPR}}
      gdprCompliant: true,
      anonymizeFields: [],
      {{/if}}
      {{#if includeValidation}}
      validateData: true,
      skipInvalidRows: false,
      {{/if}}
      {{#if includeTransformation}}
      transformData: false,
      {{/if}}
      ...options,
    };
  }

  /**
   * Import CSV file and process data
   * @param filePath - Path to CSV file
   * @returns Promise<{{componentName}}Data[]> - Processed data
   */
  async importData(filePath?: string): Promise<{{componentName}}Data[]> {
    const inputPath = filePath || this.options.inputPath;
    
    if (!inputPath) {
      throw new Error('Input file path is required');
    }

    try {
      {{#if includeValidation}}
      const schema = this.options.validateData ? {{componentName}}Schema : undefined;
      {{else}}
      const schema = undefined;
      {{/if}}
      
      const result = await this.processor.importCSV(inputPath, schema);
      
      if (!result.success) {
        throw new Error(result.error || 'Failed to import CSV data');
      }

      let processedData = result.data || [];

      {{#if includeTransformation}}
      // Apply data transformation
      if (this.options.transformData) {
        processedData = this.transformData(processedData);
      }
      {{/if}}

      {{#if includeGDPR}}
      // Apply GDPR compliance
      if (this.options.gdprCompliant && this.options.anonymizeFields?.length) {
        processedData = this.applyGDPRCompliance(processedData);
      }
      {{/if}}

      console.log(`âœ“ Successfully imported ${processedData.length} records from ${inputPath}`);
      
      if (result.metadata) {
        console.log(`  - Processing time: ${result.metadata.processingTime}ms`);
        console.log(`  - File size: ${(result.metadata.fileSize / 1024).toFixed(2)} KB`);
        if (result.metadata.rowsSkipped > 0) {
          console.log(`  - Rows skipped: ${result.metadata.rowsSkipped}`);
        }
      }

      return processedData;
    } catch (error) {
      console.error('âœ— Failed to import CSV data:', error);
      throw error;
    }
  }

  /**
   * Export data to CSV file
   * @param data - Data to export
   * @param outputPath - Output file path
   * @returns Promise<void>
   */
  async exportData(data: {{componentName}}Data[], outputPath?: string): Promise<void> {
    const output = outputPath || this.options.outputPath;
    
    if (!output) {
      throw new Error('Output file path is required');
    }

    if (!Array.isArray(data) || data.length === 0) {
      throw new Error('Data must be a non-empty array');
    }

    try {
      // Get headers from first record
      const headers = Object.keys(data[0]);
      
      // Generate CSV content
      const csvContent = await this.processor.exportCSV(data, headers);
      
      // Write to file
      await fs.writeFile(output, csvContent, this.options.encoding || 'utf-8');
      
      console.log(`âœ“ Successfully exported ${data.length} records to ${output}`);
    } catch (error) {
      console.error('âœ— Failed to export CSV data:', error);
      throw error;
    }
  }

  {{#if includeTransformation}}
  /**
   * Transform data using custom logic
   * @param data - Raw data
   * @returns Transformed data
   */
  private transformData(data: any[]): {{componentName}}Data[] {
    return data.map(record => {
      // Apply custom transformation if provided
      if (this.options.customTransform) {
        return this.options.customTransform(record);
      }

      // Default transformation logic
      const transformed = { ...record };
      
      // Add your transformation logic here
      // Example:
      // if (transformed.date && typeof transformed.date === 'string') {
      //   transformed.date = new Date(transformed.date);
      // }
      // 
      // if (transformed.amount && typeof transformed.amount === 'string') {
      //   transformed.amount = parseFloat(transformed.amount);
      // }

      return transformed;
    });
  }
  {{/if}}

  {{#if includeGDPR}}
  /**
   * Apply GDPR compliance measures
   * @param data - Data to process
   * @returns GDPR-compliant data
   */
  private applyGDPRCompliance(data: {{componentName}}Data[]): {{componentName}}Data[] {
    const fieldsToAnonymize = this.options.anonymizeFields || [];
    
    return data.map(record => {
      const compliantRecord = { ...record };
      
      fieldsToAnonymize.forEach(field => {
        if (compliantRecord[field]) {
          compliantRecord[field] = this.anonymizeField(compliantRecord[field], field);
        }
      });

      return compliantRecord;
    });
  }

  /**
   * Anonymize a specific field
   * @param value - Value to anonymize
   * @param fieldName - Field name for context
   * @returns Anonymized value
   */
  private anonymizeField(value: any, fieldName: string): string {
    const fieldLower = fieldName.toLowerCase();

    if (fieldLower.includes('email')) {
      return this.anonymizeEmail(String(value));
    } else if (fieldLower.includes('phone') || fieldLower.includes('telefon')) {
      return this.anonymizePhone(String(value));
    } else if (fieldLower.includes('name') || fieldLower.includes('navn')) {
      return this.anonymizeName(String(value));
    } else {
      return '***ANONYMIZED***';
    }
  }

  private anonymizeEmail(email: string): string {
    const atIndex = email.indexOf('@');
    if (atIndex > 0) {
      const username = email.substring(0, atIndex);
      const domain = email.substring(atIndex);
      return `${username.charAt(0)}***${domain}`;
    }
    return '***@***.***';
  }

  private anonymizePhone(phone: string): string {
    const cleaned = phone.replace(/\D/g, '');
    return cleaned.length >= 4 ? `***-${cleaned.slice(-4)}` : '***-****';
  }

  private anonymizeName(name: string): string {
    const parts = name.trim().split(' ');
    return parts.map(part => part.length > 0 ? `${part.charAt(0)}***` : '').join(' ');
  }
  {{/if}}

  /**
   * Process large CSV files in chunks
   * @param filePath - Path to large CSV file
   * @param chunkProcessor - Function to process each chunk
   * @param chunkSize - Number of rows per chunk
   * @returns Promise<void>
   */
  async processLargeFile(
    filePath: string,
    chunkProcessor: (chunk: {{componentName}}Data[]) => Promise<void>,
    chunkSize: number = 1000
  ): Promise<void> {
    console.log(`ðŸ“Š Processing large file: ${filePath}`);
    
    await this.processor.processLargeFile(
      filePath,
      chunkSize,
      async (chunk: any[]) => {
        {{#if includeValidation}}
        // Validate chunk if enabled
        const validatedChunk = this.options.validateData 
          ? chunk.filter(record => {
              try {
                {{componentName}}Schema.parse(record);
                return true;
              } catch {
                return false;
              }
            })
          : chunk;
        {{else}}
        const validatedChunk = chunk;
        {{/if}}

        {{#if includeTransformation}}
        // Transform chunk if enabled
        const transformedChunk = this.options.transformData 
          ? this.transformData(validatedChunk)
          : validatedChunk;
        {{else}}
        const transformedChunk = validatedChunk;
        {{/if}}

        await chunkProcessor(transformedChunk);
      }
    );
    
    console.log('âœ“ Large file processing completed');
  }

  /**
   * Get processing statistics
   * @param filePath - Path to CSV file
   * @returns Promise<object> - File statistics
   */
  async getFileStats(filePath: string): Promise<{
    fileSize: number;
    estimatedRows: number;
    encoding: string;
  }> {
    const stats = await fs.stat(filePath);
    const content = await fs.readFile(filePath, 'utf-8');
    const lines = content.split('\n').length - 1; // Subtract header
    
    return {
      fileSize: stats.size,
      estimatedRows: lines,
      encoding: 'utf-8',
    };
  }
}

// Export convenience functions
export async function import{{componentName}}(filePath: string, options?: {{componentName}}Options): Promise<{{componentName}}Data[]> {
  const processor = new {{componentName}}(options);
  return processor.importData(filePath);
}

export async function export{{componentName}}(data: {{componentName}}Data[], outputPath: string, options?: {{componentName}}Options): Promise<void> {
  const processor = new {{componentName}}(options);
  return processor.exportData(data, outputPath);
}

{{#if includeExample}}
// Example usage:
/*
const processor = new {{componentName}}({
  {{#if includeGDPR}}
  gdprCompliant: true,
  anonymizeFields: ['email', 'phone', 'name'],
  {{/if}}
  {{#if includeValidation}}
  validateData: true,
  skipInvalidRows: true,
  {{/if}}
  {{#if includeTransformation}}
  transformData: true,
  customTransform: (record) => ({
    ...record,
    processedAt: new Date().toISOString(),
  }),
  {{/if}}
});

// Import data
const data = await processor.importData('./input.csv');

// Process data
console.log(`Imported ${data.length} records`);

// Export processed data
await processor.exportData(data, './output.csv');
*/
{{/if}}
