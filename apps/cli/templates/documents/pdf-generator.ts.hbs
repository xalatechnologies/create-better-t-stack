import { PDFGenerator, generatePDF, generatePDFComponent, DocumentOptions } from '{{relativePath}}/documents/generators/pdf-generator';
import { promises as fs } from 'fs';
import path from 'path';

/**
 * {{componentName}} - PDF Document Generator
 * Generated with Xaheen CLI
 * 
 * Features:
 * - Norwegian font support (Arial, Times New Roman)
 * - PDF metadata and document properties
 * - Template processing with Handlebars
 * {{#if includeEncryption}}
 * - PDF encryption and password protection
 * {{/if}}
 * {{#if includeSignature}}
 * - Digital signature support
 * {{/if}}
 */

export interface {{componentName}}Options {
  title: string;
  content: string;
  author?: string;
  {{#if includeMetadata}}
  metadata?: {
    subject?: string;
    keywords?: string[];
    creator?: string;
  };
  {{/if}}
  {{#if includeEncryption}}
  security?: {
    userPassword?: string;
    ownerPassword?: string;
    permissions?: {
      printing?: boolean;
      modifying?: boolean;
      copying?: boolean;
    };
  };
  {{/if}}
  outputPath?: string;
}

export class {{componentName}} {
  private generator: PDFGenerator;

  constructor() {
    this.generator = new PDFGenerator();
  }

  /**
   * Generate PDF document
   * @param options - Document generation options
   * @returns Promise<Buffer> - Generated PDF buffer
   */
  async generateDocument(options: {{componentName}}Options): Promise<Buffer> {
    const template = this.getTemplate();
    
    const documentOptions: DocumentOptions = {
      template,
      data: {
        title: options.title,
        content: options.content,
        author: options.author || 'Xaheen Generated',
        generatedAt: new Date(),
        {{#if includeNorwegian}}
        // Norwegian-specific formatting
        formattedDate: new Intl.DateTimeFormat('nb-NO').format(new Date()),
        {{/if}}
      },
      {{#if includeMetadata}}
      metadata: {
        title: options.title,
        author: options.author,
        creator: 'Xaheen PDF Generator',
        producer: 'Xaheen CLI v{{version}}',
        ...options.metadata,
      },
      {{/if}}
      {{#if includeEncryption}}
      security: options.security,
      {{/if}}
      outputPath: options.outputPath,
      fonts: {
        primary: 'Helvetica', // Supports Norwegian characters
        secondary: 'TimesRoman',
        supportNorwegian: true,
      },
    };

    const result = await this.generator.generatePDFComponent(documentOptions);
    
    if (!result.success || !result.buffer) {
      throw new Error(result.error || 'PDF generation failed');
    }

    return result.buffer;
  }

  /**
   * Generate PDF from template file
   * @param templatePath - Path to Handlebars template file
   * @param data - Template data
   * @param outputPath - Optional output file path
   * @returns Promise<Buffer> - Generated PDF buffer
   */
  async generateFromTemplate(
    templatePath: string,
    data: Record<string, any>,
    outputPath?: string
  ): Promise<Buffer> {
    const templateContent = await fs.readFile(templatePath, 'utf-8');
    
    const documentOptions: DocumentOptions = {
      template: templateContent,
      data: {
        ...data,
        generatedAt: new Date(),
        {{#if includeNorwegian}}
        // Add Norwegian formatting helpers
        formatDate: (date: Date) => new Intl.DateTimeFormat('nb-NO').format(date),
        formatCurrency: (amount: number) => new Intl.NumberFormat('nb-NO', {
          style: 'currency',
          currency: 'NOK',
        }).format(amount),
        {{/if}}
      },
      outputPath,
      metadata: {
        title: data.title || '{{componentName}} Document',
        author: data.author || 'Xaheen Generated',
        creator: 'Xaheen PDF Generator',
        producer: 'Xaheen CLI v{{version}}',
      },
    };

    const result = await this.generator.generatePDFComponent(documentOptions);
    
    if (!result.success || !result.buffer) {
      throw new Error(result.error || 'PDF generation failed');
    }

    return result.buffer;
  }

  /**
   * Get default PDF template
   * @returns Handlebars template string
   */
  private getTemplate(): string {
    return `
{{#if title}}
{{title}}

{{/if}}
{{#if author}}
Author: {{author}}
{{/if}}
{{#if generatedAt}}
Generated: {{formatNorwegianDate generatedAt}}
{{/if}}

---

{{content}}

{{#if includeFooter}}

---
Generated with Xaheen CLI
{{formatNorwegianDate generatedAt}}
{{/if}}
    `.trim();
  }

  /**
   * Validate document options
   * @param options - Options to validate
   * @returns boolean - Validation result
   */
  validateOptions(options: {{componentName}}Options): boolean {
    if (!options.title || options.title.trim().length === 0) {
      throw new Error('Document title is required');
    }

    if (!options.content || options.content.trim().length === 0) {
      throw new Error('Document content is required');
    }

    {{#if includeEncryption}}
    if (options.security?.userPassword && options.security.userPassword.length < 6) {
      throw new Error('User password must be at least 6 characters long');
    }

    if (options.security?.ownerPassword && options.security.ownerPassword.length < 6) {
      throw new Error('Owner password must be at least 6 characters long');
    }
    {{/if}}

    return true;
  }

  /**
   * Get document statistics
   * @returns Document statistics
   */
  getStats(): { pages: number; fonts: string[] } {
    return this.generator.getDocumentStats();
  }
}

// Export convenience functions
export async function generate{{componentName}}(options: {{componentName}}Options): Promise<Buffer> {
  const generator = new {{componentName}}();
  return generator.generateDocument(options);
}

export async function generate{{componentName}}FromTemplate(
  templatePath: string,
  data: Record<string, any>,
  outputPath?: string
): Promise<Buffer> {
  const generator = new {{componentName}}();
  return generator.generateFromTemplate(templatePath, data, outputPath);
}

{{#if includeExample}}
// Example usage:
/*
const pdfGenerator = new {{componentName}}();

const options: {{componentName}}Options = {
  title: 'Sample Document',
  content: 'This is a sample PDF document generated with Xaheen CLI.',
  author: 'John Doe',
  {{#if includeMetadata}}
  metadata: {
    subject: 'Sample PDF',
    keywords: ['sample', 'pdf', 'xaheen'],
  },
  {{/if}}
  {{#if includeEncryption}}
  security: {
    userPassword: 'user123',
    permissions: {
      printing: true,
      modifying: false,
      copying: false,
    },
  },
  {{/if}}
  outputPath: './sample-document.pdf',
};

const pdfBuffer = await pdfGenerator.generateDocument(options);
console.log('PDF generated successfully!');
*/
{{/if}}
