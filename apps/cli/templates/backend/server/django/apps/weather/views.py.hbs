"""
Weather API views providing weather forecast endpoints.
"""

import random
from datetime import date, timedelta
from typing import Dict, List, Any

from django.utils import timezone
from django.core.cache import cache
from django.conf import settings
from rest_framework import status
from rest_framework.decorators import api_view, permission_classes
from rest_framework.permissions import AllowAny{{#if auth}}, IsAuthenticated{{/if}}
from rest_framework.response import Response
from rest_framework.request import Request

import logging

logger = logging.getLogger(__name__)

# Weather data constants
WEATHER_SUMMARIES = [
    'Freezing', 'Bracing', 'Chilly', 'Cool', 'Mild',
    'Warm', 'Balmy', 'Hot', 'Sweltering', 'Scorching'
]

NORWEGIAN_CITIES = [
    'Oslo', 'Bergen', 'Trondheim', 'Stavanger', 'Kristiansand',
    'Tromsø', 'Drammen', 'Fredrikstad', 'Sandnes', 'Ålesund'
]

CITY_BASE_TEMPERATURES = {
    'tromsø': -5,   # Northern city, colder
    'oslo': 5,      # Central, moderate
    'bergen': 8,    # Western coast, milder
    'stavanger': 7, # Western coast
    'default': 5    # Default moderate temperature
}


def get_base_temperature(city: str) -> int:
    """Get base temperature for a city."""
    return CITY_BASE_TEMPERATURES.get(city.lower(), CITY_BASE_TEMPERATURES['default'])


def find_supported_city(city: str) -> str | None:
    """Find a supported city (case-insensitive)."""
    for supported_city in NORWEGIAN_CITIES:
        if supported_city.lower() == city.lower():
            return supported_city
    return None


def generate_weather_data(days: int = 5, city: str = 'Default') -> List[Dict[str, Any]]:
    """Generate mock weather forecast data."""
    forecast = []
    base_temp = get_base_temperature(city)
    
    # Use city name for consistent random seed
    random.seed(hash(city))
    
    for i in range(days):
        forecast_date = date.today() + timedelta(days=i)
        temp_c = base_temp + random.randint(-10, 15)
        temp_f = round((temp_c * 9/5) + 32)
        
        weather_data = {
            'date': forecast_date.isoformat(),
            'temperature_c': temp_c,
            'temperature_f': temp_f,
            'summary': random.choice(WEATHER_SUMMARIES),
            'city': city,
            'humidity': random.randint(30, 100),
            'wind_speed': round(random.uniform(0, 50), 1),
            'pressure': round(random.uniform(990, 1030), 1),
            'uv_index': random.randint(0, 12),
            'precipitation_probability': random.randint(0, 100),
            'cloud_coverage': random.randint(0, 100),
            'visibility': round(random.uniform(5, 50), 1),
            'created_at': timezone.now().isoformat(),
        }
        
        forecast.append(weather_data)
    
    return forecast


@api_view(['GET'])
@permission_classes([AllowAny])
def health_check(request: Request) -> Response:
    """
    Weather service health check endpoint.
    
    Returns the status of the weather service.
    """
    try:
        logger.info("Weather service health check requested")
        
        health_data = {
            'service': 'Weather Service',
            'status': 'healthy',
            'timestamp': timezone.now().isoformat(),
            'supported_cities': len(NORWEGIAN_CITIES),
            'cache_enabled': 'redis' in settings.CACHES['default']['BACKEND'].lower(),
            'version': '1.0.0',
        }
        
        return Response({
            'success': True,
            'message': 'Weather service is healthy',
            'data': health_data,
        }, status=status.HTTP_200_OK)
        
    except Exception as e:
        logger.error(f"Weather service health check failed: {str(e)}")
        return Response({
            'success': False,
            'message': 'Weather service health check failed',
            'error': str(e),
        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


@api_view(['GET'])
{{#if auth}}
@permission_classes([IsAuthenticated])
{{else}}
@permission_classes([AllowAny])
{{/if}}
def weather_forecast(request: Request) -> Response:
    """
    Get weather forecast.
    
    Query Parameters:
    - days (int): Number of days to forecast (1-10, default: 5)
    - city (str): City name (optional)
    """
    try:
        # Validate and get parameters
        days = request.GET.get('days', 5)
        city = request.GET.get('city', 'Default')
        
        try:
            days = int(days)
            if days < 1 or days > 10:
                return Response({
                    'success': False,
                    'message': 'Days parameter must be between 1 and 10',
                }, status=status.HTTP_400_BAD_REQUEST)
        except ValueError:
            return Response({
                'success': False,
                'message': 'Days parameter must be a valid integer',
            }, status=status.HTTP_400_BAD_REQUEST)
        
        if len(city) > 50:
            return Response({
                'success': False,
                'message': 'City name cannot exceed 50 characters',
            }, status=status.HTTP_400_BAD_REQUEST)
        
        logger.info(f"Weather forecast requested for {city} ({days} days)")
        
        # Check cache first
        cache_key = f"weather_forecast_{city.lower()}_{days}"
        cached_data = cache.get(cache_key)
        
        if cached_data:
            logger.info(f"Returning cached weather data for {city}")
            return Response({
                'success': True,
                'message': f'Weather forecast for {city} retrieved successfully (cached)',
                'data': cached_data,
            }, status=status.HTTP_200_OK)
        
        # Generate new data
        forecast_data = generate_weather_data(days, city)
        
        # Cache for 10 minutes
        cache.set(cache_key, forecast_data, 600)
        
        return Response({
            'success': True,
            'message': f'Weather forecast for {city} retrieved successfully',
            'data': forecast_data,
        }, status=status.HTTP_200_OK)
        
    except Exception as e:
        logger.error(f"Weather forecast request failed: {str(e)}")
        return Response({
            'success': False,
            'message': 'Failed to retrieve weather forecast',
            'error': str(e) if settings.DEBUG else 'Internal server error',
        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


@api_view(['GET'])
{{#if auth}}
@permission_classes([IsAuthenticated])
{{else}}
@permission_classes([AllowAny])
{{/if}}
def current_weather_by_city(request: Request, city: str) -> Response:
    """
    Get current weather for a specific city.
    
    Path Parameters:
    - city (str): City name
    """
    try:
        if not city or len(city) > 50:
            return Response({
                'success': False,
                'message': 'Invalid city name',
            }, status=status.HTTP_400_BAD_REQUEST)
        
        # Check if city is supported
        supported_city = find_supported_city(city)
        if not supported_city:
            return Response({
                'success': False,
                'message': f'City "{city}" is not supported',
                'supported_cities': NORWEGIAN_CITIES,
            }, status=status.HTTP_404_NOT_FOUND)
        
        logger.info(f"Current weather requested for {supported_city}")
        
        # Check cache first
        cache_key = f"weather_current_{supported_city.lower()}"
        cached_data = cache.get(cache_key)
        
        if cached_data:
            logger.info(f"Returning cached current weather for {supported_city}")
            return Response({
                'success': True,
                'message': f'Current weather for {supported_city} retrieved successfully (cached)',
                'data': cached_data,
            }, status=status.HTTP_200_OK)
        
        # Generate current weather (1 day forecast)
        current_data = generate_weather_data(1, supported_city)[0]
        
        # Add current time information
        current_data.update({
            'current_time': timezone.now().time().isoformat(),
            'is_current': True,
        })
        
        # Cache for 5 minutes
        cache.set(cache_key, current_data, 300)
        
        return Response({
            'success': True,
            'message': f'Current weather for {supported_city} retrieved successfully',
            'data': current_data,
        }, status=status.HTTP_200_OK)
        
    except Exception as e:
        logger.error(f"Current weather request failed for {city}: {str(e)}")
        return Response({
            'success': False,
            'message': 'Failed to retrieve current weather',
            'error': str(e) if settings.DEBUG else 'Internal server error',
        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


@api_view(['GET'])
{{#if auth}}
@permission_classes([IsAuthenticated])
{{else}}
@permission_classes([AllowAny])
{{/if}}
def forecast_by_city(request: Request, city: str) -> Response:
    """
    Get weather forecast for a specific city.
    
    Path Parameters:
    - city (str): City name
    
    Query Parameters:
    - days (int): Number of days to forecast (1-10, default: 5)
    """
    try:
        if not city or len(city) > 50:
            return Response({
                'success': False,
                'message': 'Invalid city name',
            }, status=status.HTTP_400_BAD_REQUEST)
        
        # Check if city is supported
        supported_city = find_supported_city(city)
        if not supported_city:
            return Response({
                'success': False,
                'message': f'City "{city}" is not supported',
                'supported_cities': NORWEGIAN_CITIES,
            }, status=status.HTTP_404_NOT_FOUND)
        
        # Validate days parameter
        days = request.GET.get('days', 5)
        try:
            days = int(days)
            if days < 1 or days > 10:
                return Response({
                    'success': False,
                    'message': 'Days parameter must be between 1 and 10',
                }, status=status.HTTP_400_BAD_REQUEST)
        except ValueError:
            return Response({
                'success': False,
                'message': 'Days parameter must be a valid integer',
            }, status=status.HTTP_400_BAD_REQUEST)
        
        logger.info(f"Weather forecast requested for {supported_city} ({days} days)")
        
        # Check cache first
        cache_key = f"weather_city_{supported_city.lower()}_{days}"
        cached_data = cache.get(cache_key)
        
        if cached_data:
            logger.info(f"Returning cached weather forecast for {supported_city}")
            return Response({
                'success': True,
                'message': f'Weather forecast for {supported_city} retrieved successfully (cached)',
                'data': cached_data,
            }, status=status.HTTP_200_OK)
        
        # Generate forecast data
        forecast_data = generate_weather_data(days, supported_city)
        
        # Cache for 10 minutes
        cache.set(cache_key, forecast_data, 600)
        
        return Response({
            'success': True,
            'message': f'Weather forecast for {supported_city} retrieved successfully',
            'data': forecast_data,
        }, status=status.HTTP_200_OK)
        
    except Exception as e:
        logger.error(f"Weather forecast request failed for {city}: {str(e)}")
        return Response({
            'success': False,
            'message': 'Failed to retrieve weather forecast',
            'error': str(e) if settings.DEBUG else 'Internal server error',
        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


@api_view(['GET'])
@permission_classes([AllowAny])
def supported_cities(request: Request) -> Response:
    """
    Get list of supported cities.
    """
    try:
        logger.info("Supported cities list requested")
        
        return Response({
            'success': True,
            'message': 'Supported cities retrieved successfully',
            'data': {
                'cities': NORWEGIAN_CITIES,
                'total_count': len(NORWEGIAN_CITIES),
                'country': 'Norway',
            },
        }, status=status.HTTP_200_OK)
        
    except Exception as e:
        logger.error(f"Supported cities request failed: {str(e)}")
        return Response({
            'success': False,
            'message': 'Failed to retrieve supported cities',
            'error': str(e) if settings.DEBUG else 'Internal server error',
        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)