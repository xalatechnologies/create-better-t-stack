using Microsoft.OpenApi.Models;
using Serilog;
{{#if database}}
using Microsoft.EntityFrameworkCore;
using {{pascalCase projectName}}.Data;
{{/if}}
{{#if auth}}
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.AspNetCore.Identity;
using Microsoft.IdentityModel.Tokens;
using System.Text;
{{/if}}
{{#if api}}
{{#eq api "graphql"}}
using HotChocolate;
{{/eq}}
{{/if}}

namespace {{pascalCase projectName}};

public class Program
{
    public static void Main(string[] args)
    {
        // Configure Serilog
        Log.Logger = new LoggerConfiguration()
            .ReadFrom.Configuration(new ConfigurationBuilder()
                .AddJsonFile("appsettings.json")
                .AddJsonFile($"appsettings.{Environment.GetEnvironmentVariable("ASPNETCORE_ENVIRONMENT") ?? "Production"}.json", true)
                .Build())
            .CreateLogger();

        try
        {
            Log.Information("Starting {{pascalCase projectName}} API");
            
            var builder = WebApplication.CreateBuilder(args);

            // Add Serilog
            builder.Host.UseSerilog();

            // Add services to the container
            builder.Services.AddControllers();
            
            // Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle
            builder.Services.AddEndpointsApiExplorer();
            builder.Services.AddSwaggerGen(c =>
            {
                c.SwaggerDoc("v1", new OpenApiInfo
                {
                    Title = "{{pascalCase projectName}} API",
                    Version = "v1",
                    Description = "{{description}}",
                    Contact = new OpenApiContact
                    {
                        Name = "{{author}}",
                        Email = "{{email}}"
                    }
                });

                // Include XML comments
                var xmlFile = $"{System.Reflection.Assembly.GetExecutingAssembly().GetName().Name}.xml";
                var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile);
                if (File.Exists(xmlPath))
                {
                    c.IncludeXmlComments(xmlPath);
                }

                {{#if auth}}
                // Add JWT authentication to Swagger
                c.AddSecurityDefinition("Bearer", new OpenApiSecurityScheme
                {
                    Description = "JWT Authorization header using the Bearer scheme",
                    Name = "Authorization",
                    In = ParameterLocation.Header,
                    Type = SecuritySchemeType.ApiKey,
                    Scheme = "Bearer"
                });

                c.AddSecurityRequirement(new OpenApiSecurityRequirement
                {
                    {
                        new OpenApiSecurityScheme
                        {
                            Reference = new OpenApiReference
                            {
                                Type = ReferenceType.SecurityScheme,
                                Id = "Bearer"
                            }
                        },
                        Array.Empty<string>()
                    }
                });
                {{/if}}
            });

            {{#if database}}
            // Add Entity Framework
            builder.Services.AddDbContext<ApplicationDbContext>(options =>
            {{#eq database "sqlite"}}
                options.UseSqlite(builder.Configuration.GetConnectionString("DefaultConnection")));
            {{/eq}}
            {{#eq database "postgresql"}}
                options.UseNpgsql(builder.Configuration.GetConnectionString("DefaultConnection")));
            {{/eq}}
            {{#eq database "mysql"}}
                options.UseMySql(builder.Configuration.GetConnectionString("DefaultConnection"),
                    ServerVersion.AutoDetect(builder.Configuration.GetConnectionString("DefaultConnection"))));
            {{/eq}}
            {{#eq database "sqlserver"}}
                options.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection")));
            {{/eq}}
            {{/if}}

            {{#if auth}}
            // Add Identity services
            builder.Services.AddIdentity<IdentityUser, IdentityRole>(options =>
            {
                options.Password.RequireDigit = true;
                options.Password.RequireLowercase = true;
                options.Password.RequireUppercase = true;
                options.Password.RequireNonAlphanumeric = true;
                options.Password.RequiredLength = 8;
            })
            {{#if database}}
            .AddEntityFrameworkStores<ApplicationDbContext>()
            {{/if}}
            .AddDefaultTokenProviders();

            // Add JWT authentication
            builder.Services.AddAuthentication(options =>
            {
                options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
                options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
            })
            .AddJwtBearer(options =>
            {
                options.TokenValidationParameters = new TokenValidationParameters
                {
                    ValidateIssuer = true,
                    ValidateAudience = true,
                    ValidateLifetime = true,
                    ValidateIssuerSigningKey = true,
                    ValidIssuer = builder.Configuration["Jwt:Issuer"],
                    ValidAudience = builder.Configuration["Jwt:Audience"],
                    IssuerSigningKey = new SymmetricSecurityKey(
                        Encoding.UTF8.GetBytes(builder.Configuration["Jwt:Key"] ?? 
                            throw new InvalidOperationException("JWT Key not configured")))
                };
            });

            builder.Services.AddAuthorization();
            {{/if}}

            {{#if api}}
            {{#eq api "graphql"}}
            // Add GraphQL
            builder.Services
                .AddGraphQLServer()
                .AddQueryType<Query>()
                .AddMutationType<Mutation>()
                {{#if database}}
                .AddDbContextServices<ApplicationDbContext>()
                {{/if}}
                .AddFiltering()
                .AddSorting()
                .AddProjections();
            {{/eq}}
            {{/if}}

            {{#if cors}}
            // Add CORS
            builder.Services.AddCors(options =>
            {
                options.AddPolicy("AllowSpecificOrigins", policy =>
                {
                    policy.WithOrigins(builder.Configuration.GetSection("Cors:AllowedOrigins").Get<string[]>() ?? Array.Empty<string>())
                          .AllowAnyHeader()
                          .AllowAnyMethod()
                          .AllowCredentials();
                });
            });
            {{/if}}

            {{#if caching}}
            // Add Redis caching
            builder.Services.AddStackExchangeRedisCache(options =>
            {
                options.Configuration = builder.Configuration.GetConnectionString("Redis");
            });
            {{/if}}

            // Add AutoMapper
            builder.Services.AddAutoMapper(typeof(Program));

            // Add application services
            builder.Services.AddScoped<IWeatherService, WeatherService>();

            var app = builder.Build();

            // Configure the HTTP request pipeline
            if (app.Environment.IsDevelopment())
            {
                app.UseSwagger();
                app.UseSwaggerUI(c =>
                {
                    c.SwaggerEndpoint("/swagger/v1/swagger.json", "{{pascalCase projectName}} API V1");
                    c.RoutePrefix = string.Empty; // Serve Swagger UI at root
                });
            }

            app.UseHttpsRedirection();

            {{#if cors}}
            app.UseCors("AllowSpecificOrigins");
            {{/if}}

            {{#if auth}}
            app.UseAuthentication();
            app.UseAuthorization();
            {{/if}}

            app.MapControllers();

            {{#if api}}
            {{#eq api "graphql"}}
            app.MapGraphQL();
            {{/eq}}
            {{/if}}

            {{#if database}}
            // Ensure database is created
            using (var scope = app.Services.CreateScope())
            {
                var context = scope.ServiceProvider.GetRequiredService<ApplicationDbContext>();
                context.Database.EnsureCreated();
            }
            {{/if}}

            app.Run();
        }
        catch (Exception ex)
        {
            Log.Fatal(ex, "Application terminated unexpectedly");
        }
        finally
        {
            Log.CloseAndFlush();
        }
    }
}