using {{pascalCase projectName}}.Models;

namespace {{pascalCase projectName}}.Services;

/// <summary>
/// Weather service implementation providing mock weather data
/// </summary>
public class WeatherService : IWeatherService
{
    private readonly ILogger<WeatherService> _logger;
    private static readonly string[] Summaries = new[]
    {
        "Freezing", "Bracing", "Chilly", "Cool", "Mild",
        "Warm", "Balmy", "Hot", "Sweltering", "Scorching"
    };

    private static readonly string[] Cities = new[]
    {
        "Oslo", "Bergen", "Trondheim", "Stavanger", "Kristiansand",
        "Tromsø", "Drammen", "Fredrikstad", "Sandnes", "Ålesund"
    };

    /// <summary>
    /// Initializes a new instance of the WeatherService
    /// </summary>
    /// <param name="logger">Logger instance</param>
    public WeatherService(ILogger<WeatherService> logger)
    {
        _logger = logger ?? throw new ArgumentNullException(nameof(logger));
    }

    /// <summary>
    /// Gets weather forecast for the specified number of days
    /// </summary>
    /// <param name="days">Number of days to forecast</param>
    /// <returns>Collection of weather forecasts</returns>
    public async Task<IEnumerable<WeatherForecast>> GetForecastAsync(int days)
    {
        _logger.LogInformation("Generating weather forecast for {Days} days", days);

        // Simulate async operation
        await Task.Delay(50);

        var random = new Random();
        var forecasts = new List<WeatherForecast>();

        for (int i = 0; i < days; i++)
        {
            var temperature = random.Next(-20, 35);
            var forecast = new WeatherForecast
            {
                Date = DateOnly.FromDateTime(DateTime.Now.AddDays(i)),
                TemperatureC = temperature,
                Summary = Summaries[random.Next(Summaries.Length)],
                City = "Default",
                Humidity = random.Next(30, 100),
                WindSpeed = Math.Round(random.NextDouble() * 50, 1),
                Pressure = Math.Round(random.NextDouble() * 200 + 950, 1),
                UvIndex = random.Next(0, 12),
                PrecipitationProbability = random.Next(0, 100),
                CloudCoverage = random.Next(0, 100),
                Visibility = Math.Round(random.NextDouble() * 30 + 5, 1),
                CreatedAt = DateTime.UtcNow
            };

            forecasts.Add(forecast);
        }

        _logger.LogInformation("Generated {Count} weather forecasts", forecasts.Count);
        return forecasts;
    }

    /// <summary>
    /// Gets weather forecast for a specific city
    /// </summary>
    /// <param name="city">City name</param>
    /// <param name="days">Number of days to forecast</param>
    /// <returns>Collection of weather forecasts for the city</returns>
    public async Task<IEnumerable<WeatherForecast>> GetForecastByCityAsync(string city, int days)
    {
        if (string.IsNullOrWhiteSpace(city))
        {
            _logger.LogWarning("Empty city name provided to GetForecastByCityAsync");
            return Enumerable.Empty<WeatherForecast>();
        }

        _logger.LogInformation("Generating weather forecast for city: {City} for {Days} days", city, days);

        // Simulate async operation
        await Task.Delay(100);

        // Check if city is in our supported list (case-insensitive)
        var supportedCity = Cities.FirstOrDefault(c => 
            string.Equals(c, city, StringComparison.OrdinalIgnoreCase));

        if (supportedCity == null)
        {
            _logger.LogWarning("Unsupported city: {City}", city);
            return Enumerable.Empty<WeatherForecast>();
        }

        var random = new Random(city.GetHashCode()); // Use city hash for consistent results
        var forecasts = new List<WeatherForecast>();

        // Adjust temperature based on city (Norwegian cities with realistic temperatures)
        var baseTemperature = supportedCity.ToLower() switch
        {
            "tromsø" => -5, // Northern city, colder
            "oslo" => 5,    // Central, moderate
            "bergen" => 8,  // Western coast, milder
            "stavanger" => 7, // Western coast
            _ => 5          // Default moderate temperature
        };

        for (int i = 0; i < days; i++)
        {
            var temperatureVariation = random.Next(-10, 15);
            var temperature = baseTemperature + temperatureVariation;
            
            var forecast = new WeatherForecast
            {
                Date = DateOnly.FromDateTime(DateTime.Now.AddDays(i)),
                TemperatureC = temperature,
                Summary = Summaries[random.Next(Summaries.Length)],
                City = supportedCity,
                Humidity = random.Next(40, 95), // Higher humidity for Norwegian climate
                WindSpeed = Math.Round(random.NextDouble() * 40 + 5, 1), // More wind
                Pressure = Math.Round(random.NextDouble() * 100 + 990, 1), // Typical Nordic pressure
                UvIndex = random.Next(0, 8), // Lower UV in Nordic countries
                PrecipitationProbability = random.Next(20, 80), // Higher chance of rain
                CloudCoverage = random.Next(30, 90), // More clouds
                Visibility = Math.Round(random.NextDouble() * 25 + 10, 1),
                CreatedAt = DateTime.UtcNow
            };

            forecasts.Add(forecast);
        }

        _logger.LogInformation("Generated {Count} weather forecasts for city: {City}", forecasts.Count, supportedCity);
        return forecasts;
    }

    /// <summary>
    /// Gets current weather for a specific city
    /// </summary>
    /// <param name="city">City name</param>
    /// <returns>Current weather forecast</returns>
    public async Task<WeatherForecast?> GetCurrentWeatherAsync(string city)
    {
        if (string.IsNullOrWhiteSpace(city))
        {
            _logger.LogWarning("Empty city name provided to GetCurrentWeatherAsync");
            return null;
        }

        _logger.LogInformation("Getting current weather for city: {City}", city);

        var forecasts = await GetForecastByCityAsync(city, 1);
        var currentWeather = forecasts.FirstOrDefault();

        if (currentWeather != null)
        {
            // Adjust for current date/time
            currentWeather.Date = DateOnly.FromDateTime(DateTime.Now);
            _logger.LogInformation("Retrieved current weather for city: {City}", city);
        }
        else
        {
            _logger.LogWarning("No current weather data available for city: {City}", city);
        }

        return currentWeather;
    }
}