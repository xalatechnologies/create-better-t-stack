using Microsoft.AspNetCore.Mvc;
{{#if auth}}
using Microsoft.AspNetCore.Authorization;
{{/if}}
using {{pascalCase projectName}}.Models;
using {{pascalCase projectName}}.Services;

namespace {{pascalCase projectName}}.Controllers;

/// <summary>
/// Weather forecast controller providing weather data endpoints
/// </summary>
[ApiController]
[Route("api/[controller]")]
{{#if auth}}
[Authorize]
{{/if}}
public class WeatherController : ControllerBase
{
    private readonly IWeatherService _weatherService;
    private readonly ILogger<WeatherController> _logger;

    /// <summary>
    /// Initializes a new instance of the WeatherController
    /// </summary>
    /// <param name="weatherService">Weather service for data operations</param>
    /// <param name="logger">Logger instance</param>
    public WeatherController(IWeatherService weatherService, ILogger<WeatherController> logger)
    {
        _weatherService = weatherService ?? throw new ArgumentNullException(nameof(weatherService));
        _logger = logger ?? throw new ArgumentNullException(nameof(logger));
    }

    /// <summary>
    /// Gets weather forecast data
    /// </summary>
    /// <param name="days">Number of days to forecast (default: 5, max: 10)</param>
    /// <returns>Weather forecast data</returns>
    /// <response code="200">Returns the weather forecast</response>
    /// <response code="400">If the days parameter is invalid</response>
    /// <response code="401">If the user is not authenticated</response>
    [HttpGet]
    [ProducesResponseType(typeof(IEnumerable<WeatherForecast>), StatusCodes.Status200OK)]
    [ProducesResponseType(StatusCodes.Status400BadRequest)]
    {{#if auth}}
    [ProducesResponseType(StatusCodes.Status401Unauthorized)]
    {{/if}}
    public async Task<ActionResult<IEnumerable<WeatherForecast>>> GetWeatherForecast([FromQuery] int days = 5)
    {
        try
        {
            if (days < 1 || days > 10)
            {
                _logger.LogWarning("Invalid days parameter: {Days}. Must be between 1 and 10.", days);
                return BadRequest("Days must be between 1 and 10");
            }

            _logger.LogInformation("Getting weather forecast for {Days} days", days);
            
            var forecast = await _weatherService.GetForecastAsync(days);
            
            return Ok(forecast);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error occurred while getting weather forecast");
            return StatusCode(StatusCodes.Status500InternalServerError, 
                "An error occurred while processing your request");
        }
    }

    /// <summary>
    /// Gets weather forecast for a specific city
    /// </summary>
    /// <param name="city">City name</param>
    /// <param name="days">Number of days to forecast (default: 5, max: 10)</param>
    /// <returns>Weather forecast data for the specified city</returns>
    /// <response code="200">Returns the weather forecast for the city</response>
    /// <response code="400">If parameters are invalid</response>
    /// <response code="401">If the user is not authenticated</response>
    /// <response code="404">If the city is not found</response>
    [HttpGet("{city}")]
    [ProducesResponseType(typeof(IEnumerable<WeatherForecast>), StatusCodes.Status200OK)]
    [ProducesResponseType(StatusCodes.Status400BadRequest)]
    {{#if auth}}
    [ProducesResponseType(StatusCodes.Status401Unauthorized)]
    {{/if}}
    [ProducesResponseType(StatusCodes.Status404NotFound)]
    public async Task<ActionResult<IEnumerable<WeatherForecast>>> GetWeatherForecastByCity(
        string city, 
        [FromQuery] int days = 5)
    {
        try
        {
            if (string.IsNullOrWhiteSpace(city))
            {
                _logger.LogWarning("Empty city parameter provided");
                return BadRequest("City name is required");
            }

            if (days < 1 || days > 10)
            {
                _logger.LogWarning("Invalid days parameter: {Days} for city: {City}", days, city);
                return BadRequest("Days must be between 1 and 10");
            }

            _logger.LogInformation("Getting weather forecast for city: {City} for {Days} days", city, days);
            
            var forecast = await _weatherService.GetForecastByCityAsync(city, days);
            
            if (forecast == null || !forecast.Any())
            {
                _logger.LogWarning("No weather data found for city: {City}", city);
                return NotFound($"Weather data not found for city: {city}");
            }

            return Ok(forecast);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error occurred while getting weather forecast for city: {City}", city);
            return StatusCode(StatusCodes.Status500InternalServerError, 
                "An error occurred while processing your request");
        }
    }

    /// <summary>
    /// Health check endpoint
    /// </summary>
    /// <returns>API health status</returns>
    [HttpGet("health")]
    [AllowAnonymous]
    [ProducesResponseType(StatusCodes.Status200OK)]
    public IActionResult HealthCheck()
    {
        _logger.LogInformation("Health check requested");
        
        return Ok(new
        {
            Status = "Healthy",
            Timestamp = DateTime.UtcNow,
            Service = "{{pascalCase projectName}} Weather API",
            Version = "1.0.0"
        });
    }
}