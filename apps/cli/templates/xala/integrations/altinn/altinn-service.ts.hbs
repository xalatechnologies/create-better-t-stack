/**
 * Altinn Integration Service - Xala UI System Compliant
 * Generated with Xaheen CLI - Norwegian Government Services Integration
 * 
 * MANDATORY COMPLIANCE RULES:
 * ❌ NO raw HTML elements (div, span, p, h1-h6, button, input, etc.)
 * ✅ ONLY semantic components from @xala-technologies/ui-system
 * ❌ NO hardcoded styling (no style={{}}, no arbitrary Tailwind values)
 * ✅ MANDATORY design token usage for all colors, spacing, typography
 * ✅ Enhanced 8pt Grid System - all spacing in 8px increments
 * ✅ WCAG 2.2 AAA compliance for accessibility
 * ❌ NO hardcoded user-facing text - ALL text must use t() function
 * ✅ MANDATORY localization: English, Norwegian Bokmål, French, Arabic
 * ✅ Explicit TypeScript return types (no 'any' types)
 * ✅ SOLID principles and component composition
 * ✅ Maximum 200 lines per file, 20 lines per function
 */

/**
 * Altinn configuration interface
 */
export interface AltinnConfig {
  readonly environment: 'test' | 'production';
  readonly apiBaseUrl: string;
  readonly subscriptionKey: string;
  readonly clientId: string;
  readonly clientSecret: string;
  readonly scope: string;
  readonly timeout: number;
  readonly retryAttempts: number;
}

/**
 * Altinn organization interface
 */
export interface AltinnOrganization {
  readonly organizationNumber: string;
  readonly name: string;
  readonly organizationForm: string;
  readonly status: string;
  readonly type: string;
  readonly subUnits?: AltinnOrganization[];
}

/**
 * Altinn party interface
 */
export interface AltinnParty {
  readonly partyId: number;
  readonly partyTypeName: string;
  readonly ssn?: string;
  readonly organizationNumber?: string;
  readonly name: string;
  readonly isDeleted: boolean;
  readonly onlyHierarchyElementWithNoAccess: boolean;
  readonly person?: {
    readonly ssn: string;
    readonly name: string;
    readonly firstName: string;
    readonly middleName?: string;
    readonly lastName: string;
    readonly telephoneNumber?: string;
    readonly mobileNumber?: string;
    readonly mailingAddress?: string;
    readonly mailingPostalCode?: string;
    readonly mailingPostalCity?: string;
    readonly addressMunicipalNumber?: string;
    readonly addressMunicipalName?: string;
    readonly addressStreetName?: string;
    readonly addressHouseNumber?: string;
    readonly addressHouseLetter?: string;
    readonly addressPostalCode?: string;
    readonly addressCity?: string;
  };
  readonly organization?: AltinnOrganization;
}

/**
 * Altinn rights interface
 */
export interface AltinnRight {
  readonly rightID: number;
  readonly rightType: string;
  readonly serviceCode: string;
  readonly serviceEditionCode: number;
  readonly action: string;
  readonly rightSourceType: string;
  readonly isMandatoryRole: boolean;
}

/**
 * Altinn Government Services Integration
 * Handles Norwegian Altinn integration with GDPR compliance
 */
export class AltinnService {
  private readonly config: AltinnConfig;
  private accessToken: string | null = null;
  private tokenExpiry: Date | null = null;

  constructor(config: AltinnConfig) {
    this.config = config;
  }

  /**
   * Get access token for Altinn API
   */
  private async getAccessToken(): Promise<string> {
    if (this.accessToken && this.tokenExpiry && new Date() < this.tokenExpiry) {
      return this.accessToken;
    }

    try {
      const tokenUrl = `${this.config.apiBaseUrl}/authentication/api/v1/exchange/maskinporten`;
      
      const response = await fetch(tokenUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Ocp-Apim-Subscription-Key': this.config.subscriptionKey,
        },
        body: JSON.stringify({
          env: this.config.environment,
          scopes: this.config.scope,
        }),
      });

      if (!response.ok) {
        throw new Error(`Failed to get access token: ${response.status} ${response.statusText}`);
      }

      const data = await response.json();
      this.accessToken = data.access_token;
      this.tokenExpiry = new Date(Date.now() + (data.expires_in * 1000));

      console.log('[Altinn] Access token obtained successfully');
      return this.accessToken;
    } catch (error) {
      console.error('[Altinn] Failed to get access token:', error);
      throw new Error(`Altinn authentication failed: ${error.message}`);
    }
  }

  /**
   * Get parties for authenticated user
   */
  public async getParties(): Promise<AltinnParty[]> {
    try {
      const accessToken = await this.getAccessToken();
      const url = `${this.config.apiBaseUrl}/authorization/api/v1/parties`;

      const response = await fetch(url, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${accessToken}`,
          'Ocp-Apim-Subscription-Key': this.config.subscriptionKey,
          'Accept': 'application/json',
        },
      });

      if (!response.ok) {
        throw new Error(`Failed to get parties: ${response.status} ${response.statusText}`);
      }

      const parties = await response.json();
      console.log(`[Altinn] Retrieved ${parties.length} parties`);
      
      return parties as AltinnParty[];
    } catch (error) {
      console.error('[Altinn] Failed to get parties:', error);
      throw new Error(`Altinn parties retrieval failed: ${error.message}`);
    }
  }

  /**
   * Get rights for a specific party
   */
  public async getRights(partyId: number): Promise<AltinnRight[]> {
    try {
      const accessToken = await this.getAccessToken();
      const url = `${this.config.apiBaseUrl}/authorization/api/v1/parties/${partyId}/rights`;

      const response = await fetch(url, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${accessToken}`,
          'Ocp-Apim-Subscription-Key': this.config.subscriptionKey,
          'Accept': 'application/json',
        },
      });

      if (!response.ok) {
        throw new Error(`Failed to get rights: ${response.status} ${response.statusText}`);
      }

      const rights = await response.json();
      console.log(`[Altinn] Retrieved ${rights.length} rights for party ${partyId}`);
      
      return rights as AltinnRight[];
    } catch (error) {
      console.error('[Altinn] Failed to get rights:', error);
      throw new Error(`Altinn rights retrieval failed: ${error.message}`);
    }
  }

  /**
   * Submit form data to Altinn
   */
  public async submitForm(
    partyId: number,
    serviceCode: string,
    serviceEditionCode: number,
    formData: Record<string, unknown>
  ): Promise<{ instanceId: string; status: string }> {
    try {
      const accessToken = await this.getAccessToken();
      const url = `${this.config.apiBaseUrl}/storage/api/v1/instances`;

      const instanceData = {
        instanceOwner: {
          partyId: partyId.toString(),
        },
        appId: `${serviceCode}/${serviceEditionCode}`,
        data: formData,
      };

      const response = await fetch(url, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${accessToken}`,
          'Ocp-Apim-Subscription-Key': this.config.subscriptionKey,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(instanceData),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(`Form submission failed: ${errorData.message || response.statusText}`);
      }

      const result = await response.json();
      console.log(`[Altinn] Form submitted successfully: ${result.id}`);
      
      return {
        instanceId: result.id,
        status: result.status,
      };
    } catch (error) {
      console.error('[Altinn] Form submission failed:', error);
      throw new Error(`Altinn form submission failed: ${error.message}`);
    }
  }

  /**
   * Get organization details by organization number
   */
  public async getOrganization(organizationNumber: string): Promise<AltinnOrganization> {
    try {
      const accessToken = await this.getAccessToken();
      const url = `${this.config.apiBaseUrl}/register/api/v1/organizations/${organizationNumber}`;

      const response = await fetch(url, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${accessToken}`,
          'Ocp-Apim-Subscription-Key': this.config.subscriptionKey,
          'Accept': 'application/json',
        },
      });

      if (!response.ok) {
        throw new Error(`Failed to get organization: ${response.status} ${response.statusText}`);
      }

      const organization = await response.json();
      console.log(`[Altinn] Retrieved organization: ${organization.name}`);
      
      return organization as AltinnOrganization;
    } catch (error) {
      console.error('[Altinn] Failed to get organization:', error);
      throw new Error(`Altinn organization retrieval failed: ${error.message}`);
    }
  }

  /**
   * Validate Norwegian organization number
   */
  public validateOrganizationNumber(organizationNumber: string): boolean {
    // Remove spaces and validate format
    const cleaned = organizationNumber.replace(/\s/g, '');
    
    // Must be 9 digits
    if (!/^\d{9}$/.test(cleaned)) {
      return false;
    }

    // Validate check digit using modulo 11
    const digits = cleaned.split('').map(Number);
    const weights = [3, 2, 7, 6, 5, 4, 3, 2];
    
    let sum = 0;
    for (let i = 0; i < 8; i++) {
      sum += digits[i] * weights[i];
    }
    
    const remainder = sum % 11;
    const checkDigit = remainder === 0 ? 0 : 11 - remainder;
    
    return checkDigit === digits[8];
  }

  /**
   * Validate Norwegian personal number (SSN)
   */
  public validatePersonalNumber(personalNumber: string): boolean {
    // Remove spaces and validate format
    const cleaned = personalNumber.replace(/\s/g, '');
    
    // Must be 11 digits
    if (!/^\d{11}$/.test(cleaned)) {
      return false;
    }

    // Validate date part (DDMMYY)
    const day = parseInt(cleaned.substring(0, 2));
    const month = parseInt(cleaned.substring(2, 4));
    const year = parseInt(cleaned.substring(4, 6));
    
    if (day < 1 || day > 31 || month < 1 || month > 12) {
      return false;
    }

    // Validate check digits using modulo 11
    const digits = cleaned.split('').map(Number);
    const weights1 = [3, 7, 6, 1, 8, 9, 4, 5, 2];
    const weights2 = [5, 4, 3, 2, 7, 6, 5, 4, 3, 2];
    
    let sum1 = 0;
    for (let i = 0; i < 9; i++) {
      sum1 += digits[i] * weights1[i];
    }
    
    const remainder1 = sum1 % 11;
    const checkDigit1 = remainder1 === 0 ? 0 : 11 - remainder1;
    
    if (checkDigit1 !== digits[9]) {
      return false;
    }
    
    let sum2 = 0;
    for (let i = 0; i < 10; i++) {
      sum2 += digits[i] * weights2[i];
    }
    
    const remainder2 = sum2 % 11;
    const checkDigit2 = remainder2 === 0 ? 0 : 11 - remainder2;
    
    return checkDigit2 === digits[10];
  }
}

/**
 * Create Altinn service instance
 */
export function createAltinnService(config: Partial<AltinnConfig> = {}): AltinnService {
  const defaultConfig: AltinnConfig = {
    environment: '{{environment}}' as 'test' | 'production',
    apiBaseUrl: '{{environment}}' === 'production' 
      ? 'https://platform.altinn.no' 
      : 'https://platform.tt02.altinn.no',
    subscriptionKey: process.env.ALTINN_SUBSCRIPTION_KEY || '',
    clientId: process.env.ALTINN_CLIENT_ID || '',
    clientSecret: process.env.ALTINN_CLIENT_SECRET || '',
    scope: 'altinn:serviceowner/instances.read altinn:serviceowner/instances.write',
    timeout: 30000,
    retryAttempts: 3,
  };

  const finalConfig = { ...defaultConfig, ...config };
  return new AltinnService(finalConfig);
}

/**
 * Default Altinn service instance
 */
export const altinnService = createAltinnService();
