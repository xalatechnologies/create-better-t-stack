/**
 * Metro Configuration - Xala UI System Compliant
 * Generated with Xaheen CLI - Mobile Platform (React Native) Configuration
 * 
 * MANDATORY COMPLIANCE RULES:
 * ❌ NO raw HTML elements (div, span, p, h1-h6, button, input, etc.)
 * ✅ ONLY semantic components from @xala-technologies/ui-system
 * ❌ NO hardcoded styling (no style={{}}, no arbitrary Tailwind values)
 * ✅ MANDATORY design token usage for all colors, spacing, typography
 * ✅ Enhanced 8pt Grid System - all spacing in 8px increments
 * ✅ WCAG 2.2 AAA compliance for accessibility
 * ❌ NO hardcoded user-facing text - ALL text must use t() function
 * ✅ MANDATORY localization: English, Norwegian Bokmål, French, Arabic
 * ✅ Explicit TypeScript return types (no 'any' types)
 * ✅ SOLID principles and component composition
 * ✅ Maximum 200 lines per file, 20 lines per function
 */

const { getDefaultConfig, mergeConfig } = require('@react-native/metro-config');

/**
 * Metro configuration
 * https://facebook.github.io/metro/docs/configuration
 */
const config = {
  // Platform-specific configuration
  platforms: ['ios', 'android', 'native', 'web'],

  // Resolver configuration
  resolver: {
    alias: {
      '@': './src',
      '@/components': './src/components',
      '@/layouts': './src/layouts',
      '@/utils': './src/utils',
      '@/hooks': './src/hooks',
      '@/config': './src/config',
      '@/assets': './src/assets',
      '@/navigation': './src/navigation',
      '@/screens': './src/screens',
      '@/services': './src/services',
    },
    
    // Asset extensions for multi-platform support
    assetExts: [
      // Images
      'png', 'jpg', 'jpeg', 'gif', 'webp', 'svg',
      // Fonts
      'ttf', 'otf', 'woff', 'woff2',
      // Audio/Video
      'mp3', 'mp4', 'mov', 'avi',
      // Documents
      'pdf', 'doc', 'docx',
      // Other
      'json', 'xml'
    ],

    // Source extensions
    sourceExts: ['js', 'jsx', 'ts', 'tsx', 'json'],

    // Platform-specific extensions
    platforms: ['ios', 'android', 'native', 'web'],
  },

  // Transformer configuration
  transformer: {
    // Enable Hermes for xaheen performance
    hermesCommand: 'hermesc',
    
    // Asset transformer
    assetPlugins: ['expo-asset/tools/hashAssetFiles'],
    
    // Babel transformer path
    babelTransformerPath: require.resolve('react-native-svg-transformer'),
    
    // SVG transformer configuration
    svgAssetPlugin: {
      httpServerLocation: '/assets/',
      publicPath: '/assets/',
    },

    // Platform-specific transformers
    getTransformOptions: async () => ({
      transform: {
        experimentalImportSupport: false,
        inlineRequires: true,
      },
    }),
  },

  // Serializer configuration
  serializer: {
    // Custom serializer for platform-specific bundles
    customSerializer: require('@react-native/metro-serializer'),
    
    // Module map for platform-specific modules
    getModulesRunBeforeMainModule: () => [
      require.resolve('react-native/Libraries/Core/InitializeCore'),
    ],
  },

  // Server configuration
  server: {
    port: 8081,
    host: 'localhost',
    
    // Enhanced logging for development
    enhanceMiddleware: (middleware) => {
      return (req, res, next) => {
        // Log requests for debugging
        if (process.env.NODE_ENV === 'development') {
          console.log(`[Metro] ${req.method} ${req.url}`);
        }
        return middleware(req, res, next);
      };
    },
  },

  // Watcher configuration
  watchFolders: [
    // Watch additional folders for changes
    './src',
    './assets',
    '../shared', // If using shared code
  ],

  // Cache configuration
  cacheStores: [
    {
      name: 'filesystem',
      options: {
        cacheDirectory: './node_modules/.cache/metro',
      },
    },
  ],

  // Norwegian compliance and accessibility optimizations
  projectRoot: __dirname,
  
  // Multi-platform bundle configuration
  platforms: {
    ios: {
      bundleOutput: 'ios/main.jsbundle',
      assetsDest: 'ios/assets',
    },
    android: {
      bundleOutput: 'android/app/src/main/assets/index.android.bundle',
      assetsDest: 'android/app/src/main/res',
    },
  },

  // Performance optimizations
  maxWorkers: require('os').cpus().length,
  
  // Development configuration
  resetCache: process.env.NODE_ENV === 'development',
  
  // Production optimizations
  minifierConfig: {
    // Terser configuration for production builds
    keep_fnames: true,
    mangle: {
      keep_fnames: true,
    },
  },
};

module.exports = mergeConfig(getDefaultConfig(__dirname), config);
