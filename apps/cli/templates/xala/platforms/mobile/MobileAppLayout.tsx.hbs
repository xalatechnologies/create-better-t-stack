{{#if typescript}}'use client';{{/if}}

/**
 * MobileAppLayout Component - Xala UI System Compliant
 * Generated with Xaheen CLI - Mobile Platform Specific
 * 
 * MANDATORY COMPLIANCE RULES:
 * ❌ NO raw HTML elements (div, span, p, h1-h6, button, input, etc.)
 * ✅ ONLY semantic components from @xala-technologies/ui-system
 * ❌ NO hardcoded styling (no style={{}}, no arbitrary Tailwind values)
 * ✅ MANDATORY design token usage for all colors, spacing, typography
 * ✅ Enhanced 8pt Grid System - all spacing in 8px increments
 * ✅ WCAG 2.2 AAA compliance for accessibility
 * ❌ NO hardcoded user-facing text - ALL text must use t() function
 * ✅ MANDATORY localization: English, Norwegian Bokmål, French, Arabic
 * ✅ Explicit TypeScript return types (no 'any' types)
 * ✅ SOLID principles and component composition
 * ✅ Maximum 200 lines per file, 20 lines per function
 * 
 * Mobile Platform Features:
 * - Native mobile navigation patterns
 * - Touch-optimized interactions
 * - Safe area handling
 * - Gesture support
 * - Offline state management
 * - Push notification integration
 * - Norwegian mobile UX patterns
 */

{{#if typescript}}
import React from 'react';
import { useTranslation } from 'next-intl';
import {
  Box,
  Stack,
  Typography,
  Button,
  Icon,
  Badge,
  Avatar,
  BottomNavigation,
  MobileHeader,
  ActionSheet,
  FloatingActionButton,
  SafeArea,
  StatusBar,
  SwipeGesture,
  PullToRefresh,
  Toast,
  Modal
} from '@xala-technologies/ui-system';
import { 
  Home,
  Search,
  Bell,
  User,
  Menu,
  ArrowLeft,
  MoreVertical,
  Plus,
  Settings,
  Share,
  Heart
} from 'lucide-react';

interface MobileAppLayoutProps {
  children: React.ReactNode;
  title?: string;
  showHeader?: boolean;
  showBackButton?: boolean;
  onBackPress?: () => void;
  headerActions?: React.ReactNode;
  navigationItems?: MobileNavItem[];
  currentRoute?: string;
  onNavigate?: (route: string) => void;
  showFloatingAction?: boolean;
  floatingActionIcon?: React.ComponentType;
  onFloatingAction?: () => void;
  onRefresh?: () => Promise<void>;
  refreshing?: boolean;
  statusBarStyle?: 'light' | 'dark';
  safeAreaColor?: string;
  locale?: string;
  theme?: 'light' | 'dark' | 'high-contrast';
  offlineMode?: boolean;
  notifications?: NotificationItem[];
}

interface MobileNavItem {
  id: string;
  label: string;
  icon: React.ComponentType;
  route: string;
  badge?: string | number;
}

interface NotificationItem {
  id: string;
  title: string;
  message: string;
  type: 'info' | 'success' | 'warning' | 'error';
  timestamp: Date;
}
{{else}}
import React from 'react';
import { useTranslation } from 'next-intl';
import {
  Box,
  Stack,
  Typography,
  Button,
  Icon,
  Badge,
  Avatar,
  BottomNavigation,
  MobileHeader,
  ActionSheet,
  FloatingActionButton,
  SafeArea,
  StatusBar,
  SwipeGesture,
  PullToRefresh,
  Toast,
  Modal
} from '@xala-technologies/ui-system';
import { 
  Home,
  Search,
  Bell,
  User,
  Menu,
  ArrowLeft,
  MoreVertical,
  Plus,
  Settings,
  Share,
  Heart
} from 'lucide-react';
{{/if}}

/**
 * Default mobile navigation items
 */
const defaultNavItems{{#if typescript}}: MobileNavItem[]{{/if}} = [
  {
    id: 'home',
    label: 'navigation.home',
    icon: Home,
    route: '/',
  },
  {
    id: 'search',
    label: 'navigation.search',
    icon: Search,
    route: '/search',
  },
  {
    id: 'notifications',
    label: 'navigation.notifications',
    icon: Bell,
    route: '/notifications',
    badge: 3,
  },
  {
    id: 'profile',
    label: 'navigation.profile',
    icon: User,
    route: '/profile',
  },
];

/**
 * MobileAppLayout - Native mobile app experience
 * Optimized for touch interactions and Norwegian mobile patterns
 */
{{#if typescript}}
export default function MobileAppLayout({
  children,
  title,
  showHeader = true,
  showBackButton = false,
  onBackPress,
  headerActions,
  navigationItems = defaultNavItems,
  currentRoute = '/',
  onNavigate,
  showFloatingAction = false,
  floatingActionIcon = Plus,
  onFloatingAction,
  onRefresh,
  refreshing = false,
  statusBarStyle = 'dark',
  safeAreaColor = 'background',
  locale = 'en',
  theme = 'light',
  offlineMode = false,
  notifications = []
}: MobileAppLayoutProps): React.ReactElement {
{{else}}
export default function MobileAppLayout({
  children,
  title,
  showHeader = true,
  showBackButton = false,
  onBackPress,
  headerActions,
  navigationItems = defaultNavItems,
  currentRoute = '/',
  onNavigate,
  showFloatingAction = false,
  floatingActionIcon = Plus,
  onFloatingAction,
  onRefresh,
  refreshing = false,
  statusBarStyle = 'dark',
  safeAreaColor = 'background',
  locale = 'en',
  theme = 'light',
  offlineMode = false,
  notifications = []
}) {
{{/if}}
  const { t } = useTranslation();
  const [showActionSheet, setShowActionSheet] = React.useState(false);
  const [showNotifications, setShowNotifications] = React.useState(false);

  const handleNavigation = (route{{#if typescript}}: string{{/if}}){{#if typescript}}: void{{/if}} => {
    if (onNavigate) {
      onNavigate(route);
    }
  };

  const handleRefresh = {{#if typescript}}async (): Promise<void>{{/if}} => {
    if (onRefresh) {
      await onRefresh();
    }
  };

  const renderStatusBar = {{#if typescript}}(): React.ReactElement{{/if}} => (
    <StatusBar
      style={statusBarStyle}
      backgroundColor={safeAreaColor}
      translucent={false}
    />
  );

  const renderHeader = {{#if typescript}}(): React.ReactElement | null{{/if}} => {
    if (!showHeader) return null;

    return (
      <MobileHeader
        backgroundColor="card"
        borderBottom="1"
        paddingHorizontal="4"
        paddingVertical="3"
        height="14"
      >
        <Stack direction="horizontal" align="center" justify="between" height="full">
          {/* Left Section */}
          <Stack direction="horizontal" align="center" spacing="3">
            {showBackButton && (
              <Button
                variant="ghost"
                size="sm"
                onClick={onBackPress}
                accessibilityLabel={t('navigation.back', 'Go back')}
              >
                <Icon component={ArrowLeft} size="md" />
              </Button>
            )}

            {title && (
              <Typography variant="heading" size="lg" weight="medium" numberOfLines={1}>
                {t(title, title)}
              </Typography>
            )}
          </Stack>

          {/* Right Section */}
          <Stack direction="horizontal" align="center" spacing="2">
            {offlineMode && (
              <Badge variant="warning" size="sm">
                {t('status.offline', 'Offline')}
              </Badge>
            )}

            {notifications.length > 0 && (
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setShowNotifications(true)}
                accessibilityLabel={t('notifications.open', 'Open notifications')}
              >
                <Icon component={Bell} size="md" />
                <Badge variant="destructive" size="xs" position="absolute" top="-1" right="-1">
                  {notifications.length}
                </Badge>
              </Button>
            )}

            {headerActions}

            <Button
              variant="ghost"
              size="sm"
              onClick={() => setShowActionSheet(true)}
              accessibilityLabel={t('menu.open', 'Open menu')}
            >
              <Icon component={MoreVertical} size="md" />
            </Button>
          </Stack>
        </Stack>
      </MobileHeader>
    );
  };

  const renderBottomNavigation = {{#if typescript}}(): React.ReactElement{{/if}} => (
    <BottomNavigation
      backgroundColor="card"
      borderTop="1"
      paddingHorizontal="2"
      paddingVertical="2"
      safeAreaBottom={true}
    >
      <Stack direction="horizontal" align="center" justify="around" width="full">
        {navigationItems.map((item) => {
          const isActive = currentRoute === item.route;
          
          return (
            <Button
              key={item.id}
              variant="ghost"
              size="sm"
              onClick={() => handleNavigation(item.route)}
              accessibilityLabel={t(item.label, item.label)}
              accessibilityState={{ selected: isActive }}
            >
              <Stack direction="vertical" align="center" spacing="1">
                <Box position="relative">
                  <Icon
                    component={item.icon}
                    size="md"
                    color={isActive ? 'primary' : 'muted'}
                  />
                  {item.badge && (
                    <Badge
                      variant="destructive"
                      size="xs"
                      position="absolute"
                      top="-2"
                      right="-2"
                    >
                      {item.badge}
                    </Badge>
                  )}
                </Box>
                
                <Typography
                  variant="caption"
                  size="xs"
                  color={isActive ? 'primary' : 'muted'}
                  textAlign="center"
                >
                  {t(item.label, item.label)}
                </Typography>
              </Stack>
            </Button>
          );
        })}
      </Stack>
    </BottomNavigation>
  );

  const renderFloatingAction = {{#if typescript}}(): React.ReactElement | null{{/if}} => {
    if (!showFloatingAction) return null;

    return (
      <FloatingActionButton
        icon={floatingActionIcon}
        onPress={onFloatingAction}
        position="bottom-right"
        accessibilityLabel={t('actions.create', 'Create new item')}
      />
    );
  };

  const renderActionSheet = {{#if typescript}}(): React.ReactElement{{/if}} => (
    <ActionSheet
      open={showActionSheet}
      onOpenChange={setShowActionSheet}
      title={t('menu.title', 'Menu')}
    >
      <ActionSheet.Item
        icon={Settings}
        onPress={() => {
          setShowActionSheet(false);
          handleNavigation('/settings');
        }}
      >
        {t('menu.settings', 'Settings')}
      </ActionSheet.Item>
      
      <ActionSheet.Item
        icon={Share}
        onPress={() => {
          setShowActionSheet(false);
          // Handle share
        }}
      >
        {t('menu.share', 'Share App')}
      </ActionSheet.Item>
      
      <ActionSheet.Item
        icon={Heart}
        onPress={() => {
          setShowActionSheet(false);
          // Handle feedback
        }}
      >
        {t('menu.feedback', 'Send Feedback')}
      </ActionSheet.Item>
      
      <ActionSheet.Separator />
      
      <ActionSheet.Item
        variant="destructive"
        onPress={() => {
          setShowActionSheet(false);
          // Handle logout
        }}
      >
        {t('menu.logout', 'Logout')}
      </ActionSheet.Item>
    </ActionSheet>
  );

  const renderNotificationModal = {{#if typescript}}(): React.ReactElement{{/if}} => (
    <Modal
      open={showNotifications}
      onOpenChange={setShowNotifications}
      title={t('notifications.title', 'Notifications')}
      size="full"
    >
      <Stack direction="vertical" spacing="4" padding="4">
        {notifications.length === 0 ? (
          <Box textAlign="center" paddingVertical="12">
            <Icon component={Bell} size="xl" color="muted" />
            <Typography variant="body" color="muted" marginTop="4">
              {t('notifications.empty', 'No notifications')}
            </Typography>
          </Box>
        ) : (
          notifications.map((notification) => (
            <Box
              key={notification.id}
              padding="4"
              backgroundColor="card"
              borderRadius="md"
              borderLeft="4"
              borderLeftColor={
                notification.type === 'error'
                  ? 'destructive'
                  : notification.type === 'warning'
                  ? 'warning'
                  : notification.type === 'success'
                  ? 'success'
                  : 'primary'
              }
            >
              <Stack direction="vertical" spacing="2">
                <Typography variant="body" weight="medium">
                  {notification.title}
                </Typography>
                <Typography variant="body" size="sm" color="muted">
                  {notification.message}
                </Typography>
                <Typography variant="caption" size="xs" color="muted">
                  {new Intl.DateTimeFormat(locale, {
                    hour: '2-digit',
                    minute: '2-digit',
                  }).format(notification.timestamp)}
                </Typography>
              </Stack>
            </Box>
          ))
        )}
      </Stack>
    </Modal>
  );

  const renderContent = {{#if typescript}}(): React.ReactElement{{/if}} => {
    const content = (
      <Box
        flex="1"
        backgroundColor="background"
        paddingTop={showHeader ? '0' : '4'}
        paddingBottom="20" // Space for bottom navigation
      >
        {children}
      </Box>
    );

    // Wrap with pull-to-refresh if onRefresh is provided
    if (onRefresh) {
      return (
        <PullToRefresh
          refreshing={refreshing}
          onRefresh={handleRefresh}
          title={t('refresh.pullToRefresh', 'Pull to refresh')}
        >
          {content}
        </PullToRefresh>
      );
    }

    return content;
  };

  return (
    <SafeArea backgroundColor={safeAreaColor} flex="1">
      {renderStatusBar()}
      
      <Stack direction="vertical" flex="1">
        {renderHeader()}
        {renderContent()}
        {renderBottomNavigation()}
      </Stack>

      {renderFloatingAction()}
      {renderActionSheet()}
      {renderNotificationModal()}

      {/* Toast notifications */}
      <Toast />
    </SafeArea>
  );
}

{{#if includeExamples}}
// Example usage:
/*
import MobileAppLayout from '@/platforms/mobile/MobileAppLayout';
import { Camera, MessageCircle } from 'lucide-react';

export default function MobileApp() {
  const [currentRoute, setCurrentRoute] = useState('/');
  const [notifications, setNotifications] = useState([
    {
      id: '1',
      title: 'New message',
      message: 'You have a new message from John',
      type: 'info',
      timestamp: new Date(),
    },
  ]);

  const customNavItems = [
    {
      id: 'home',
      label: 'navigation.home',
      icon: Home,
      route: '/',
    },
    {
      id: 'chat',
      label: 'navigation.chat',
      icon: MessageCircle,
      route: '/chat',
      badge: 2,
    },
    {
      id: 'camera',
      label: 'navigation.camera',
      icon: Camera,
      route: '/camera',
    },
    {
      id: 'profile',
      label: 'navigation.profile',
      icon: User,
      route: '/profile',
    },
  ];

  return (
    <MobileAppLayout
      title="app.title"
      navigationItems={customNavItems}
      currentRoute={currentRoute}
      onNavigate={setCurrentRoute}
      showFloatingAction={true}
      onFloatingAction={handleCreateNew}
      onRefresh={handleRefresh}
      notifications={notifications}
      locale="nb"
      theme="light"
    >
      <Box padding="4">
        <Typography variant="heading" size="xl">
          Mobile Content
        </Typography>
      </Box>
    </MobileAppLayout>
  );
}
*/
{{/if}}
