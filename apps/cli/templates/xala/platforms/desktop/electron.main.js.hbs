/**
 * Electron Main Process - Xala UI System Compliant
 * Generated with Xaheen CLI - Desktop Platform (Electron) Main Process
 * 
 * MANDATORY COMPLIANCE RULES:
 * ❌ NO raw HTML elements (div, span, p, h1-h6, button, input, etc.)
 * ✅ ONLY semantic components from @xala-technologies/ui-system
 * ❌ NO hardcoded styling (no style={{}}, no arbitrary Tailwind values)
 * ✅ MANDATORY design token usage for all colors, spacing, typography
 * ✅ Enhanced 8pt Grid System - all spacing in 8px increments
 * ✅ WCAG 2.2 AAA compliance for accessibility
 * ❌ NO hardcoded user-facing text - ALL text must use t() function
 * ✅ MANDATORY localization: English, Norwegian Bokmål, French, Arabic
 * ✅ Explicit TypeScript return types (no 'any' types)
 * ✅ SOLID principles and component composition
 * ✅ Maximum 200 lines per file, 20 lines per function
 */

const { app, BrowserWindow, Menu, ipcMain, shell, dialog } = require('electron');
const { autoUpdater } = require('electron-updater');
const windowStateKeeper = require('electron-window-state');
const Store = require('electron-store');
const path = require('path');
const isDev = require('electron-is-dev');

// Initialize secure store for user preferences
const store = new Store({
  name: '{{projectName}}-preferences',
  defaults: {
    locale: 'nb', // Norwegian default
    theme: 'light',
    accessibility: {
      highContrast: false,
      reducedMotion: false,
      screenReader: false,
    },
    compliance: {
      gdprConsent: false,
      auditLogging: true,
      nsmClassification: 'BEGRENSET',
    },
  },
});

let mainWindow = null;
let splashWindow = null;

/**
 * Create the main application window
 */
function createMainWindow() {
  // Restore window state or set defaults
  const mainWindowState = windowStateKeeper({
    defaultWidth: 1200,
    defaultHeight: 800,
    minWidth: 800,
    minHeight: 600,
  });

  // Create the browser window with Norwegian accessibility standards
  mainWindow = new BrowserWindow({
    x: mainWindowState.x,
    y: mainWindowState.y,
    width: mainWindowState.width,
    height: mainWindowState.height,
    minWidth: 800,
    minHeight: 600,
    show: false, // Don't show until ready
    titleBarStyle: process.platform === 'darwin' ? 'hiddenInset' : 'default',
    webPreferences: {
      nodeIntegration: false,
      contextIsolation: true,
      enableRemoteModule: false,
      preload: path.join(__dirname, 'preload.js'),
      webSecurity: true,
      allowRunningInsecureContent: false,
      experimentalFeatures: false,
    },
    // Norwegian accessibility compliance
    accessibleTitle: '{{appName}}',
    // Security settings
    frame: true,
    transparent: false,
  });

  // Manage window state
  mainWindowState.manage(mainWindow);

  // Load the app
  const startUrl = isDev 
    ? 'http://localhost:3000' 
    : `file://${path.join(__dirname, '../out/index.html')}`;
  
  mainWindow.loadURL(startUrl);

  // Show window when ready
  mainWindow.once('ready-to-show', () => {
    if (splashWindow) {
      splashWindow.close();
      splashWindow = null;
    }
    
    mainWindow.show();
    
    // Focus for accessibility
    mainWindow.focus();
    
    // Auto-updater check
    if (!isDev) {
      autoUpdater.checkForUpdatesAndNotify();
    }
  });

  // Handle window closed
  mainWindow.on('closed', () => {
    mainWindow = null;
  });

  // Security: Prevent new window creation
  mainWindow.webContents.setWindowOpenHandler(({ url }) => {
    shell.openExternal(url);
    return { action: 'deny' };
  });

  // Norwegian compliance: Audit logging
  mainWindow.webContents.on('did-finish-load', () => {
    console.log('[Audit] Application loaded successfully');
    
    // Send platform info to renderer
    mainWindow.webContents.send('platform-info', {
      platform: 'desktop',
      version: app.getVersion(),
      locale: store.get('locale'),
      theme: store.get('theme'),
      accessibility: store.get('accessibility'),
      compliance: store.get('compliance'),
    });
  });

  return mainWindow;
}

/**
 * Create splash screen for better UX
 */
function createSplashWindow() {
  splashWindow = new BrowserWindow({
    width: 400,
    height: 300,
    frame: false,
    alwaysOnTop: true,
    transparent: true,
    webPreferences: {
      nodeIntegration: false,
      contextIsolation: true,
    },
  });

  splashWindow.loadFile(path.join(__dirname, 'splash.html'));
  
  splashWindow.on('closed', () => {
    splashWindow = null;
  });

  return splashWindow;
}

/**
 * Create application menu with Norwegian localization
 */
function createMenu() {
  const locale = store.get('locale', 'nb');
  
  // Menu templates based on locale
  const menuTemplates = {
    nb: {
      file: 'Fil',
      edit: 'Rediger',
      view: 'Vis',
      window: 'Vindu',
      help: 'Hjelp',
      quit: 'Avslutt',
      about: 'Om {{appName}}',
      preferences: 'Innstillinger',
    },
    en: {
      file: 'File',
      edit: 'Edit',
      view: 'View',
      window: 'Window',
      help: 'Help',
      quit: 'Quit',
      about: 'About {{appName}}',
      preferences: 'Preferences',
    },
  };

  const labels = menuTemplates[locale] || menuTemplates.en;

  const template = [
    {
      label: labels.file,
      submenu: [
        {
          label: labels.preferences,
          accelerator: 'CmdOrCtrl+,',
          click: () => {
            mainWindow.webContents.send('open-preferences');
          },
        },
        { type: 'separator' },
        {
          label: labels.quit,
          accelerator: process.platform === 'darwin' ? 'Cmd+Q' : 'Ctrl+Q',
          click: () => {
            app.quit();
          },
        },
      ],
    },
    {
      label: labels.edit,
      submenu: [
        { role: 'undo' },
        { role: 'redo' },
        { type: 'separator' },
        { role: 'cut' },
        { role: 'copy' },
        { role: 'paste' },
        { role: 'selectall' },
      ],
    },
    {
      label: labels.view,
      submenu: [
        { role: 'reload' },
        { role: 'forceReload' },
        { role: 'toggleDevTools' },
        { type: 'separator' },
        { role: 'resetZoom' },
        { role: 'zoomIn' },
        { role: 'zoomOut' },
        { type: 'separator' },
        { role: 'togglefullscreen' },
      ],
    },
    {
      label: labels.window,
      submenu: [
        { role: 'minimize' },
        { role: 'close' },
      ],
    },
    {
      label: labels.help,
      submenu: [
        {
          label: labels.about,
          click: () => {
            dialog.showMessageBox(mainWindow, {
              type: 'info',
              title: labels.about,
              message: '{{appName}}',
              detail: `Version: ${app.getVersion()}\nElectron: ${process.versions.electron}\nNode: ${process.versions.node}`,
            });
          },
        },
      ],
    },
  ];

  const menu = Menu.buildFromTemplate(template);
  Menu.setApplicationMenu(menu);
}

/**
 * App event handlers
 */
app.whenReady().then(() => {
  // Create splash screen first
  createSplashWindow();
  
  // Create main window after short delay
  setTimeout(() => {
    createMainWindow();
    createMenu();
  }, 1500);

  // macOS: Re-create window when dock icon is clicked
  app.on('activate', () => {
    if (BrowserWindow.getAllWindows().length === 0) {
      createMainWindow();
    }
  });
});

// Quit when all windows are closed
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

// Security: Prevent navigation to external URLs
app.on('web-contents-created', (event, contents) => {
  contents.on('will-navigate', (navigationEvent, navigationUrl) => {
    const parsedUrl = new URL(navigationUrl);
    
    if (parsedUrl.origin !== 'http://localhost:3000' && !navigationUrl.startsWith('file://')) {
      navigationEvent.preventDefault();
      shell.openExternal(navigationUrl);
    }
  });
});

/**
 * IPC handlers for renderer communication
 */
ipcMain.handle('get-platform-info', () => {
  return {
    platform: 'desktop',
    version: app.getVersion(),
    locale: store.get('locale'),
    theme: store.get('theme'),
    accessibility: store.get('accessibility'),
    compliance: store.get('compliance'),
  };
});

ipcMain.handle('update-preferences', (event, preferences) => {
  store.set(preferences);
  
  // Broadcast to all windows
  BrowserWindow.getAllWindows().forEach(window => {
    window.webContents.send('preferences-updated', store.store);
  });
  
  return store.store;
});

ipcMain.handle('show-save-dialog', async (event, options) => {
  const result = await dialog.showSaveDialog(mainWindow, options);
  return result;
});

ipcMain.handle('show-open-dialog', async (event, options) => {
  const result = await dialog.showOpenDialog(mainWindow, options);
  return result;
});

// Auto-updater events
autoUpdater.on('checking-for-update', () => {
  console.log('[Auto-Updater] Checking for update...');
});

autoUpdater.on('update-available', (info) => {
  console.log('[Auto-Updater] Update available.');
});

autoUpdater.on('update-not-available', (info) => {
  console.log('[Auto-Updater] Update not available.');
});

autoUpdater.on('error', (err) => {
  console.log('[Auto-Updater] Error in auto-updater. ' + err);
});

autoUpdater.on('download-progress', (progressObj) => {
  let log_message = "Download speed: " + progressObj.bytesPerSecond;
  log_message = log_message + ' - Downloaded ' + progressObj.percent + '%';
  log_message = log_message + ' (' + progressObj.transferred + "/" + progressObj.total + ')';
  console.log(log_message);
});

autoUpdater.on('update-downloaded', (info) => {
  console.log('[Auto-Updater] Update downloaded');
  autoUpdater.quitAndInstall();
});
