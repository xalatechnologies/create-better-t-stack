/**
 * Electron Preload Script - Xala UI System Compliant
 * Generated with Xaheen CLI - Desktop Platform (Electron) Preload Script
 * 
 * MANDATORY COMPLIANCE RULES:
 * ❌ NO raw HTML elements (div, span, p, h1-h6, button, input, etc.)
 * ✅ ONLY semantic components from @xala-technologies/ui-system
 * ❌ NO hardcoded styling (no style={{}}, no arbitrary Tailwind values)
 * ✅ MANDATORY design token usage for all colors, spacing, typography
 * ✅ Enhanced 8pt Grid System - all spacing in 8px increments
 * ✅ WCAG 2.2 AAA compliance for accessibility
 * ❌ NO hardcoded user-facing text - ALL text must use t() function
 * ✅ MANDATORY localization: English, Norwegian Bokmål, French, Arabic
 * ✅ Explicit TypeScript return types (no 'any' types)
 * ✅ SOLID principles and component composition
 * ✅ Maximum 200 lines per file, 20 lines per function
 */

const { contextBridge, ipcRenderer } = require('electron');

/**
 * Secure API bridge between main and renderer processes
 * Following Norwegian security standards and GDPR compliance
 */
const electronAPI = {
  // Platform information
  platform: {
    /**
     * Get platform information
     */
    getInfo: () => ipcRenderer.invoke('get-platform-info'),
    
    /**
     * Listen for platform updates
     */
    onPlatformUpdate: (callback) => {
      ipcRenderer.on('platform-info', (event, data) => callback(data));
    },
    
    /**
     * Remove platform update listener
     */
    removePlatformUpdateListener: () => {
      ipcRenderer.removeAllListeners('platform-info');
    },
  },

  // User preferences management
  preferences: {
    /**
     * Update user preferences
     */
    update: (preferences) => ipcRenderer.invoke('update-preferences', preferences),
    
    /**
     * Listen for preference updates
     */
    onUpdate: (callback) => {
      ipcRenderer.on('preferences-updated', (event, preferences) => callback(preferences));
    },
    
    /**
     * Remove preference update listener
     */
    removeUpdateListener: () => {
      ipcRenderer.removeAllListeners('preferences-updated');
    },
  },

  // File system operations (secure)
  files: {
    /**
     * Show save dialog
     */
    showSaveDialog: (options = {}) => {
      const defaultOptions = {
        title: 'Save File',
        defaultPath: '~/Documents',
        filters: [
          { name: 'All Files', extensions: ['*'] },
          { name: 'Text Files', extensions: ['txt'] },
          { name: 'JSON Files', extensions: ['json'] },
          { name: 'PDF Files', extensions: ['pdf'] },
        ],
      };
      
      return ipcRenderer.invoke('show-save-dialog', { ...defaultOptions, ...options });
    },
    
    /**
     * Show open dialog
     */
    showOpenDialog: (options = {}) => {
      const defaultOptions = {
        title: 'Open File',
        defaultPath: '~/Documents',
        properties: ['openFile'],
        filters: [
          { name: 'All Files', extensions: ['*'] },
          { name: 'Text Files', extensions: ['txt'] },
          { name: 'JSON Files', extensions: ['json'] },
          { name: 'PDF Files', extensions: ['pdf'] },
        ],
      };
      
      return ipcRenderer.invoke('show-open-dialog', { ...defaultOptions, ...options });
    },
  },

  // Window management
  window: {
    /**
     * Listen for window events
     */
    onFocus: (callback) => {
      ipcRenderer.on('window-focus', callback);
    },
    
    /**
     * Listen for window blur
     */
    onBlur: (callback) => {
      ipcRenderer.on('window-blur', callback);
    },
    
    /**
     * Listen for window resize
     */
    onResize: (callback) => {
      ipcRenderer.on('window-resize', callback);
    },
    
    /**
     * Remove window event listeners
     */
    removeListeners: () => {
      ipcRenderer.removeAllListeners('window-focus');
      ipcRenderer.removeAllListeners('window-blur');
      ipcRenderer.removeAllListeners('window-resize');
    },
  },

  // Application lifecycle
  app: {
    /**
     * Listen for app updates
     */
    onUpdateAvailable: (callback) => {
      ipcRenderer.on('update-available', callback);
    },
    
    /**
     * Listen for app update downloaded
     */
    onUpdateDownloaded: (callback) => {
      ipcRenderer.on('update-downloaded', callback);
    },
    
    /**
     * Listen for app update progress
     */
    onUpdateProgress: (callback) => {
      ipcRenderer.on('update-progress', callback);
    },
    
    /**
     * Remove app update listeners
     */
    removeUpdateListeners: () => {
      ipcRenderer.removeAllListeners('update-available');
      ipcRenderer.removeAllListeners('update-downloaded');
      ipcRenderer.removeAllListeners('update-progress');
    },
  },

  // Norwegian compliance and audit logging
  compliance: {
    /**
     * Log audit event (GDPR compliant)
     */
    logAuditEvent: (event) => {
      const auditData = {
        timestamp: new Date().toISOString(),
        event: event.type,
        details: event.details,
        userId: event.userId || 'anonymous',
        sessionId: event.sessionId,
        // Norwegian data classification
        classification: event.classification || 'BEGRENSET',
      };
      
      return ipcRenderer.invoke('log-audit-event', auditData);
    },
    
    /**
     * Get compliance status
     */
    getStatus: () => ipcRenderer.invoke('get-compliance-status'),
    
    /**
     * Update GDPR consent
     */
    updateGdprConsent: (consent) => ipcRenderer.invoke('update-gdpr-consent', consent),
  },

  // Accessibility features
  accessibility: {
    /**
     * Get accessibility preferences
     */
    getPreferences: () => ipcRenderer.invoke('get-accessibility-preferences'),
    
    /**
     * Update accessibility preferences
     */
    updatePreferences: (preferences) => {
      return ipcRenderer.invoke('update-accessibility-preferences', preferences);
    },
    
    /**
     * Listen for accessibility changes
     */
    onPreferencesChange: (callback) => {
      ipcRenderer.on('accessibility-preferences-changed', (event, preferences) => {
        callback(preferences);
      });
    },
    
    /**
     * Remove accessibility listeners
     */
    removeListeners: () => {
      ipcRenderer.removeAllListeners('accessibility-preferences-changed');
    },
  },

  // Localization support
  localization: {
    /**
     * Get current locale
     */
    getLocale: () => ipcRenderer.invoke('get-locale'),
    
    /**
     * Set locale
     */
    setLocale: (locale) => ipcRenderer.invoke('set-locale', locale),
    
    /**
     * Get available locales
     */
    getAvailableLocales: () => ipcRenderer.invoke('get-available-locales'),
    
    /**
     * Listen for locale changes
     */
    onLocaleChange: (callback) => {
      ipcRenderer.on('locale-changed', (event, locale) => callback(locale));
    },
    
    /**
     * Remove locale listeners
     */
    removeLocaleListeners: () => {
      ipcRenderer.removeAllListeners('locale-changed');
    },
  },

  // Security utilities
  security: {
    /**
     * Validate input (XSS protection)
     */
    validateInput: (input) => {
      // Basic XSS protection
      const sanitized = input
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;')
        .replace(/"/g, '&quot;')
        .replace(/'/g, '&#x27;')
        .replace(/\//g, '&#x2F;');
      
      return sanitized;
    },
    
    /**
     * Check if URL is safe
     */
    isSafeUrl: (url) => {
      try {
        const parsedUrl = new URL(url);
        const allowedProtocols = ['http:', 'https:', 'mailto:', 'tel:'];
        return allowedProtocols.includes(parsedUrl.protocol);
      } catch {
        return false;
      }
    },
  },
};

/**
 * Expose secure API to renderer process
 * Following principle of least privilege
 */
contextBridge.exposeInMainWorld('electronAPI', electronAPI);

/**
 * Platform detection for renderer
 */
contextBridge.exposeInMainWorld('platform', {
  isElectron: true,
  isDesktop: true,
  isMobile: false,
  isWeb: false,
  name: 'desktop',
  version: process.versions.electron,
});

/**
 * Norwegian compliance utilities
 */
contextBridge.exposeInMainWorld('norwegianCompliance', {
  // Data classification levels
  classifications: {
    OFFENTLIG: 'OFFENTLIG',      // Public
    BEGRENSET: 'BEGRENSET',      // Restricted
    KONFIDENSIELT: 'KONFIDENSIELT', // Confidential
    STRENGT_KONFIDENSIELT: 'STRENGT_KONFIDENSIELT', // Strictly Confidential
  },
  
  // GDPR compliance helpers
  gdpr: {
    consentTypes: {
      NECESSARY: 'necessary',
      ANALYTICS: 'analytics',
      MARKETING: 'marketing',
      PREFERENCES: 'preferences',
    },
    
    dataRetentionPeriods: {
      SESSION: '1 day',
      SHORT_TERM: '30 days',
      MEDIUM_TERM: '1 year',
      LONG_TERM: '7 years',
    },
  },
  
  // Norwegian cultural helpers
  culture: {
    dateFormat: 'dd.MM.yyyy',
    timeFormat: 'HH:mm',
    currency: 'NOK',
    language: 'nb-NO',
  },
});

// Development mode helpers
if (process.env.NODE_ENV === 'development') {
  contextBridge.exposeInMainWorld('dev', {
    openDevTools: () => ipcRenderer.invoke('open-dev-tools'),
    reloadApp: () => ipcRenderer.invoke('reload-app'),
    getAppInfo: () => ipcRenderer.invoke('get-app-info'),
  });
}
