# {{projectName}}

{{#if description}}
{{description}}
{{/if}}

> Generated with **Xaheen CLI** using Xala UI System v5 - Professional, accessible, and compliant by design.

/**
 * MANDATORY COMPLIANCE RULES:
 * ❌ NO raw HTML elements (div, span, p, h1-h6, button, input, etc.)
 * ✅ ONLY semantic components from @xala-technologies/ui-system
 * ❌ NO hardcoded styling (no style={{}}, no arbitrary Tailwind values)
 * ✅ MANDATORY design token usage for all colors, spacing, typography
 * ✅ Enhanced 8pt Grid System - all spacing in 8px increments
 * ✅ WCAG 2.2 AAA compliance for accessibility
 * ❌ NO hardcoded user-facing text - ALL text must use t() function
 * ✅ MANDATORY localization: English, Norwegian Bokmål, French, Arabic
 * ✅ Explicit TypeScript return types (no 'any' types)
 * ✅ SOLID principles and component composition
 * ✅ Maximum 200 lines per file, 20 lines per function
 */

## 🚀 Quick Start

```bash
# Install dependencies
{{#if packageManager}}{{packageManager}}{{else}}bun{{/if}} install

# Start development server
{{#if packageManager}}{{packageManager}}{{else}}bun{{/if}} run dev

# Build for production
{{#if packageManager}}{{packageManager}}{{else}}bun{{/if}} run build

# Run tests
{{#if packageManager}}{{packageManager}}{{else}}bun{{/if}} run test

# Check accessibility compliance
{{#if packageManager}}{{packageManager}}{{else}}bun{{/if}} run test:a11y

# Lint code
{{#if packageManager}}{{packageManager}}{{else}}bun{{/if}} run lint

# Type check
{{#if packageManager}}{{packageManager}}{{else}}bun{{/if}} run type-check
```

## 🎨 Xala UI System v5 Features

This project leverages the full power of Xala UI System v5:

### 🏗️ Industry Templates
{{#if industryTemplate}}
- **{{industryTemplate}} Template**: Optimized for {{industryTemplate}} industry
# {{appName}} - Xala UI System Multi-Platform Project

Generated with Xaheen CLI - Professional Multi-Platform Application with Norwegian Compliance

## 🚀 Overview

This project was generated using the **Xaheen CLI** with the **Xala UI System v5** template. It provides a complete, production-ready foundation for building modern **multi-platform applications** (Web, Mobile, Desktop) with Norwegian compliance, accessibility, and professional design standards.

## ✨ Features

### 🎨 **Design System**
- **Xala UI System v5**: Complete design system with semantic components
- **Enhanced 8pt Grid**: Professional spacing system (8px increments)
- **Design Tokens**: Token-based styling system with no hardcoded values
- **WCAG 2.2 AAA**: 7.0:1 color contrast ratios and accessibility compliance
- **Professional Typography**: Inter font family with optimized scales

### 🌍 **Norwegian Compliance**
- **GDPR**: Data processing compliance with audit logging
- **NSM**: Security classification support for government use
- **BankID**: Norwegian digital identity integration ready
- **Vipps**: Payment and authentication integration
- **Altinn**: Government services integration
- **Norwegian Universal Design**: Accessibility principles

### 🌐 **Multi-Platform Support**
- **Web**: Next.js 15 with App Router and PWA support
- **Mobile**: React Native with Expo and native modules
- **Desktop**: Electron with native OS integration
- **Platform Detection**: Automatic platform-aware rendering
- **Unified Components**: Single codebase, multiple platforms

### 🗣️ **Localization**
- **Primary**: Norwegian Bokmål (nb)
- **Supported**: English (en), French (fr), Arabic (ar)
- **RTL Support**: Right-to-left text direction for Arabic
- **Cultural Adaptation**: Norwegian business patterns and formatting
- **GDPR Messaging**: Compliant privacy notices

### 🔒 **Security & Performance**
- **Type Safety**: Strict TypeScript with explicit return types
- **Zero 'any' Types**: Complete type coverage
- **SOLID Principles**: Component composition and single responsibility
- **Performance**: Optimized images, lazy loading, efficient rendering
- **Security Headers**: CSP, HSTS, and Norwegian compliance

## 🚀 Quick Start

### Prerequisites
- Node.js 20+ 
- {{packageManager}} (recommended)
- Git

### Installation

```bash
# Clone the repository
git clone {{repositoryUrl}}
cd {{projectName}}

# Install dependencies
{{packageManager}} install

# Copy environment variables
cp .env.example .env.local

# Start development server
{{packageManager}} run dev
```

### Platform-Specific Development

```bash
# Web development
{{packageManager}} run dev:web

# Mobile development (React Native)
{{packageManager}} run dev:mobile
{{packageManager}} run ios
{{packageManager}} run android

# Desktop development (Electron)
{{packageManager}} run dev:desktop
```

## 📁 Project Structure

```
{{projectName}}/
├── apps/
│   ├── web/                 # Next.js web application
│   ├── mobile/              # React Native mobile app
│   └── desktop/             # Electron desktop app
├── packages/
│   ├── ui/                  # Shared UI components
│   ├── config/              # Shared configurations
│   └── utils/               # Shared utilities
├── libs/
│   ├── auth/                # Authentication library
│   ├── api/                 # API client library
│   └── integrations/        # Norwegian service integrations
└── docs/                    # Documentation
```

### App Structure (Each Platform)

```
app/
├── components/              # Reusable UI components
├── layouts/                 # Page layouts
├── pages/ or screens/       # Application pages/screens
├── utils/                   # Utility functions
├── hooks/                   # Custom React hooks
├── config/                  # Configuration files
├── assets/                  # Static assets
├── locales/                 # Translation files
└── services/                # API and business logic
```

## 🛡️ Compliance Rules

### **MANDATORY COMPLIANCE (Zero Tolerance)**

#### ❌ **PROHIBITED**
- Raw HTML elements (`div`, `span`, `p`, `h1-h6`, `button`, `input`, etc.)
- Hardcoded styling (`style={{}}`, arbitrary Tailwind values)
- Hardcoded user-facing text
- `any` types in TypeScript
- Files over 200 lines
- Functions over 20 lines

#### ✅ **REQUIRED**
- ONLY semantic components from `@xala-technologies/ui-system`
- Design token usage for ALL styling
- Translation function `t()` for ALL text
- Explicit TypeScript return types
- WCAG 2.2 AAA accessibility compliance
- Norwegian localization support

## 🎯 Development Guidelines

### Component Creation

```typescript
// ✅ CORRECT - Xala UI System compliant
import { Card, Text, Button, Stack } from '@xala-technologies/ui-system';
import { useTranslations } from 'next-intl';

export function ProductCard({ product }: { product: Product }): React.ReactElement {
  const t = useTranslations('products');
  
  return (
    <Card 
      variant="elevated" 
      padding="comfortable"
      spacing="relaxed"
      role="article"
      aria-labelledby={`product-${product.id}`}
    >
      <Stack direction="vertical" spacing="comfortable">
        <Text 
          variant="heading" 
          size="large"
          id={`product-${product.id}`}
        >
          {product.name}
        </Text>
        <Text variant="body" size="medium" color="muted">
          {t('price', { amount: product.price, currency: 'NOK' })}
        </Text>
        <Button 
          variant="primary" 
          size="medium"
          onClick={() => handleAddToCart(product.id)}
          aria-label={t('addToCart', { product: product.name })}
        >
          {t('addToCart.button')}
        </Button>
      </Stack>
    </Card>
  );
}

// ❌ PROHIBITED - Raw HTML and hardcoded styling
export function BadProductCard({ product }) {

## 🌐 Localization Implementation

### Setting up translations
```tsx
// messages/en.json
{
  "navigation": {
    "home": "Home",
    "dashboard": "Dashboard",
    "settings": "Settings"
  },
  "actions": {
    "save": "Save",
    "cancel": "Cancel",
    "delete": "Delete"
  }
}

// messages/nb.json (Norwegian Bokmål)
{
  "navigation": {
    "home": "Hjem",
    "dashboard": "Dashbord",
    "settings": "Innstillinger"
  },
  "actions": {
    "save": "Lagre",
    "cancel": "Avbryt",
    "delete": "Slett"
  }
}
```

### Using translations in components
```tsx
import { useTranslation } from 'next-intl';

function NavigationComponent(): React.ReactElement {
  const { t } = useTranslation();

  return (
    <Stack direction="horizontal" spacing="4">
      <Button variant="ghost">
        {t('navigation.home', 'Home')}
      </Button>
      <Button variant="ghost">
        {t('navigation.dashboard', 'Dashboard')}
      </Button>
      <Button variant="ghost">
        {t('navigation.settings', 'Settings')}
      </Button>
    </Stack>
  );
}
```

## 🔧 Advanced Configuration

### White Label Theming
```tsx
import { UiProvider } from '@xala-technologies/ui-system';
{{#if industryTemplate}}
import { {{industryTemplate}}Template } from '@xala-technologies/ui-system/config/white-label-templates';
{{else}}
import { enterpriseTemplate } from '@xala-technologies/ui-system/config/white-label-templates';
{{/if}}

function App(): React.ReactElement {
  return (
    <UiProvider
      {{#if industryTemplate}}
      whiteLabelConfig={ {{industryTemplate}}Template}
      {{else}}
      whiteLabelConfig={enterpriseTemplate}
      {{/if}}
      themeTransitionConfig={{
        duration: 300,
        easing: 'ease-out',
        respectMotionPreference: true
      }}
      platformConfig={{
        mobileBreakpoint: 768,
        enablePlatformDetection: true
      }}
      enableAdvancedFeatures={true}
    >
      {children}
    </UiProvider>
  );
}
```

### Norwegian Compliance Features
```tsx
import { 
  NorwegianComplianceProvider,
  useGDPRCompliance,
  useAuditLogging 
} from '@xala-technologies/ui-system/compliance';

function ComplianceWrapper(): React.ReactElement {
  return (
    <NorwegianComplianceProvider
      gdprConfig={{
        consentRequired: true,
        auditLogging: true,
        dataRetentionDays: 365
      }}
      nsmClassification="BEGRENSET"
    >
      <App />
    </NorwegianComplianceProvider>
  );
}
```

## 🧪 Testing & Quality Assurance

### Accessibility Testing
```bash
# Run accessibility tests
{{#if packageManager}}{{packageManager}}{{else}}bun{{/if}} run test:a11y

# Generate accessibility report
{{#if packageManager}}{{packageManager}}{{else}}bun{{/if}} run a11y:report
```

### Compliance Validation
```bash
# Validate Norwegian compliance
{{#if packageManager}}{{packageManager}}{{else}}bun{{/if}} run compliance:check

# Generate compliance report
{{#if packageManager}}{{packageManager}}{{else}}bun{{/if}} run compliance:report
```

### Component Testing
```bash
# Run component tests
{{#if packageManager}}{{packageManager}}{{else}}bun{{/if}} run test:components

# Visual regression testing
{{#if packageManager}}{{packageManager}}{{else}}bun{{/if}} run test:visual
```

## 📚 Documentation & Resources

- [Xala UI System Documentation](https://ui.xala.no)
- [Component Library](https://storybook.xala.no)
- [Design Tokens](https://tokens.xala.no)
- [Accessibility Guidelines](https://a11y.xala.no)
- [Norwegian Compliance](https://compliance.xala.no)

## 🆘 Troubleshooting

### Common Issues

1. **Theme not loading**: Ensure `UiProvider` wraps your app
2. **Translations missing**: Check language files in `/messages`
3. **Accessibility errors**: Use semantic components only
4. **Build errors**: Verify all imports from `@xala-technologies/ui-system`

### Getting Help

- Check the [troubleshooting guide](https://docs.xala.no/troubleshooting)
- Open an issue on [GitHub](https://github.com/xala-technologies/ui-system)
- Contact support: support@xala.no

---

**Remember**: This project follows strict compliance rules. Always use semantic components, design tokens, and localization. Never use raw HTML or hardcoded styling.
