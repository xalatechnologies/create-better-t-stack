{{#if typescript}}'use client';{{/if}}

/**
 * BaseLayout Component - Xala UI System Compliant
 * Generated with Xaheen CLI
 * 
 * MANDATORY COMPLIANCE RULES:
 * ❌ NO raw HTML elements (div, span, p, h1-h6, button, input, etc.)
 * ✅ ONLY semantic components from @xala-technologies/ui-system
 * ❌ NO hardcoded styling (no style={{}}, no arbitrary Tailwind values)
 * ✅ MANDATORY design token usage for all colors, spacing, typography
 * ✅ Enhanced 8pt Grid System - all spacing in 8px increments
 * ✅ WCAG 2.2 AAA compliance for accessibility
 * ❌ NO hardcoded user-facing text - ALL text must use t() function
 * ✅ MANDATORY localization: English, Norwegian Bokmål, French, Arabic
 * ✅ Explicit TypeScript return types (no 'any' types)
 * ✅ SOLID principles and component composition
 * ✅ Maximum 200 lines per file, 20 lines per function
 * 
 * Features:
 * - Foundation layout with all providers
 * - Theme and localization setup
 * - Accessibility infrastructure
 * - Norwegian compliance integration
 * - SSR-compatible architecture
 */

{{#if typescript}}
import React from 'react';
import { NextIntlClientProvider } from 'next-intl';
import { 
  UiProvider,
  Box,
  Stack,
  SkipLink,
  AnnouncementRegion,
  FocusManager
} from '@xala-technologies/ui-system';
import { 
  NorwegianComplianceProvider,
  useAuditLogging 
} from '@xala-technologies/ui-system/compliance';
import { useTheme } from '@xala-technologies/ui-system/hooks';

interface BaseLayoutProps {
  children: React.ReactNode;
  locale?: string;
  messages?: Record<string, any>;
  theme?: 'light' | 'dark' | 'high-contrast';
  industryTemplate?: 'enterprise' | 'healthcare' | 'finance' | 'education' | 'ecommerce';
  enableCompliance?: boolean;
  className?: string;
}

interface LayoutContextValue {
  locale: string;
  theme: string;
  isComplianceEnabled: boolean;
}
{{else}}
import React from 'react';
import { NextIntlClientProvider } from 'next-intl';
import { 
  UiProvider,
  Box,
  Stack,
  SkipLink,
  AnnouncementRegion,
  FocusManager
} from '@xala-technologies/ui-system';
import { 
  NorwegianComplianceProvider,
  useAuditLogging 
} from '@xala-technologies/ui-system/compliance';
import { useTheme } from '@xala-technologies/ui-system/hooks';
{{/if}}

{{#if typescript}}
const LayoutContext = React.createContext<LayoutContextValue | null>(null);

export const useLayoutContext = (): LayoutContextValue => {
  const context = React.useContext(LayoutContext);
  if (!context) {
    throw new Error('useLayoutContext must be used within BaseLayout');
  }
  return context;
};
{{/if}}

/**
 * BaseLayout - Foundation layout component
 * Provides all necessary providers and accessibility infrastructure
 */
{{#if typescript}}
export default function BaseLayout({
  children,
  locale = 'en',
  messages = {},
  theme = 'light',
  industryTemplate = 'enterprise',
  enableCompliance = true,
  className
}: BaseLayoutProps): React.ReactElement {
{{else}}
export default function BaseLayout({
  children,
  locale = 'en',
  messages = {},
  theme = 'light',
  industryTemplate = 'enterprise',
  enableCompliance = true,
  className
}) {
{{/if}}
  // Audit logging for compliance
  const auditLog = useAuditLogging();

  // Log layout initialization
  React.useEffect(() => {
    if (enableCompliance) {
      auditLog.logEvent('layout_initialized', {
        locale,
        theme,
        industryTemplate,
        timestamp: new Date().toISOString(),
      });
    }
  }, [locale, theme, industryTemplate, enableCompliance, auditLog]);

  // Dynamic theme configuration based on industry template
  const getThemeConfig = React.useCallback({{#if typescript}}(): any{{/if}} => {
    const themeConfigs = {
      enterprise: {
        colors: { primary: 'blue', secondary: 'gray' },
        spacing: 'comfortable',
        typography: 'professional'
      },
      healthcare: {
        colors: { primary: 'teal', secondary: 'blue' },
        spacing: 'spacious',
        typography: 'accessible'
      },
      finance: {
        colors: { primary: 'navy', secondary: 'gold' },
        spacing: 'compact',
        typography: 'formal'
      },
      education: {
        colors: { primary: 'green', secondary: 'orange' },
        spacing: 'comfortable',
        typography: 'friendly'
      },
      ecommerce: {
        colors: { primary: 'purple', secondary: 'pink' },
        spacing: 'dynamic',
        typography: 'engaging'
      }
    };
    
    return themeConfigs[industryTemplate] || themeConfigs.enterprise;
  }, [industryTemplate]);

  {{#if typescript}}
  const layoutContextValue: LayoutContextValue = React.useMemo(() => ({
    locale,
    theme,
    isComplianceEnabled: enableCompliance,
  }), [locale, theme, enableCompliance]);
  {{else}}
  const layoutContextValue = React.useMemo(() => ({
    locale,
    theme,
    isComplianceEnabled: enableCompliance,
  }), [locale, theme, enableCompliance]);
  {{/if}}

  const renderContent = {{#if typescript}}(): React.ReactElement{{/if}} => (
    <Box 
      variant="page" 
      className={className}
      role="main"
      id="main-content"
    >
      <SkipLink targetId="main-content">
        Skip to main content
      </SkipLink>
      
      <AnnouncementRegion aria-live="polite" />
      
      <FocusManager>
        <Stack direction="vertical" spacing="0" minHeight="screen">
          {children}
        </Stack>
      </FocusManager>
    </Box>
  );

  // Wrap with compliance provider if enabled
  if (enableCompliance) {
    return (
      <NextIntlClientProvider locale={locale} messages={messages}>
        <UiProvider
          theme={theme}
          whiteLabelConfig={getThemeConfig()}
          themeTransitionConfig={{
            duration: 300,
            easing: 'ease-out',
            respectMotionPreference: true
          }}
          platformConfig={{
            mobileBreakpoint: 768,
            enablePlatformDetection: true
          }}
          enableAdvancedFeatures={true}
        >
          <NorwegianComplianceProvider
            gdprConfig={{
              consentRequired: true,
              auditLogging: true,
              dataRetentionDays: 365
            }}
            nsmClassification="BEGRENSET"
          >
            <LayoutContext.Provider value={layoutContextValue}>
              {renderContent()}
            </LayoutContext.Provider>
          </NorwegianComplianceProvider>
        </UiProvider>
      </NextIntlClientProvider>
    );
  }

  // Standard layout without compliance
  return (
    <NextIntlClientProvider locale={locale} messages={messages}>
      <UiProvider
        theme={theme}
        whiteLabelConfig={getThemeConfig()}
        themeTransitionConfig={{
          duration: 300,
          easing: 'ease-out',
          respectMotionPreference: true
        }}
        platformConfig={{
          mobileBreakpoint: 768,
          enablePlatformDetection: true
        }}
        enableAdvancedFeatures={true}
      >
        <LayoutContext.Provider value={layoutContextValue}>
          {renderContent()}
        </LayoutContext.Provider>
      </UiProvider>
    </NextIntlClientProvider>
  );
}

{{#if includeExamples}}
// Example usage:
/*
import BaseLayout from '@/layouts/BaseLayout';
import { useTranslation } from 'next-intl';

export default function HomePage() {
  const { t } = useTranslation();

  return (
    <BaseLayout
      locale="nb"
      theme="light"
      industryTemplate="healthcare"
      enableCompliance={true}
    >
      <Typography variant="heading" size="2xl">
        {t('home.title', 'Welcome')}
      </Typography>
    </BaseLayout>
  );
}
*/
{{/if}}
