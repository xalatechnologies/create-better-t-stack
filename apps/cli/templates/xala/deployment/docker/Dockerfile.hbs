# Docker Configuration - Xala UI System Compliant
# Generated with Xaheen CLI - Multi-Platform Docker Deployment
# 
# MANDATORY COMPLIANCE RULES:
# ❌ NO raw HTML elements (div, span, p, h1-h6, button, input, etc.)
# ✅ ONLY semantic components from @xala-technologies/ui-system
# ❌ NO hardcoded styling (no style={{}}, no arbitrary Tailwind values)
# ✅ MANDATORY design token usage for all colors, spacing, typography
# ✅ Enhanced 8pt Grid System - all spacing in 8px increments
# ✅ WCAG 2.2 AAA compliance for accessibility
# ❌ NO hardcoded user-facing text - ALL text must use t() function
# ✅ MANDATORY localization: English, Norwegian Bokmål, French, Arabic
# ✅ Explicit TypeScript return types (no 'any' types)
# ✅ SOLID principles and component composition
# ✅ Maximum 200 lines per file, 20 lines per function

# Use the official Node.js runtime as the base image
FROM node:20-alpine AS base

# Install dependencies only when needed
FROM base AS deps
# Check https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3#nodealpine to understand why libc6-compat might be needed.
RUN apk add --no-cache libc6-compat

WORKDIR /app

# Install dependencies based on the preferred package manager
COPY package.json yarn.lock* package-lock.json* pnpm-lock.yaml* bun.lockb* ./
RUN \
  if [ -f yarn.lock ]; then yarn --frozen-lockfile; \
  elif [ -f package-lock.json ]; then npm ci; \
  elif [ -f pnpm-lock.yaml ]; then corepack enable pnpm && pnpm i --frozen-lockfile; \
  elif [ -f bun.lockb ]; then bun install --frozen-lockfile; \
  else echo "Lockfile not found." && exit 1; \
  fi

# Rebuild the source code only when needed
FROM base AS builder
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# Environment variables for build
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV NEXT_PUBLIC_APP_NAME="{{appName}}"
ENV NEXT_PUBLIC_APP_VERSION="{{version}}"
ENV NEXT_PUBLIC_ENVIRONMENT="production"

# Build the application with Turbo
RUN \
  if [ -f yarn.lock ]; then yarn build; \
  elif [ -f package-lock.json ]; then npm run build; \
  elif [ -f pnpm-lock.yaml ]; then corepack enable pnpm && pnpm build; \
  elif [ -f bun.lockb ]; then bun run build; \
  else echo "Lockfile not found." && exit 1; \
  fi

# Production image, copy all the files and run next
FROM base AS runner
WORKDIR /app

ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1

# Create a non-root user for security
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Copy the built application
COPY --from=builder /app/apps/web/public ./apps/web/public

# Set the correct permission for prerender cache
RUN mkdir .next
RUN chown nextjs:nodejs .next

# Automatically leverage output traces to reduce image size
# https://nextjs.org/docs/advanced-features/output-file-tracing
COPY --from=builder --chown=nextjs:nodejs /app/apps/web/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/apps/web/.next/static ./apps/web/.next/static

# Copy Norwegian compliance certificates if they exist
COPY --from=builder /app/certificates* ./certificates/ 2>/dev/null || true

# Install security updates
RUN apk update && apk upgrade && apk add --no-cache dumb-init

# Health check for Norwegian compliance monitoring
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node healthcheck.js

# Create healthcheck script
RUN echo 'const http = require("http"); \
const options = { \
  host: "localhost", \
  port: process.env.PORT || 3000, \
  path: "/api/health", \
  timeout: 2000 \
}; \
const request = http.request(options, (res) => { \
  console.log(`STATUS: ${res.statusCode}`); \
  if (res.statusCode == 200) { \
    process.exit(0); \
  } else { \
    process.exit(1); \
  } \
}); \
request.on("error", function(err) { \
  console.log("ERROR"); \
  process.exit(1); \
}); \
request.end();' > healthcheck.js

USER nextjs

EXPOSE 3000

ENV PORT=3000
ENV HOSTNAME="0.0.0.0"

# Norwegian compliance: Set timezone to Oslo
ENV TZ=Europe/Oslo

# Security labels for Norwegian compliance
LABEL maintainer="{{author}}"
LABEL version="{{version}}"
LABEL description="{{description}}"
LABEL compliance.gdpr="true"
LABEL compliance.nsm="BEGRENSET"
LABEL compliance.wcag="AAA"
LABEL security.scan="required"
LABEL locale.primary="nb-NO"
LABEL locale.supported="en,nb,fr,ar"

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]

# Start the application
CMD ["node", "apps/web/server.js"]
