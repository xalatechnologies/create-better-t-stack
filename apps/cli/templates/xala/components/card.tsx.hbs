import React from 'react';
import { cva, type VariantProps } from 'class-variance-authority';
import { cn } from '{{relativePath}}/lib/utils';

/**
 * {{componentName}} - Xala UI Card Component
 * Generated with Xaheen CLI
 * 
 * Features:
 * - Xala design token integration
 * - Responsive design patterns
 * - Accessibility compliant (WCAG 2.2 AAA)
 * - Norwegian localization support
 * - Flexible composition with Header, Content, Footer
 */

const cardVariants = cva(
  // Base styles with Xala design tokens
  "rounded-lg border bg-card text-card-foreground shadow-sm",
  {
    variants: {
      variant: {
        default: "border-border",
        elevated: "border-border shadow-md",
        outlined: "border-2 border-border shadow-none",
        filled: "bg-muted border-transparent",
        ghost: "border-transparent shadow-none",
      },
      size: {
        default: "p-6",
        sm: "p-4",
        lg: "p-8",
        xl: "p-10",
        none: "p-0",
      },
      hover: {
        none: "",
        lift: "transition-transform hover:scale-[1.02]",
        shadow: "transition-shadow hover:shadow-lg",
        border: "transition-colors hover:border-primary",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
      hover: "none",
    },
  }
);

const cardHeaderVariants = cva(
  "flex flex-col space-y-1.5",
  {
    variants: {
      padding: {
        default: "p-6",
        sm: "p-4",
        lg: "p-8",
        none: "p-0",
      },
    },
    defaultVariants: {
      padding: "default",
    },
  }
);

const cardContentVariants = cva(
  "",
  {
    variants: {
      padding: {
        default: "p-6 pt-0",
        sm: "p-4 pt-0",
        lg: "p-8 pt-0",
        none: "p-0",
      },
    },
    defaultVariants: {
      padding: "default",
    },
  }
);

const cardFooterVariants = cva(
  "flex items-center",
  {
    variants: {
      padding: {
        default: "p-6 pt-0",
        sm: "p-4 pt-0",
        lg: "p-8 pt-0",
        none: "p-0",
      },
      justify: {
        start: "justify-start",
        center: "justify-center",
        end: "justify-end",
        between: "justify-between",
        around: "justify-around",
      },
    },
    defaultVariants: {
      padding: "default",
      justify: "start",
    },
  }
);

export interface {{componentName}}Props
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof cardVariants> {
  asChild?: boolean;
  {{#if includeInteractive}}
  // Interactive props
  clickable?: boolean;
  onCardClick?: () => void;
  {{/if}}
  {{#if includeLocalization}}
  // Norwegian localization
  locale?: 'nb' | 'nn' | 'en';
  {{/if}}
}

export interface CardHeaderProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof cardHeaderVariants> {}

export interface CardContentProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof cardContentVariants> {}

export interface CardFooterProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof cardFooterVariants> {}

export interface CardTitleProps extends React.HTMLAttributes<HTMLHeadingElement> {
  as?: 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6';
}

export interface CardDescriptionProps extends React.HTMLAttributes<HTMLParagraphElement> {}

const {{componentName}} = React.forwardRef<HTMLDivElement, {{componentName}}Props>(
  ({ 
    className, 
    variant, 
    size, 
    hover,
    {{#if includeInteractive}}
    clickable = false,
    onCardClick,
    {{/if}}
    {{#if includeLocalization}}
    locale = 'nb',
    {{/if}}
    children,
    ...props 
  }, ref) => {
    {{#if includeInteractive}}
    const handleClick = () => {
      if (clickable && onCardClick) {
        onCardClick();
      }
    };

    const handleKeyDown = (event: React.KeyboardEvent) => {
      if (clickable && (event.key === 'Enter' || event.key === ' ')) {
        event.preventDefault();
        onCardClick?.();
      }
    };
    {{/if}}

    return (
      <div
        ref={ref}
        className={cn(
          cardVariants({ variant, size, hover, className }),
          {{#if includeInteractive}}
          clickable && "cursor-pointer focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2"
          {{/if}}
        )}
        {{#if includeInteractive}}
        onClick={clickable ? handleClick : undefined}
        onKeyDown={clickable ? handleKeyDown : undefined}
        tabIndex={clickable ? 0 : undefined}
        role={clickable ? "button" : undefined}
        {{/if}}
        {...props}
      >
        {children}
      </div>
    );
  }
);

const CardHeader = React.forwardRef<HTMLDivElement, CardHeaderProps>(
  ({ className, padding, ...props }, ref) => (
    <div
      ref={ref}
      className={cn(cardHeaderVariants({ padding, className }))}
      {...props}
    />
  )
);

const CardTitle = React.forwardRef<HTMLHeadingElement, CardTitleProps>(
  ({ className, as: Component = 'h3', ...props }, ref) => (
    <Component
      ref={ref}
      className={cn(
        "text-2xl font-semibold leading-none tracking-tight",
        className
      )}
      {...props}
    />
  )
);

const CardDescription = React.forwardRef<HTMLParagraphElement, CardDescriptionProps>(
  ({ className, ...props }, ref) => (
    <p
      ref={ref}
      className={cn("text-sm text-muted-foreground", className)}
      {...props}
    />
  )
);

const CardContent = React.forwardRef<HTMLDivElement, CardContentProps>(
  ({ className, padding, ...props }, ref) => (
    <div
      ref={ref}
      className={cn(cardContentVariants({ padding, className }))}
      {...props}
    />
  )
);

const CardFooter = React.forwardRef<HTMLDivElement, CardFooterProps>(
  ({ className, padding, justify, ...props }, ref) => (
    <div
      ref={ref}
      className={cn(cardFooterVariants({ padding, justify, className }))}
      {...props}
    />
  )
);

{{componentName}}.displayName = "{{componentName}}";
CardHeader.displayName = "CardHeader";
CardTitle.displayName = "CardTitle";
CardDescription.displayName = "CardDescription";
CardContent.displayName = "CardContent";
CardFooter.displayName = "CardFooter";

export { 
  {{componentName}}, 
  CardHeader, 
  CardTitle, 
  CardDescription, 
  CardContent, 
  CardFooter,
  cardVariants 
};

{{#if includeExamples}}
// Example usage:
/*
// Basic card
<{{componentName}}>
  <CardHeader>
    <CardTitle>Card Title</CardTitle>
    <CardDescription>Card description goes here</CardDescription>
  </CardHeader>
  <CardContent>
    <p>Card content goes here.</p>
  </CardContent>
  <CardFooter>
    <Button>Action</Button>
  </CardFooter>
</{{componentName}}>

// Elevated card with hover effect
<{{componentName}} variant="elevated" hover="lift">
  <CardHeader>
    <CardTitle>Elevated Card</CardTitle>
  </CardHeader>
  <CardContent>
    <p>This card has elevation and hover effects.</p>
  </CardContent>
</{{componentName}}>

{{#if includeInteractive}}
// Clickable card
<{{componentName}} 
  clickable 
  onCardClick={() => console.log('Card clicked!')}
  hover="shadow"
>
  <CardHeader>
    <CardTitle>Clickable Card</CardTitle>
    <CardDescription>Click anywhere on this card</CardDescription>
  </CardHeader>
  <CardContent>
    <p>This entire card is clickable.</p>
  </CardContent>
</{{componentName}}>
{{/if}}

// Norwegian localized card
<{{componentName}} locale="nb">
  <CardHeader>
    <CardTitle>Norsk Kort</CardTitle>
    <CardDescription>Dette er en beskrivelse på norsk</CardDescription>
  </CardHeader>
  <CardContent>
    <p>Innhold på norsk.</p>
  </CardContent>
  <CardFooter justify="end">
    <Button>Handling</Button>
  </CardFooter>
</{{componentName}}>

// Card with custom padding
<{{componentName}} size="none">
  <CardHeader padding="lg">
    <CardTitle>Custom Padding</CardTitle>
  </CardHeader>
  <CardContent padding="lg">
    <p>This card has custom padding.</p>
  </CardContent>
  <CardFooter padding="lg" justify="between">
    <Button variant="outline">Cancel</Button>
    <Button>Save</Button>
  </CardFooter>
</{{componentName}}>
*/
{{/if}}

{{#if includeStorybook}}
// Storybook stories
export default {
  title: 'Components/{{componentName}}',
  component: {{componentName}},
  parameters: {
    layout: 'centered',
  },
  tags: ['autodocs'],
  argTypes: {
    variant: {
      control: { type: 'select' },
      options: ['default', 'elevated', 'outlined', 'filled', 'ghost'],
    },
    size: {
      control: { type: 'select' },
      options: ['default', 'sm', 'lg', 'xl', 'none'],
    },
    hover: {
      control: { type: 'select' },
      options: ['none', 'lift', 'shadow', 'border'],
    },
  },
};

export const Default = {
  render: () => (
    <{{componentName}} className="w-80">
      <CardHeader>
        <CardTitle>Card Title</CardTitle>
        <CardDescription>Card description goes here</CardDescription>
      </CardHeader>
      <CardContent>
        <p>This is the card content area where you can put any content.</p>
      </CardContent>
      <CardFooter>
        <Button>Action</Button>
      </CardFooter>
    </{{componentName}}>
  ),
};

export const Variants = {
  render: () => (
    <div className="grid grid-cols-2 gap-4 w-full max-w-4xl">
      <{{componentName}} variant="default" className="w-full">
        <CardHeader>
          <CardTitle>Default</CardTitle>
        </CardHeader>
        <CardContent>
          <p>Default card variant</p>
        </CardContent>
      </{{componentName}}>
      
      <{{componentName}} variant="elevated" className="w-full">
        <CardHeader>
          <CardTitle>Elevated</CardTitle>
        </CardHeader>
        <CardContent>
          <p>Elevated card variant</p>
        </CardContent>
      </{{componentName}}>
      
      <{{componentName}} variant="outlined" className="w-full">
        <CardHeader>
          <CardTitle>Outlined</CardTitle>
        </CardHeader>
        <CardContent>
          <p>Outlined card variant</p>
        </CardContent>
      </{{componentName}}>
      
      <{{componentName}} variant="filled" className="w-full">
        <CardHeader>
          <CardTitle>Filled</CardTitle>
        </CardHeader>
        <CardContent>
          <p>Filled card variant</p>
        </CardContent>
      </{{componentName}}>
    </div>
  ),
};

export const HoverEffects = {
  render: () => (
    <div className="grid grid-cols-3 gap-4 w-full max-w-6xl">
      <{{componentName}} hover="lift" className="w-full">
        <CardHeader>
          <CardTitle>Lift</CardTitle>
        </CardHeader>
        <CardContent>
          <p>Hover to see lift effect</p>
        </CardContent>
      </{{componentName}}>
      
      <{{componentName}} hover="shadow" className="w-full">
        <CardHeader>
          <CardTitle>Shadow</CardTitle>
        </CardHeader>
        <CardContent>
          <p>Hover to see shadow effect</p>
        </CardContent>
      </{{componentName}}>
      
      <{{componentName}} hover="border" className="w-full">
        <CardHeader>
          <CardTitle>Border</CardTitle>
        </CardHeader>
        <CardContent>
          <p>Hover to see border effect</p>
        </CardContent>
      </{{componentName}}>
    </div>
  ),
};

{{#if includeInteractive}}
export const Interactive = {
  render: () => (
    <{{componentName}} 
      clickable 
      onCardClick={() => alert('Card clicked!')}
      hover="lift"
      className="w-80"
    >
      <CardHeader>
        <CardTitle>Clickable Card</CardTitle>
        <CardDescription>Click anywhere on this card</CardDescription>
      </CardHeader>
      <CardContent>
        <p>This entire card is interactive and clickable.</p>
      </CardContent>
    </{{componentName}}>
  ),
};
{{/if}}
{{/if}}
