import React from 'react';
import { cva, type VariantProps } from 'class-variance-authority';
import { cn } from '{{relativePath}}/lib/utils';
{{#if includeIcons}}
import { Eye, EyeOff, AlertCircle, CheckCircle } from 'lucide-react';
{{/if}}

/**
 * {{componentName}} - Xala UI Input Component
 * Generated with Xaheen CLI
 * 
 * Features:
 * - Xala design token integration
 * - Responsive design patterns
 * - Accessibility compliant (WCAG 2.2 AAA)
 * - Norwegian localization support
 * {{#if includeValidation}}
 * - Built-in validation states
 * {{/if}}
 * {{#if includeIcons}}
 * - Icon support and password toggle
 * {{/if}}
 */

const inputVariants = cva(
  // Base styles with Xala design tokens
  "flex w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
  {
    variants: {
      variant: {
        default: "border-input",
        error: "border-destructive focus-visible:ring-destructive",
        success: "border-green-500 focus-visible:ring-green-500",
        warning: "border-yellow-500 focus-visible:ring-yellow-500",
      },
      size: {
        default: "h-10 px-3 py-2",
        sm: "h-9 px-2 py-1 text-xs",
        lg: "h-11 px-4 py-3",
        xl: "h-12 px-5 py-4 text-base",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
);

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70",
  {
    variants: {
      variant: {
        default: "text-foreground",
        error: "text-destructive",
        success: "text-green-600",
        warning: "text-yellow-600",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
);

export interface {{componentName}}Props
  extends React.InputHTMLAttributes<HTMLInputElement>,
    VariantProps<typeof inputVariants> {
  label?: string;
  description?: string;
  error?: string;
  success?: string;
  warning?: string;
  {{#if includeIcons}}
  icon?: React.ReactNode;
  iconPosition?: 'left' | 'right';
  showPasswordToggle?: boolean;
  {{/if}}
  {{#if includeLocalization}}
  // Norwegian localization
  locale?: 'nb' | 'nn' | 'en';
  {{/if}}
  {{#if includeValidation}}
  // Validation
  required?: boolean;
  validationMessage?: string;
  {{/if}}
  containerClassName?: string;
}

const {{componentName}} = React.forwardRef<HTMLInputElement, {{componentName}}Props>(
  ({ 
    className,
    containerClassName,
    variant,
    size,
    type = 'text',
    label,
    description,
    error,
    success,
    warning,
    {{#if includeIcons}}
    icon,
    iconPosition = 'left',
    showPasswordToggle = false,
    {{/if}}
    {{#if includeLocalization}}
    locale = 'nb',
    {{/if}}
    {{#if includeValidation}}
    required = false,
    validationMessage,
    {{/if}}
    id,
    ...props 
  }, ref) => {
    {{#if includeIcons}}
    const [showPassword, setShowPassword] = React.useState(false);
    const isPasswordType = type === 'password' || showPasswordToggle;
    const inputType = isPasswordType && showPassword ? 'text' : type;
    {{/if}}

    // Determine variant based on validation state
    const currentVariant = error ? 'error' : success ? 'success' : warning ? 'warning' : variant;
    
    // Generate unique ID if not provided
    const inputId = id || React.useId();

    {{#if includeLocalization}}
    // Get localized messages
    const getLocalizedMessage = (key: string) => {
      const messages = {
        nb: {
          required: 'Dette feltet er påkrevd',
          invalid: 'Ugyldig verdi',
          passwordShow: 'Vis passord',
          passwordHide: 'Skjul passord',
        },
        nn: {
          required: 'Dette feltet er påkrevd',
          invalid: 'Ugyldig verdi',
          passwordShow: 'Vis passord',
          passwordHide: 'Gøym passord',
        },
        en: {
          required: 'This field is required',
          invalid: 'Invalid value',
          passwordShow: 'Show password',
          passwordHide: 'Hide password',
        },
      };
      
      return messages[locale]?.[key] || messages.en[key];
    };
    {{/if}}

    return (
      <div className={cn("space-y-2", containerClassName)}>
        {label && (
          <label 
            htmlFor={inputId}
            className={cn(labelVariants({ variant: currentVariant }))}
          >
            {label}
            {{#if includeValidation}}
            {required && (
              <span className="ml-1 text-destructive" aria-label="required">
                *
              </span>
            )}
            {{/if}}
          </label>
        )}
        
        {description && (
          <p className="text-sm text-muted-foreground">
            {description}
          </p>
        )}

        <div className="relative">
          {{#if includeIcons}}
          {icon && iconPosition === 'left' && (
            <div className="absolute left-3 top-1/2 -translate-y-1/2 text-muted-foreground">
              {icon}
            </div>
          )}
          {{/if}}

          <input
            type={{#if includeIcons}}inputType{{else}}type{{/if}}
            className={cn(
              inputVariants({ variant: currentVariant, size, className }),
              {{#if includeIcons}}
              icon && iconPosition === 'left' && "pl-10",
              icon && iconPosition === 'right' && "pr-10",
              isPasswordType && "pr-10",
              {{/if}}
            )}
            ref={ref}
            id={inputId}
            {{#if includeValidation}}
            required={required}
            aria-invalid={!!error}
            aria-describedby={
              error ? `${inputId}-error` : 
              success ? `${inputId}-success` : 
              warning ? `${inputId}-warning` :
              description ? `${inputId}-description` : 
              undefined
            }
            {{/if}}
            {...props}
          />

          {{#if includeIcons}}
          {icon && iconPosition === 'right' && !isPasswordType && (
            <div className="absolute right-3 top-1/2 -translate-y-1/2 text-muted-foreground">
              {icon}
            </div>
          )}

          {isPasswordType && (
            <button
              type="button"
              className="absolute right-3 top-1/2 -translate-y-1/2 text-muted-foreground hover:text-foreground focus:outline-none focus:text-foreground"
              onClick={() => setShowPassword(!showPassword)}
              {{#if includeLocalization}}
              aria-label={showPassword ? getLocalizedMessage('passwordHide') : getLocalizedMessage('passwordShow')}
              {{else}}
              aria-label={showPassword ? 'Hide password' : 'Show password'}
              {{/if}}
            >
              {showPassword ? (
                <EyeOff className="h-4 w-4" />
              ) : (
                <Eye className="h-4 w-4" />
              )}
            </button>
          )}
          {{/if}}

          {{#if includeValidation}}
          {/* Validation icons */}
          {error && (
            <div className="absolute right-3 top-1/2 -translate-y-1/2 text-destructive">
              <AlertCircle className="h-4 w-4" />
            </div>
          )}
          
          {success && (
            <div className="absolute right-3 top-1/2 -translate-y-1/2 text-green-500">
              <CheckCircle className="h-4 w-4" />
            </div>
          )}
          {{/if}}
        </div>

        {{#if includeValidation}}
        {/* Validation messages */}
        {error && (
          <p 
            id={`${inputId}-error`}
            className="text-sm text-destructive"
            role="alert"
          >
            {error}
          </p>
        )}
        
        {success && (
          <p 
            id={`${inputId}-success`}
            className="text-sm text-green-600"
          >
            {success}
          </p>
        )}
        
        {warning && (
          <p 
            id={`${inputId}-warning`}
            className="text-sm text-yellow-600"
          >
            {warning}
          </p>
        )}

        {validationMessage && !error && !success && !warning && (
          <p className="text-sm text-muted-foreground">
            {validationMessage}
          </p>
        )}
        {{/if}}
      </div>
    );
  }
);

{{componentName}}.displayName = "{{componentName}}";

export { {{componentName}}, inputVariants };

{{#if includeExamples}}
// Example usage:
/*
// Basic input
<{{componentName}} 
  label="Email"
  placeholder="Enter your email"
/>

// Input with validation
<{{componentName}} 
  label="Password"
  type="password"
  required
  error="Password must be at least 8 characters"
  showPasswordToggle
/>

// Input with icon
<{{componentName}} 
  label="Search"
  placeholder="Search..."
  icon={<Search className="h-4 w-4" />}
  iconPosition="left"
/>

// Norwegian localized input
<{{componentName}} 
  label="E-post"
  placeholder="Skriv inn din e-post"
  locale="nb"
  required
/>

// Input with success state
<{{componentName}} 
  label="Username"
  value="johndoe"
  success="Username is available"
/>

// Large input with description
<{{componentName}} 
  label="Full Name"
  description="Enter your first and last name"
  size="lg"
  placeholder="John Doe"
/>
*/
{{/if}}

{{#if includeStorybook}}
// Storybook stories
export default {
  title: 'Components/{{componentName}}',
  component: {{componentName}},
  parameters: {
    layout: 'centered',
  },
  tags: ['autodocs'],
  argTypes: {
    variant: {
      control: { type: 'select' },
      options: ['default', 'error', 'success', 'warning'],
    },
    size: {
      control: { type: 'select' },
      options: ['default', 'sm', 'lg', 'xl'],
    },
  },
};

export const Default = {
  args: {
    label: 'Email',
    placeholder: 'Enter your email',
  },
};

export const WithValidation = {
  render: () => (
    <div className="space-y-4 w-80">
      <{{componentName}} 
        label="Email"
        placeholder="Enter your email"
        error="Please enter a valid email address"
      />
      <{{componentName}} 
        label="Username"
        placeholder="Enter username"
        success="Username is available"
      />
      <{{componentName}} 
        label="Phone"
        placeholder="Enter phone number"
        warning="Please verify this number"
      />
    </div>
  ),
};

export const Sizes = {
  render: () => (
    <div className="space-y-4 w-80">
      <{{componentName}} size="sm" label="Small" placeholder="Small input" />
      <{{componentName}} size="default" label="Default" placeholder="Default input" />
      <{{componentName}} size="lg" label="Large" placeholder="Large input" />
      <{{componentName}} size="xl" label="Extra Large" placeholder="Extra large input" />
    </div>
  ),
};

{{#if includeIcons}}
export const WithIcons = {
  render: () => (
    <div className="space-y-4 w-80">
      <{{componentName}} 
        label="Search"
        placeholder="Search..."
        icon={<Search className="h-4 w-4" />}
      />
      <{{componentName}} 
        label="Password"
        type="password"
        placeholder="Enter password"
        showPasswordToggle
      />
    </div>
  ),
};
{{/if}}
{{/if}}
