import React from 'react';
import { Button as XalaButton, type ButtonProps as XalaButtonProps } from '@xala-technologies/ui-system';
import { cn } from '{{relativePath}}/lib/utils';
{{#if includeIcons}}
import { Loader2 } from 'lucide-react';
{{/if}}

/**
 * {{componentName}} - Xala UI Button Integration
 * Generated with Xaheen CLI
 * 
 * Features:
 * - Integrates with @xala-technologies/ui-system
 * - Norwegian localization support
 * - Project-specific customizations
 * - Accessibility compliant (WCAG 2.2 AAA)
 * {{#if includeIcons}}
 * - Enhanced icon support
 * {{/if}}
 * {{#if includeAnalytics}}
 * - Analytics tracking integration
 * {{/if}}
 */

export interface {{componentName}}Props extends XalaButtonProps {
  {{#if includeLocalization}}
  // Norwegian localization
  locale?: 'nb' | 'nn' | 'en';
  localizedText?: string;
  {{/if}}
  {{#if includeAnalytics}}
  // Analytics tracking
  trackingId?: string;
  trackingEvent?: string;
  {{/if}}
  {{#if includeCustomization}}
  // Project-specific customizations
  customVariant?: 'success' | 'warning' | 'info';
  {{/if}}
}

const {{componentName}} = React.forwardRef<HTMLButtonElement, {{componentName}}Props>(
  ({ 
    className,
    {{#if includeLocalization}}
    locale = 'nb',
    localizedText,
    {{/if}}
    {{#if includeAnalytics}}
    trackingId,
    trackingEvent,
    {{/if}}
    {{#if includeCustomization}}
    customVariant,
    {{/if}}
    children,
    onClick,
    ...props 
  }, ref) => {
    {{#if includeAnalytics}}
    const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {
      // Track button click
      if (trackingId && trackingEvent) {
        // Add your analytics tracking here
        console.log(`Tracking: ${trackingEvent} - ${trackingId}`);
      }
      
      onClick?.(event);
    };
    {{/if}}

    {{#if includeLocalization}}
    // Get localized text
    const getLocalizedContent = () => {
      if (localizedText) return localizedText;
      return children;
    };
    {{/if}}

    {{#if includeCustomization}}
    // Apply custom variant styling
    const getCustomClassName = () => {
      const customVariants = {
        success: 'bg-green-600 hover:bg-green-700 text-white',
        warning: 'bg-yellow-600 hover:bg-yellow-700 text-white',
        info: 'bg-blue-600 hover:bg-blue-700 text-white',
      };
      
      return customVariant ? customVariants[customVariant] : '';
    };
    {{/if}}

    return (
      <XalaButton
        ref={ref}
        className={cn(
          {{#if includeCustomization}}
          customVariant && getCustomClassName(),
          {{/if}}
          className
        )}
        {{#if includeAnalytics}}
        onClick={handleClick}
        {{else}}
        onClick={onClick}
        {{/if}}
        {...props}
      >
        {{#if includeLocalization}}
        {getLocalizedContent()}
        {{else}}
        {children}
        {{/if}}
      </XalaButton>
    );
  }
);

{{componentName}}.displayName = "{{componentName}}";

export { {{componentName}}, buttonVariants };

{{#if includeExamples}}
// Example usage:
/*
// Basic button
<{{componentName}}>
  Click me
</{{componentName}}>

// Button with variant and size
<{{componentName}} variant="outline" size="lg">
  Large Outline Button
</{{componentName}}>

{{#if includeIcons}}
// Button with icon
<{{componentName}} icon={<Plus className="h-4 w-4" />} iconPosition="left">
  Add Item
</{{componentName}}>

// Loading button
<{{componentName}} loading>
  Saving...
</{{componentName}}>
{{/if}}

{{#if includeLocalization}}
// Norwegian localized button
<{{componentName}} locale="nb" ariaLabel="Lagre dokument">
  Lagre
</{{componentName}}>
{{/if}}

{{#if includeAnalytics}}
// Button with analytics
<{{componentName}} 
  trackingId="header-cta" 
  trackingEvent="click"
  variant="default"
>
  Get Started
</{{componentName}}>
{{/if}}

// Responsive button
<{{componentName}} 
  size="sm-responsive" 
  className="w-full sm:w-auto"
>
  Responsive Button
</{{componentName}}>
*/
{{/if}}

{{#if includeStorybook}}
// Storybook stories
export default {
  title: 'Components/{{componentName}}',
  component: {{componentName}},
  parameters: {
    layout: 'centered',
  },
  tags: ['autodocs'],
  argTypes: {
    variant: {
      control: { type: 'select' },
      options: ['default', 'destructive', 'outline', 'secondary', 'ghost', 'link'],
    },
    size: {
      control: { type: 'select' },
      options: ['default', 'sm', 'lg', 'xl', 'icon'],
    },
  },
};

export const Default = {
  args: {
    children: 'Button',
  },
};

export const Variants = {
  render: () => (
    <div className="flex flex-wrap gap-2">
      <{{componentName}} variant="default">Default</{{componentName}}>
      <{{componentName}} variant="destructive">Destructive</{{componentName}}>
      <{{componentName}} variant="outline">Outline</{{componentName}}>
      <{{componentName}} variant="secondary">Secondary</{{componentName}}>
      <{{componentName}} variant="ghost">Ghost</{{componentName}}>
      <{{componentName}} variant="link">Link</{{componentName}}>
    </div>
  ),
};

export const Sizes = {
  render: () => (
    <div className="flex flex-wrap items-center gap-2">
      <{{componentName}} size="sm">Small</{{componentName}}>
      <{{componentName}} size="default">Default</{{componentName}}>
      <{{componentName}} size="lg">Large</{{componentName}}>
      <{{componentName}} size="xl">Extra Large</{{componentName}}>
    </div>
  ),
};

{{#if includeIcons}}
export const WithIcons = {
  render: () => (
    <div className="flex flex-wrap gap-2">
      <{{componentName}} icon={<Plus className="h-4 w-4" />}>
        Add Item
      </{{componentName}}>
      <{{componentName}} icon={<Download className="h-4 w-4" />} iconPosition="right">
        Download
      </{{componentName}}>
      <{{componentName}} loading>
        Loading...
      </{{componentName}}>
    </div>
  ),
};
{{/if}}
{{/if}}
