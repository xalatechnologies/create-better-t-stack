{{!-- 
MANDATORY COMPLIANCE RULES - AUTOMATICALLY ENFORCED:
❌ NO raw HTML elements (div, span, p, h1-h6, button, input, etc.)
✅ ONLY semantic components from @xala-technologies/ui-system
❌ NO hardcoded styling (no style={{}}, no arbitrary Tailwind values)
✅ MANDATORY design token usage for all colors, spacing, typography
✅ Enhanced 8pt Grid System - all spacing in 8px increments
❌ NO hardcoded user-facing text - ALL text must use t() function
✅ MANDATORY localization: English, Norwegian Bokmål, French, Arabic
✅ Explicit TypeScript return types (no 'any' types)
✅ SOLID principles and component composition
✅ Maximum 200 lines per file, 20 lines per function

COMPLIANCE: WCAG 2.2 AAA Accessibility
- Color contrast ratio 7:1 for normal text, 4.5:1 for large text
- Keyboard navigation support
- Screen reader compatibility
- Focus management and visible focus indicators
- Semantic HTML structure with proper ARIA labels
- Alternative text for images and media
- Error identification and suggestions
--}}
"use client";

import React, { useRef, useEffect } from "react";
import { useTranslations } from "next-intl";
import { useFocusManagement } from "@/hooks/useFocusManagement";
import { useKeyboardNavigation } from "@/hooks/useKeyboardNavigation";
import { 
  Card,
  Stack,
  Text,
  Heading,
  Badge,
  Button,
  SkipLink,
  LiveRegion
} from "@xala-technologies/ui-system";

{{#if hasProps}}
interface {{componentName}}Props {
  {{#each props}}
  {{name}}{{#if optional}}?{{/if}}: {{type}};
  {{/each}}
  onAction?: () => void;
  autoFocus?: boolean;
  className?: string;
  testId?: string;
}
{{else}}
interface {{componentName}}Props {
  onAction?: () => void;
  autoFocus?: boolean;
  className?: string;
  testId?: string;
}
{{/if}}

/**
 * {{componentName}} - WCAG 2.2 AAA compliant business component using Xala UI System v5
 * Implements comprehensive accessibility standards for maximum inclusion
 */
export default function {{componentName}}({{#if hasProps}}{ 
  {{#each props}}
  {{name}}{{#if defaultValue}} = {{defaultValue}}{{/if}},
  {{/each}}
  onAction,
  autoFocus = false,
  className,
  testId = "{{testIds.root}}"
}: {{componentName}}Props{{else}}{ 
  onAction, 
  autoFocus = false, 
  className, 
  testId = "{{testIds.root}}" 
}: {{componentName}}Props{{/if}}): React.ReactElement {
  const t = useTranslations("{{fileName}}");
  const cardRef = useRef<HTMLDivElement>(null);
  const { setFocusTarget } = useFocusManagement();
  const { handleKeyDown } = useKeyboardNavigation();

  // Auto-focus management for accessibility
  useEffect(() => {
    if (autoFocus && cardRef.current) {
      setFocusTarget(cardRef.current);
    }
  }, [autoFocus, setFocusTarget]);

  const handleAction = (): void => {
    // Announce action to screen readers
    const announcement = t("accessibility.actionAnnouncement");
    // This will be announced via LiveRegion
    onAction?.();
  };

  const handleKeyboardAction = (event: React.KeyboardEvent): void => {
    handleKeyDown(event, {
      Enter: handleAction,
      Space: handleAction,
      Escape: () => {
        // Return focus to parent or close component
        if (cardRef.current) {
          cardRef.current.blur();
        }
      }
    });
  };

  return (
    <>
      {/* Skip link for keyboard users */}
      <SkipLink href="#{{testIds.content}}" className="sr-only focus:not-sr-only">
        {t("accessibility.skipToContent")}
      </SkipLink>

      <Card
        ref={cardRef}
        variant="elevated"
        padding="6"
        className={className}
        data-testid={testId}
        role="region"
        aria-label={t("ariaLabel")}
        aria-describedby="{{testIds.description}}"
        tabIndex={autoFocus ? 0 : -1}
        onKeyDown={handleKeyboardAction}
      >
        <Stack direction="vertical" spacing="4">
          <Stack direction="horizontal" justify="between" align="center">
            <Heading 
              level={3} 
              variant="section"
              id="{{testIds.title}}"
              role="heading"
              aria-level="3"
            >
              {t("title")}
            </Heading>
            {{#if hasProps}}
            <Badge 
              variant="info"
              role="status"
              aria-label={t("accessibility.statusLabel")}
            >
              {t("status")}
            </Badge>
            {{/if}}
          </Stack>

          <Text 
            variant="body" 
            color="secondary"
            id="{{testIds.description}}"
            role="text"
          >
            {t("description")}
          </Text>

          {{#if hasProps}}
          <Stack 
            direction="vertical" 
            spacing="3"
            role="group"
            aria-labelledby="{{testIds.title}}"
          >
            {{#each props}}
            {{#if (eq type "string")}}
            <Stack direction="horizontal" justify="between" role="group">
              <Text 
                variant="label"
                id="{{name}}-label"
                role="text"
              >
                {t("{{name}}Label")}:
              </Text>
              <Text 
                variant="body"
                aria-labelledby="{{name}}-label"
                role="text"
              >
                {{{name}}}
              </Text>
            </Stack>
            {{/if}}
            {{#if (eq type "number")}}
            <Stack direction="horizontal" justify="between" role="group">
              <Text 
                variant="label"
                id="{{name}}-label"
                role="text"
              >
                {t("{{name}}Label")}:
              </Text>
              <Text 
                variant="body"
                aria-labelledby="{{name}}-label"
                role="text"
              >
                {{{name}}}
              </Text>
            </Stack>
            {{/if}}
            {{#if (eq type "boolean")}}
            <Stack direction="horizontal" justify="between" role="group">
              <Text 
                variant="label"
                id="{{name}}-label"
                role="text"
              >
                {t("{{name}}Label")}:
              </Text>
              <Badge 
                variant={{{name}} ? "success" : "warning"}
                role="status"
                aria-labelledby="{{name}}-label"
                aria-describedby="{{name}}-value"
              >
                <span id="{{name}}-value">
                  {t({{name}} ? "yes" : "no")}
                </span>
              </Badge>
            </Stack>
            {{/if}}
            {{/each}}
          </Stack>
          {{/if}}

          {/* Action Button with full accessibility */}
          {onAction && (
            <Stack direction="horizontal" justify="end">
              <Button
                variant="primary"
                size="md"
                onClick={handleAction}
                data-testid="{{testIds.action}}"
                aria-describedby="{{testIds.description}}"
                aria-label={t("accessibility.actionAriaLabel")}
                role="button"
                tabIndex={0}
              >
                {t("actionLabel")}
              </Button>
            </Stack>
          )}
        </Stack>
      </Card>

      {/* Live region for screen reader announcements */}
      <LiveRegion 
        id="{{testIds.liveRegion}}"
        aria-live="polite"
        aria-atomic="true"
        className="sr-only"
      />
    </>
  );
}
