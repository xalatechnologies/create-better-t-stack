{{!-- 
MANDATORY COMPLIANCE RULES - AUTOMATICALLY ENFORCED:
❌ NO raw HTML elements (div, span, p, h1-h6, button, input, etc.)
✅ ONLY semantic components from @xala-technologies/ui-system
❌ NO hardcoded styling (no style={{}}, no arbitrary Tailwind values)
✅ MANDATORY design token usage for all colors, spacing, typography
✅ Enhanced 8pt Grid System - all spacing in 8px increments
✅ WCAG 2.2 AAA compliance for accessibility
❌ NO hardcoded user-facing text - ALL text must use t() function
✅ MANDATORY localization: English, Norwegian Bokmål, French, Arabic
✅ Explicit TypeScript return types (no 'any' types)
✅ SOLID principles and component composition
✅ Maximum 200 lines per file, 20 lines per function
--}}
import type { Meta, StoryObj } from "@storybook/react";
import { NextIntlClientProvider } from "next-intl";
import { XalaUIProvider } from "@xala-technologies/ui-system";
import {{componentName}} from "./{{fileName}}";

// Mock translations for Storybook
const messages = {
  "{{fileName}}": {
    title: "{{componentName}} Title",
    description: "This is a description for the {{componentName}} component",
    actionLabel: "Perform Action",
    ariaLabel: "{{componentName}} Component",
    status: "Active",
    {{#each props}}
    {{name}}Label: "{{name}}",
    {{/each}}
    yes: "Yes",
    no: "No"
  }
};

const StoryWrapper: React.FC<{ children: React.ReactNode; locale?: string }> = ({ 
  children, 
  locale = "en" 
}) => (
  <NextIntlClientProvider locale={locale} messages={messages}>
    <XalaUIProvider>
      {children}
    </XalaUIProvider>
  </NextIntlClientProvider>
);

const meta: Meta<typeof {{componentName}}> = {
  title: "Components/{{componentName}}",
  component: {{componentName}},
  parameters: {
    layout: "centered",
    docs: {
      description: {
        component: "{{componentName}} component built with Xala UI System. Norwegian compliant with WCAG 2.2 AAA accessibility standards."
      }
    }
  },
  decorators: [
    (Story) => (
      <StoryWrapper>
        <Story />
      </StoryWrapper>
    )
  ],
  argTypes: {
    {{#each props}}
    {{#if (eq type "string")}}
    {{name}}: {
      control: "text",
      description: "{{name}} property"
    },
    {{/if}}
    {{#if (eq type "number")}}
    {{name}}: {
      control: "number",
      description: "{{name}} property"
    },
    {{/if}}
    {{#if (eq type "boolean")}}
    {{name}}: {
      control: "boolean",
      description: "{{name}} property"
    },
    {{/if}}
    {{/each}}
    onAction: {
      action: "action-clicked",
      description: "Callback function when action is triggered"
    },
    className: {
      control: "text",
      description: "Additional CSS classes"
    },
    testId: {
      control: "text",
      description: "Test ID for testing purposes"
    }
  }
};

export default meta;
type Story = StoryObj<typeof {{componentName}}>;

// Default story
export const Default: Story = {
  args: {
    {{#each props}}
    {{#if (eq type "string")}}
    {{name}}: "Sample {{name}}",
    {{/if}}
    {{#if (eq type "number")}}
    {{name}}: 42,
    {{/if}}
    {{#if (eq type "boolean")}}
    {{name}}: true,
    {{/if}}
    {{/each}}
    testId: "{{testIds.root}}"
  }
};

{{#if hasProps}}
// Story with different prop values
export const WithDifferentProps: Story = {
  args: {
    {{#each props}}
    {{#if (eq type "string")}}
    {{name}}: "Different {{name}} value",
    {{/if}}
    {{#if (eq type "number")}}
    {{name}}: 100,
    {{/if}}
    {{#if (eq type "boolean")}}
    {{name}}: false,
    {{/if}}
    {{/each}}
    testId: "{{testIds.root}}-different"
  }
};
{{/if}}

// Story with action handler
export const WithAction: Story = {
  args: {
    {{#each props}}
    {{#if (eq type "string")}}
    {{name}}: "Action {{name}}",
    {{/if}}
    {{#if (eq type "number")}}
    {{name}}: 75,
    {{/if}}
    {{#if (eq type "boolean")}}
    {{name}}: true,
    {{/if}}
    {{/each}}
    onAction: () => alert("Action triggered!"),
    testId: "{{testIds.root}}-with-action"
  }
};

// Story with custom styling
export const WithCustomStyling: Story = {
  args: {
    {{#each props}}
    {{#if (eq type "string")}}
    {{name}}: "Styled {{name}}",
    {{/if}}
    {{#if (eq type "number")}}
    {{name}}: 150,
    {{/if}}
    {{#if (eq type "boolean")}}
    {{name}}: true,
    {{/if}}
    {{/each}}
    className: "shadow-lg border-2",
    testId: "{{testIds.root}}-styled"
  }
};

// Norwegian locale story
export const NorwegianLocale: Story = {
  args: {
    {{#each props}}
    {{#if (eq type "string")}}
    {{name}}: "Norsk {{name}}",
    {{/if}}
    {{#if (eq type "number")}}
    {{name}}: 200,
    {{/if}}
    {{#if (eq type "boolean")}}
    {{name}}: true,
    {{/if}}
    {{/each}}
    testId: "{{testIds.root}}-norwegian"
  },
  decorators: [
    (Story) => (
      <StoryWrapper locale="nb">
        <Story />
      </StoryWrapper>
    )
  ]
};

// Accessibility testing story
export const AccessibilityTest: Story = {
  args: {
    {{#each props}}
    {{#if (eq type "string")}}
    {{name}}: "Accessibility test {{name}}",
    {{/if}}
    {{#if (eq type "number")}}
    {{name}}: 300,
    {{/if}}
    {{#if (eq type "boolean")}}
    {{name}}: true,
    {{/if}}
    {{/each}}
    testId: "{{testIds.root}}-a11y"
  },
  parameters: {
    a11y: {
      config: {
        rules: [
          {
            id: "color-contrast",
            enabled: true
          },
          {
            id: "keyboard-navigation",
            enabled: true
          }
        ]
      }
    }
  }
};
