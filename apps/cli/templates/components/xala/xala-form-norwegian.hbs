{{!-- 
MANDATORY COMPLIANCE RULES - AUTOMATICALLY ENFORCED:
❌ NO raw HTML elements (div, span, p, h1-h6, button, input, etc.)
✅ ONLY semantic components from @xala-technologies/ui-system
❌ NO hardcoded styling (no style={{}}, no arbitrary Tailwind values)
✅ MANDATORY design token usage for all colors, spacing, typography
✅ Enhanced 8pt Grid System - all spacing in 8px increments
✅ WCAG 2.2 AAA compliance for accessibility
❌ NO hardcoded user-facing text - ALL text must use t() function
✅ MANDATORY localization: English, Norwegian Bokmål, French, Arabic
✅ Explicit TypeScript return types (no 'any' types)
✅ SOLID principles and component composition
✅ Maximum 200 lines per file, 20 lines per function
--}}
"use client";

import React from "react";
import { useTranslations } from "next-intl";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { 
  Box,
  Stack,
  Form,
  FormField,
  FormLabel,
  FormInput,
  FormTextarea,
  FormSelect,
  Button,
  Text,
  Heading
} from "@xala-technologies/ui-system";

// Form validation schema
const {{componentName}}Schema = z.object({
  {{#each props}}
  {{#if (eq type "string")}}
  {{name}}: z.string().min(1, "{{name}} er påkrevd"),
  {{/if}}
  {{#if (eq type "number")}}
  {{name}}: z.number().min(0, "{{name}} må være positiv"),
  {{/if}}
  {{#if (eq type "boolean")}}
  {{name}}: z.boolean(),
  {{/if}}
  {{/each}}
});

type {{componentName}}FormData = z.infer<typeof {{componentName}}Schema>;

{{#if hasProps}}
interface {{componentName}}Props {
  onSubmit: (data: {{componentName}}FormData) => void;
  onCancel?: () => void;
  initialData?: Partial<{{componentName}}FormData>;
  isLoading?: boolean;
  className?: string;
  testId?: string;
}
{{else}}
interface {{componentName}}Props {
  onSubmit: (data: any) => void;
  onCancel?: () => void;
  className?: string;
  testId?: string;
}
{{/if}}

/**
 * {{componentName}} component - Norwegian compliant form component
 * Follows WCAG 2.2 AAA accessibility standards and Norwegian data protection laws
 */
export default function {{componentName}}({
  onSubmit,
  onCancel,
  {{#if hasProps}}initialData,{{/if}}
  isLoading = false,
  className,
  testId = "{{testIds.root}}"
}: {{componentName}}Props): React.ReactElement {
  const t = useTranslations("{{fileName}}");

  const {
    register,
    handleSubmit,
    formState: { errors, isSubmitting },
    reset
  } = useForm<{{#if hasProps}}{{componentName}}FormData{{else}}any{{/if}}>({
    {{#if hasProps}}
    resolver: zodResolver({{componentName}}Schema),
    defaultValues: initialData,
    {{/if}}
  });

  const handleFormSubmit = async (data: {{#if hasProps}}{{componentName}}FormData{{else}}any{{/if}}): Promise<void> => {
    try {
      await onSubmit(data);
      reset();
    } catch (error) {
      console.error("Form submission error:", error);
    }
  };

  const handleCancel = (): void => {
    reset();
    onCancel?.();
  };

  return (
    <Box
      variant="container"
      className={className}
      data-testid={testId}
      role="form"
      aria-label={t("ariaLabel")}
    >
      <Stack direction="vertical" spacing="6">
        <Heading level={2} variant="section">
          {t("title")}
        </Heading>

        <Form onSubmit={handleSubmit(handleFormSubmit)}>
          <Stack direction="vertical" spacing="4">
            {{#each props}}
            {{#if (eq type "string")}}
            <FormField>
              <FormLabel htmlFor="{{name}}" required>
                {t("{{name}}Label")}
              </FormLabel>
              <FormInput
                id="{{name}}"
                {...register("{{name}}")}
                error={errors.{{name}}?.message}
                placeholder={t("{{name}}Placeholder")}
                aria-describedby="{{name}}-error"
              />
              {errors.{{name}} && (
                <Text variant="error" id="{{name}}-error">
                  {errors.{{name}}?.message}
                </Text>
              )}
            </FormField>
            {{/if}}
            {{#if (eq type "number")}}
            <FormField>
              <FormLabel htmlFor="{{name}}" required>
                {t("{{name}}Label")}
              </FormLabel>
              <FormInput
                id="{{name}}"
                type="number"
                {...register("{{name}}", { valueAsNumber: true })}
                error={errors.{{name}}?.message}
                placeholder={t("{{name}}Placeholder")}
                aria-describedby="{{name}}-error"
              />
              {errors.{{name}} && (
                <Text variant="error" id="{{name}}-error">
                  {errors.{{name}}?.message}
                </Text>
              )}
            </FormField>
            {{/if}}
            {{/each}}

            <Stack direction="horizontal" spacing="3" justify="end">
              {onCancel && (
                <Button
                  variant="secondary"
                  onClick={handleCancel}
                  disabled={isSubmitting || isLoading}
                  data-testid="{{testIds.cancel}}"
                >
                  {t("cancel")}
                </Button>
              )}
              <Button
                variant="primary"
                type="submit"
                loading={isSubmitting || isLoading}
                data-testid="{{testIds.submit}}"
              >
                {t("submit")}
              </Button>
            </Stack>
          </Stack>
        </Form>
      </Stack>
    </Box>
  );
}
