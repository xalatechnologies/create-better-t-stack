{{!-- 
MANDATORY COMPLIANCE RULES - AUTOMATICALLY ENFORCED:
❌ NO raw HTML elements (div, span, p, h1-h6, button, input, etc.)
✅ ONLY semantic components from @xala-technologies/ui-system
❌ NO hardcoded styling (no style={{}}, no arbitrary Tailwind values)
✅ MANDATORY design token usage for all colors, spacing, typography
✅ Enhanced 8pt Grid System - all spacing in 8px increments
✅ WCAG 2.2 AAA compliance for accessibility
❌ NO hardcoded user-facing text - ALL text must use t() function
✅ MANDATORY localization: English, Norwegian Bokmål, French, Arabic
✅ Explicit TypeScript return types (no 'any' types)
✅ SOLID principles and component composition
✅ Maximum 200 lines per file, 20 lines per function

GENERATE: Business logic components that USE Xala UI System components
NOT: UI primitive components or wrappers around Xala components
--}}
"use client";

import React from "react";
import { useTranslations } from "next-intl";
import { 
  Container,
  Stack,
  Grid,
  Sidebar,
  Header,
  Footer,
  Navigation,
  Breadcrumbs
} from "@xala-technologies/ui-system";

interface {{componentName}}Props {
  children: React.ReactNode;
  {{#if hasProps}}
  {{#each props}}
  {{name}}{{#if optional}}?{{/if}}: {{type}};
  {{/each}}
  {{/if}}
  showSidebar?: boolean;
  showBreadcrumbs?: boolean;
  className?: string;
  testId?: string;
}

/**
 * {{componentName}} - Layout component using Xala UI System
 * Norwegian compliant with WCAG 2.2 AAA accessibility standards
 */
export default function {{componentName}}({
  children,
  {{#if hasProps}}
  {{#each props}}
  {{name}}{{#if defaultValue}} = {{defaultValue}}{{/if}},
  {{/each}}
  {{/if}}
  showSidebar = true,
  showBreadcrumbs = true,
  className,
  testId = "{{testIds.root}}"
}: {{componentName}}Props): React.ReactElement {
  const t = useTranslations("{{fileName}}");

  const navigationItems = [
    { label: t("nav.dashboard"), href: "/dashboard", icon: "dashboard" },
    { label: t("nav.users"), href: "/users", icon: "users" },
    { label: t("nav.settings"), href: "/settings", icon: "settings" }
  ];

  const breadcrumbItems = [
    { label: t("breadcrumbs.home"), href: "/" },
    { label: t("breadcrumbs.current"), href: "#" }
  ];

  return (
    <Container
      variant="full"
      className={className}
      data-testid={testId}
    >
      <Stack direction="vertical" spacing="0" minHeight="screen">
        {/* Header */}
        <Header
          variant="primary"
          sticky
          role="banner"
          aria-label={t("header.ariaLabel")}
        >
          <Navigation
            items={navigationItems}
            variant="horizontal"
            aria-label={t("nav.ariaLabel")}
          />
        </Header>

        {/* Main Content Area */}
        <Stack direction="horizontal" spacing="0" flex="1">
          {/* Sidebar */}
          {showSidebar && (
            <Sidebar
              variant="primary"
              width="64"
              role="navigation"
              aria-label={t("sidebar.ariaLabel")}
            >
              <Navigation
                items={navigationItems}
                variant="vertical"
                aria-label={t("sidebar.nav.ariaLabel")}
              />
            </Sidebar>
          )}

          {/* Content */}
          <Stack direction="vertical" spacing="0" flex="1">
            {/* Breadcrumbs */}
            {showBreadcrumbs && (
              <Container variant="content" padding="4">
                <Breadcrumbs
                  items={breadcrumbItems}
                  aria-label={t("breadcrumbs.ariaLabel")}
                />
              </Container>
            )}

            {/* Main Content */}
            <Container
              variant="content"
              padding="6"
              role="main"
              aria-label={t("main.ariaLabel")}
              flex="1"
            >
              {children}
            </Container>
          </Stack>
        </Stack>

        {/* Footer */}
        <Footer
          variant="primary"
          role="contentinfo"
          aria-label={t("footer.ariaLabel")}
        >
          <Grid columns={3} gap="6">
            <Stack direction="vertical" spacing="2">
              {/* Footer content handled by Footer component */}
            </Stack>
          </Grid>
        </Footer>
      </Stack>
    </Container>
  );
}
