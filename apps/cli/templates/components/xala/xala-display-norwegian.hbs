{{!-- 
MANDATORY COMPLIANCE RULES - AUTOMATICALLY ENFORCED:
❌ NO raw HTML elements (div, span, p, h1-h6, button, input, etc.)
✅ ONLY semantic components from @xala-technologies/ui-system
❌ NO hardcoded styling (no style={{}}, no arbitrary Tailwind values)
✅ MANDATORY design token usage for all colors, spacing, typography
✅ Enhanced 8pt Grid System - all spacing in 8px increments
❌ NO hardcoded user-facing text - ALL text must use t() function
✅ MANDATORY localization: English, Norwegian Bokmål, French, Arabic
✅ Explicit TypeScript return types (no 'any' types)
✅ SOLID principles and component composition
✅ Maximum 200 lines per file, 20 lines per function

COMPLIANCE: Norwegian Government Standards
- Digdir (Norwegian Digitalisation Agency) principles
- NSM (Norwegian National Security Authority) guidelines
- Norwegian language requirements (Bokmål primary)
- BankID integration standards
- Altinn integration requirements
- Norwegian government design standards
- Norwegian timezone and currency formatting
--}}
"use client";

import React from "react";
import { useTranslations } from "next-intl";
import { useBankID } from "@/hooks/useBankID";
import { useAltinn } from "@/hooks/useAltinn";
import { useNorwegianFormatting } from "@/hooks/useNorwegianFormatting";
import { 
  Card,
  Stack,
  Text,
  Heading,
  Badge,
  Button,
  NorwegianFlag,
  BankIDButton,
  AltinnIntegration
} from "@xala-technologies/ui-system";

{{#if hasProps}}
interface {{componentName}}Props {
  {{#each props}}
  {{name}}{{#if optional}}?{{/if}}: {{type}};
  {{/each}}
  onAction?: () => void;
  onBankIDAuth?: () => void;
  onAltinnSync?: () => void;
  enableBankID?: boolean;
  enableAltinn?: boolean;
  className?: string;
  testId?: string;
}
{{else}}
interface {{componentName}}Props {
  onAction?: () => void;
  onBankIDAuth?: () => void;
  onAltinnSync?: () => void;
  enableBankID?: boolean;
  enableAltinn?: boolean;
  className?: string;
  testId?: string;
}
{{/if}}

/**
 * {{componentName}} - Norwegian government compliant business component using Xala UI System
 * Implements Digdir and NSM standards with BankID and Altinn integration
 */
export default function {{componentName}}({{#if hasProps}}{
  {{#each props}}
  {{name}}{{#if defaultValue}} = {{defaultValue}}{{/if}},
  {{/each}}
  onAction,
  onBankIDAuth,
  onAltinnSync,
  enableBankID = false,
  enableAltinn = false,
  className,
  testId = "{{testIds.root}}"
}: {{componentName}}Props{{else}}{ 
  onAction, 
  onBankIDAuth, 
  onAltinnSync, 
  enableBankID = false, 
  enableAltinn = false, 
  className, 
  testId = "{{testIds.root}}" 
}: {{componentName}}Props{{/if}}): React.ReactElement {
  const t = useTranslations("{{fileName}}");
  const { authenticate, isAuthenticated, user } = useBankID();
  const { syncData, isConnected } = useAltinn();
  const { formatCurrency, formatDate, formatPersonalNumber } = useNorwegianFormatting();

  const handleAction = (): void => {
    // Norwegian compliance: Log action in Norwegian timezone
    console.log(`Action performed at ${formatDate(new Date(), 'nb-NO')}`);
    onAction?.();
  };

  const handleBankIDAuth = async (): Promise<void> => {
    try {
      await authenticate();
      onBankIDAuth?.();
    } catch (error) {
      console.error('BankID authentication failed:', error);
    }
  };

  const handleAltinnSync = async (): Promise<void> => {
    try {
      await syncData();
      onAltinnSync?.();
    } catch (error) {
      console.error('Altinn sync failed:', error);
    }
  };

  return (
    <Card
      variant="elevated"
      padding="6"
      className={className}
      data-testid={testId}
      role="region"
      aria-label={t("ariaLabel")}
    >
      <Stack direction="vertical" spacing="4">
        <Stack direction="horizontal" justify="between" align="center">
          <Heading level={3} variant="section">
            {t("title")}
          </Heading>
          {{#if hasProps}}
          <Badge variant="info">
            {t("status")}
          </Badge>
          {{/if}}
        </Stack>

        <Text variant="body" color="secondary">
          {t("description")}
        </Text>

        {{#if hasProps}}
        <Stack direction="vertical" spacing="3">
          {{#each props}}
          {{#if (eq type "string")}}
          <Stack direction="horizontal" justify="between">
            <Text variant="label">{t("{{name}}Label")}:</Text>
            <Text variant="body">{{{name}}}</Text>
          </Stack>
          {{/if}}
          {{#if (eq type "number")}}
          <Stack direction="horizontal" justify="between">
            <Text variant="label">{t("{{name}}Label")}:</Text>
            <Text variant="body">{{{name}}}</Text>
          </Stack>
          {{/if}}
          {{#if (eq type "boolean")}}
          <Stack direction="horizontal" justify="between">
            <Text variant="label">{t("{{name}}Label")}:</Text>
            <Badge variant={{{name}} ? "success" : "warning"}>
              {t({{name}} ? "yes" : "no")}
            </Badge>
          </Stack>
          {{/if}}
          {{/each}}
        </Stack>
        {{/if}}

        {onAction && (
          <Stack direction="horizontal" justify="end">
            <Button
              variant="primary"
              size="md"
              onClick={handleAction}
              data-testid="{{testIds.action}}"
            >
              {t("actionLabel")}
            </Button>
          </Stack>
        )}
      </Stack>
    </Card>
  );
}
