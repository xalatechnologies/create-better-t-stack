{{#if typescript}}
import type { NextConfig } from 'next';
{{/if}}

/**
 * {{description}}
 * 
 * Features:
 * - Norwegian compliance optimized
 * - Multi-language routing support
 * - Performance optimizations
 * - Security headers
 * {{#if i18n}}
 * - Internationalization with Norwegian locales
 * {{/if}}
 * {{#if pwa}}
 * - Progressive Web App support
 * {{/if}}
 */
const nextConfig{{#if typescript}}: NextConfig{{/if}} = {
  {{#if experimental}}
  experimental: {
    {{#if serverComponents}}
    serverComponents: true,
    {{/if}}
    {{#if appDir}}
    appDir: true,
    {{/if}}
    {{#if typedRoutes}}
    typedRoutes: true,
    {{/if}}
    {{#if optimizePackageImports}}
    optimizePackageImports: [
      '@xala-technologies/ui-system',
      'lodash',
      'date-fns',
    ],
    {{/if}}
    {{#if serverComponentsExternalPackages}}
    serverComponentsExternalPackages: [
      'sharp',
      'canvas',
    ],
    {{/if}}
  },
  {{/if}}
  
  {{#if i18n}}
  i18n: {
    locales: ['nb-NO', 'nn-NO', 'en-US', 'ar-SA', 'fr-FR'],
    defaultLocale: 'nb-NO',
    localeDetection: true,
    {{#if domains}}
    domains: [
      {
        domain: '{{domain.no}}',
        defaultLocale: 'nb-NO',
        locales: ['nb-NO', 'nn-NO'],
      },
      {
        domain: '{{domain.com}}',
        defaultLocale: 'en-US',
        locales: ['en-US'],
      },
      {
        domain: '{{domain.fr}}',
        defaultLocale: 'fr-FR',
        locales: ['fr-FR'],
      },
    ],
    {{/if}}
  },
  {{/if}}
  
  {{#if images}}
  images: {
    {{#if domains}}
    domains: [
      {{#each images.domains}}
      '{{this}}',
      {{/each}}
    ],
    {{/if}}
    {{#if remotePatterns}}
    remotePatterns: [
      {{#each images.remotePatterns}}
      {
        protocol: '{{protocol}}',
        hostname: '{{hostname}}',
        {{#if pathname}}
        pathname: '{{pathname}}',
        {{/if}}
      },
      {{/each}}
    ],
    {{/if}}
    formats: ['image/avif', 'image/webp'],
    {{#if deviceSizes}}
    deviceSizes: [{{join images.deviceSizes ', '}}],
    {{/if}}
    {{#if imageSizes}}
    imageSizes: [{{join images.imageSizes ', '}}],
    {{/if}}
    minimumCacheTTL: {{images.cacheTTL}},
    {{#if dangerouslyAllowSVG}}
    dangerouslyAllowSVG: true,
    contentSecurityPolicy: "default-src 'self'; script-src 'none'; sandbox;",
    {{/if}}
  },
  {{/if}}
  
  {{#if compiler}}
  compiler: {
    {{#if removeConsole}}
    removeConsole: {
      exclude: ['error', 'warn'],
    },
    {{/if}}
    {{#if reactRemoveProperties}}
    reactRemoveProperties: true,
    {{/if}}
    {{#if styledComponents}}
    styledComponents: true,
    {{/if}}
  },
  {{/if}}
  
  {{#if poweredByHeader}}
  poweredByHeader: false,
  {{/if}}
  
  {{#if compress}}
  compress: true,
  {{/if}}
  
  {{#if reactStrictMode}}
  reactStrictMode: true,
  {{/if}}
  
  {{#if swcMinify}}
  swcMinify: true,
  {{/if}}
  
  {{#if eslint}}
  eslint: {
    ignoreDuringBuilds: false,
    {{#if dirs}}
    dirs: [{{#each eslint.dirs}}'{{this}}'{{#unless @last}}, {{/unless}}{{/each}}],
    {{/if}}
  },
  {{/if}}
  
  {{#if typescript}}
  typescript: {
    ignoreBuildErrors: false,
    tsconfigPath: './tsconfig.json',
  },
  {{/if}}
  
  {{#if headers}}
  async headers() {
    return [
      {
        source: '/(.*)',
        headers: [
          // Norwegian compliance security headers
          {
            key: 'X-Frame-Options',
            value: 'DENY',
          },
          {
            key: 'X-Content-Type-Options',
            value: 'nosniff',
          },
          {
            key: 'Referrer-Policy',
            value: 'strict-origin-when-cross-origin',
          },
          {
            key: 'Permissions-Policy',
            value: 'camera=(), microphone=(), geolocation=()',
          },
          {{#if csp}}
          {
            key: 'Content-Security-Policy',
            value: [
              "default-src 'self'",
              "script-src 'self' 'unsafe-eval' 'unsafe-inline'",
              "style-src 'self' 'unsafe-inline'",
              "img-src 'self' data: https:",
              "font-src 'self'",
              "connect-src 'self'",
              {{#if analytics}}
              "script-src 'self' https://www.google-analytics.com",
              "connect-src 'self' https://www.google-analytics.com",
              {{/if}}
            ].join('; '),
          },
          {{/if}}
          {{#if hsts}}
          {
            key: 'Strict-Transport-Security',
            value: 'max-age=31536000; includeSubDomains',
          },
          {{/if}}
        ],
      },
      {{#if staticHeaders}}
      {
        source: '/static/(.*)',
        headers: [
          {
            key: 'Cache-Control',
            value: 'public, max-age=31536000, immutable',
          },
        ],
      },
      {{/if}}
      {{#if apiHeaders}}
      {
        source: '/api/(.*)',
        headers: [
          {
            key: 'Access-Control-Allow-Origin',
            value: '{{cors.origin}}',
          },
          {
            key: 'Access-Control-Allow-Methods',
            value: 'GET, POST, PUT, DELETE, OPTIONS',
          },
          {
            key: 'Access-Control-Allow-Headers',
            value: 'Content-Type, Authorization',
          },
        ],
      },
      {{/if}}
    ];
  },
  {{/if}}
  
  {{#if redirects}}
  async redirects() {
    return [
      {{#each redirects}}
      {
        source: '{{source}}',
        destination: '{{destination}}',
        permanent: {{permanent}},
        {{#if locale}}
        locale: {{locale}},
        {{/if}}
      },
      {{/each}}
    ];
  },
  {{/if}}
  
  {{#if rewrites}}
  async rewrites() {
    return [
      {{#each rewrites}}
      {
        source: '{{source}}',
        destination: '{{destination}}',
        {{#if locale}}
        locale: {{locale}},
        {{/if}}
      },
      {{/each}}
    ];
  },
  {{/if}}
  
  {{#if webpack}}
  webpack: (config, { buildId, dev, isServer, defaultLoaders, webpack }) => {
    {{#if bundleAnalyzer}}
    // Bundle analyzer
    if (process.env.ANALYZE) {
      const { BundleAnalyzerPlugin } = require('webpack-bundle-analyzer');
      config.plugins.push(
        new BundleAnalyzerPlugin({
          analyzerMode: 'server',
          analyzerPort: isServer ? 8888 : 8889,
          openAnalyzer: true,
        })
      );
    }
    {{/if}}
    
    {{#if svgr}}
    // SVGR support
    config.module.rules.push({
      test: /\.svg$/i,
      issuer: /\.[jt]sx?$/,
      use: ['@svgr/webpack'],
    });
    {{/if}}
    
    {{#if aliasOptimization}}
    // Optimize bundle size with aliases
    config.resolve.alias = {
      ...config.resolve.alias,
      'lodash': 'lodash-es',
      'moment': 'dayjs',
    };
    {{/if}}
    
    {{#if nodePolyfills}}
    // Node polyfills for client-side
    if (!isServer) {
      config.resolve.fallback = {
        ...config.resolve.fallback,
        fs: false,
        net: false, 
        tls: false,
      };
    }
    {{/if}}
    
    return config;
  },
  {{/if}}
  
  {{#if env}}
  env: {
    {{#each env}}
    {{name}}: process.env.{{name}},
    {{/each}}
  },
  {{/if}}
  
  {{#if publicRuntimeConfig}}
  publicRuntimeConfig: {
    {{#each publicRuntimeConfig}}
    {{name}}: process.env.{{envVar}},
    {{/each}}
  },
  {{/if}}
  
  {{#if serverRuntimeConfig}}
  serverRuntimeConfig: {
    {{#each serverRuntimeConfig}}
    {{name}}: process.env.{{envVar}},
    {{/each}}
  },
  {{/if}}
  
  {{#if output}}
  output: '{{output}}',
  {{/if}}
  
  {{#if distDir}}
  distDir: '{{distDir}}',
  {{/if}}
  
  {{#if generateEtags}}
  generateEtags: {{generateEtags}},
  {{/if}}
  
  {{#if pageExtensions}}
  pageExtensions: [{{#each pageExtensions}}'{{this}}'{{#unless @last}}, {{/unless}}{{/each}}],
  {{/if}}
  
  {{#if trailingSlash}}
  trailingSlash: {{trailingSlash}},
  {{/if}}
  
  {{#if basePath}}
  basePath: '{{basePath}}',
  {{/if}}
  
  {{#if assetPrefix}}
  assetPrefix: '{{assetPrefix}}',
  {{/if}}
};

{{#if moduleExports}}
module.exports = nextConfig;
{{else}}
export default nextConfig;
{{/if}}