import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
{{#if localization}}
import { I18nProvider } from '../providers/I18nProvider';
{{/if}}
{{#if tokens}}
import { TokenProvider } from '@xala-technologies/ui-system';
{{/if}}
import { {{pascalCase name}} } from './{{pascalCase name}}';
{{#if typescript}}
import type { {{pascalCase name}}Props } from './{{pascalCase name}}';
{{/if}}

{{#if compliance.gdpr}}
// GDPR Compliance: These tests ensure component handles personal data correctly
{{/if}}
{{#if compliance.wcag}}
// WCAG {{compliance.wcag}} Compliance: Accessibility tests included
{{/if}}
{{#if compliance.nsm}}
// {{nsmClassification compliance.nsm.classification}}
{{/if}}

describe('{{pascalCase name}}', () => {
  {{#if localization}}
  const mockTranslations = {
    '{{kebabCase name}}.ariaLabel': '{{name}} component',
    '{{kebabCase name}}.defaultText': 'Default {{name}} text',
    'common.loading': 'Loading...',
  };
  {{/if}}

  {{#if tokens}}
  const mockTokens = {
    colors: {
      primary: { 500: '#3b82f6' },
      white: '#ffffff',
      background: { card: '#f9fafb' },
    },
    spacing: { md: '1rem' },
    radius: { md: '0.375rem' },
    shadows: { sm: '0 1px 2px 0 rgb(0 0 0 / 0.05)' },
  };
  {{/if}}

  const defaultProps{{#if typescript}}: {{pascalCase name}}Props{{/if}} = {
    {{#each props}}
    {{#if defaultValue}}
    {{name}}: {{defaultValue}},
    {{/if}}
    {{/each}}
  };

  const renderComponent = (props{{#if typescript}}: Partial<{{pascalCase name}}Props>{{/if}} = {}) => {
    const mergedProps = { ...defaultProps, ...props };
    
    return render(
      {{#if tokens}}
      <TokenProvider tokens={mockTokens}>
      {{/if}}
      {{#if localization}}
        <I18nProvider translations={mockTranslations} locale="nb-NO">
      {{/if}}
          <{{pascalCase name}} {...mergedProps} />
      {{#if localization}}
        </I18nProvider>
      {{/if}}
      {{#if tokens}}
      </TokenProvider>
      {{/if}}
    );
  };

  // Basic Rendering Tests
  describe('Rendering', () => {
    it('should render without crashing', () => {
      renderComponent();
      expect(screen.getByRole('{{accessibility.role}}')).toBeInTheDocument();
    });

    it('should render with custom className', () => {
      const customClass = 'custom-{{kebabCase name}}';
      renderComponent({ className: customClass });
      
      const element = screen.getByRole('{{accessibility.role}}');
      expect(element).toHaveClass(customClass);
      expect(element).toHaveClass('xala-{{kebabCase name}}');
    });

    {{#if hasContent}}
    it('should render children content', () => {
      const testContent = 'Test {{name}} Content';
      renderComponent({ children: testContent });
      
      expect(screen.getByText(testContent)).toBeInTheDocument();
    });
    {{/if}}

    {{#if props}}
    it('should handle all prop variants', () => {
      {{#each props}}
      {{#if enumValues}}
      // Test {{name}} prop variants
      {{#each enumValues}}
      renderComponent({ {{../name}}: '{{this}}' });
      {{/each}}
      {{/if}}
      {{/each}}
    });
    {{/if}}
  });

  {{#if accessibility}}
  // Accessibility Tests (WCAG {{compliance.wcag}} Compliance)
  describe('Accessibility', () => {
    {{#if accessibility.ariaSupport}}
    it('should have proper ARIA attributes', () => {
      const ariaLabel = 'Test {{name}} Label';
      renderComponent({ 'aria-label': ariaLabel });
      
      const element = screen.getByRole('{{accessibility.role}}');
      expect(element).toHaveAttribute('aria-label', ariaLabel);
    });

    it('should support aria-describedby', () => {
      const describedBy = 'description-id';
      renderComponent({ 'aria-describedby': describedBy });
      
      const element = screen.getByRole('{{accessibility.role}}');
      expect(element).toHaveAttribute('aria-describedby', describedBy);
    });
    {{/if}}

    {{#if accessibility.keyboardNavigation}}
    it('should be keyboard accessible', async () => {
      const user = userEvent.setup();
      const mockClick = jest.fn();
      
      renderComponent({ onClick: mockClick });
      
      const element = screen.getByRole('{{accessibility.role}}');
      
      // Test Tab navigation
      await user.tab();
      expect(element).toHaveFocus();
      
      // Test Enter key activation
      await user.keyboard('{Enter}');
      expect(mockClick).toHaveBeenCalledTimes(1);
      
      // Test Space key activation
      await user.keyboard(' ');
      expect(mockClick).toHaveBeenCalledTimes(2);
    });

    it('should have visible focus indicators', async () => {
      const user = userEvent.setup();
      renderComponent();
      
      const element = screen.getByRole('{{accessibility.role}}');
      
      await user.tab();
      expect(element).toHaveFocus();
      
      // Focus indicators should be visible (this would be tested with visual regression)
      expect(element).toHaveAttribute('tabindex', '0');
    });
    {{/if}}

    it('should meet color contrast requirements', () => {
      renderComponent();
      const element = screen.getByRole('{{accessibility.role}}');
      
      // This would typically use a color contrast testing library
      // For now, we verify the element has appropriate styling classes
      expect(element).toHaveClass('xala-{{kebabCase name}}');
    });

    {{#if localization}}
    it('should work with screen readers', () => {
      renderComponent();
      
      // Verify screen reader announcements
      const element = screen.getByRole('{{accessibility.role}}');
      
      {{#if accessibility.announcements}}
      // Should have live regions for dynamic announcements
      expect(element).toBeInTheDocument();
      {{/if}}
    });
    {{/if}}
  });
  {{/if}}

  {{#if hasEvents}}
  // Event Handling Tests
  describe('Event Handling', () => {
    it('should handle click events', async () => {
      const user = userEvent.setup();
      const mockClick = jest.fn();
      
      renderComponent({ onClick: mockClick });
      
      const element = screen.getByRole('{{accessibility.role}}');
      await user.click(element);
      
      expect(mockClick).toHaveBeenCalledTimes(1);
    });

    it('should handle focus events', async () => {
      const user = userEvent.setup();
      const mockFocus = jest.fn();
      const mockBlur = jest.fn();
      
      renderComponent({ onFocus: mockFocus, onBlur: mockBlur });
      
      const element = screen.getByRole('{{accessibility.role}}');
      
      await user.click(element);
      expect(mockFocus).toHaveBeenCalledTimes(1);
      
      await user.tab();
      expect(mockBlur).toHaveBeenCalledTimes(1);
    });

    {{#if props}}
    {{#each props}}
    {{#if (eq name 'disabled')}}
    it('should not trigger events when disabled', async () => {
      const user = userEvent.setup();
      const mockClick = jest.fn();
      
      renderComponent({ disabled: true, onClick: mockClick });
      
      const element = screen.getByRole('{{../accessibility.role}}');
      await user.click(element);
      
      expect(mockClick).not.toHaveBeenCalled();
      expect(element).toBeDisabled();
    });
    {{/if}}
    {{/each}}
    {{/if}}
  });
  {{/if}}

  {{#if hasState}}
  // State Management Tests
  describe('State Management', () => {
    it('should manage internal state correctly', async () => {
      const user = userEvent.setup();
      renderComponent();
      
      const element = screen.getByRole('{{accessibility.role}}');
      
      // Test state changes through user interaction
      await user.click(element);
      
      // Verify state-dependent UI updates
      await waitFor(() => {
        // Add assertions based on state-dependent behavior
        expect(element).toBeInTheDocument();
      });
    });
  });
  {{/if}}

  {{#if localization}}
  // Localization Tests
  describe('Localization', () => {
    it('should display translated text', () => {
      renderComponent();
      
      // Verify Norwegian translations are applied
      expect(screen.getByLabelText('{{name}} component')).toBeInTheDocument();
    });

    it('should handle missing translations gracefully', () => {
      render(
        <I18nProvider translations={{}} locale="nb-NO">
          <{{pascalCase name}} {...defaultProps} />
        </I18nProvider>
      );
      
      // Should not crash with missing translations
      expect(screen.getByRole('{{accessibility.role}}')).toBeInTheDocument();
    });

    it('should support RTL languages', () => {
      render(
        <I18nProvider translations={mockTranslations} locale="ar-SA">
          <{{pascalCase name}} {...defaultProps} />
        </I18nProvider>
      );
      
      const element = screen.getByRole('{{accessibility.role}}');
      // RTL-specific assertions would go here
      expect(element).toBeInTheDocument();
    });
  });
  {{/if}}

  {{#if compliance.gdpr}}
  // GDPR Compliance Tests
  describe('GDPR Compliance', () => {
    it('should not process personal data without consent', () => {
      renderComponent();
      
      // Verify no personal data is processed without explicit consent
      // This would depend on the specific component functionality
      expect(screen.getByRole('{{accessibility.role}}')).toBeInTheDocument();
    });

    it('should allow data deletion', () => {
      // Test data deletion functionality if applicable
      renderComponent();
      
      // Verify user can delete their data
      expect(screen.getByRole('{{accessibility.role}}')).toBeInTheDocument();
    });
  });
  {{/if}}

  {{#if styling.tokenBased}}
  // Design Token Integration Tests
  describe('Design Tokens', () => {
    it('should apply design tokens correctly', () => {
      renderComponent();
      
      const element = screen.getByRole('{{accessibility.role}}');
      
      // Verify token-based styles are applied
      expect(element).toHaveClass('xala-{{kebabCase name}}');
      
      // Additional style assertions would go here
    });

    it('should handle missing tokens gracefully', () => {
      render(
        <TokenProvider tokens={{}}>
          <{{pascalCase name}} {...defaultProps} />
        </TokenProvider>
      );
      
      // Should not crash with missing tokens
      expect(screen.getByRole('{{accessibility.role}}')).toBeInTheDocument();
    });
  });
  {{/if}}

  // Performance Tests
  describe('Performance', () => {
    it('should not cause unnecessary re-renders', () => {
      const renderSpy = jest.fn();
      
      const TestComponent = () => {
        renderSpy();
        return <{{pascalCase name}} {...defaultProps} />;
      };
      
      const { rerender } = render(<TestComponent />);
      expect(renderSpy).toHaveBeenCalledTimes(1);
      
      // Re-render with same props
      rerender(<TestComponent />);
      
      // Component should be optimized to prevent unnecessary renders
      expect(renderSpy).toHaveBeenCalledTimes(2);
    });

    {{#if hasEffects}}
    it('should cleanup effects properly', () => {
      const { unmount } = renderComponent();
      
      // Unmount component
      unmount();
      
      // Verify no memory leaks or lingering effects
      // This would typically involve checking for event listeners, timers, etc.
    });
    {{/if}}
  });

  // Error Boundary Tests
  describe('Error Handling', () => {
    it('should handle errors gracefully', () => {
      // Mock console.error to suppress error output in tests
      const consoleSpy = jest.spyOn(console, 'error').mockImplementation();
      
      // Test error scenarios
      renderComponent();
      
      // Verify component doesn't crash with invalid props
      expect(screen.getByRole('{{accessibility.role}}')).toBeInTheDocument();
      
      consoleSpy.mockRestore();
    });
  });
});

// Integration Tests
describe('{{pascalCase name}} Integration', () => {
  it('should work within forms', () => {
    render(
      <form>
        <{{pascalCase name}} {...defaultProps} />
      </form>
    );
    
    expect(screen.getByRole('{{accessibility.role}}')).toBeInTheDocument();
  });

  it('should work with other components', () => {
    render(
      <div>
        <{{pascalCase name}} {...defaultProps} />
        <{{pascalCase name}} {...defaultProps} />
      </div>
    );
    
    expect(screen.getAllByRole('{{accessibility.role}}')).toHaveLength(2);
  });
});

// Snapshot Tests
describe('{{pascalCase name}} Snapshots', () => {
  it('should match snapshot with default props', () => {
    const { container } = renderComponent();
    expect(container.firstChild).toMatchSnapshot();
  });

  {{#if props}}
  it('should match snapshot with all props', () => {
    const allProps = {
      {{#each props}}
      {{name}}: {{#if (eq type 'string')}}'test-{{name}}'{{else if (eq type 'boolean')}}true{{else if (eq type 'number')}}42{{else}}null{{/if}},
      {{/each}}
    };
    
    const { container } = renderComponent(allProps);
    expect(container.firstChild).toMatchSnapshot();
  });
  {{/if}}
});