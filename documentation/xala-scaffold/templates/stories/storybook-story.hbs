{{#if typescript}}
import type { Meta, StoryObj } from '@storybook/react';
{{/if}}
import React from 'react';
{{#if localization}}
import { I18nProvider } from '../providers/I18nProvider';
{{/if}}
{{#if tokens}}
import { TokenProvider } from '@xala-technologies/ui-system';
{{/if}}
import { {{pascalCase componentName}} } from './{{pascalCase componentName}}';
{{#if typescript}}
import type { {{pascalCase componentName}}Props } from './{{pascalCase componentName}}';
{{/if}}

// {{wcagLevel compliance.wcag}}
// {{gdprNotice}}
// {{nsmClassification compliance.nsm.classification}}

{{#if localization}}
// Mock translations for stories
const mockTranslations = {
  '{{kebabCase componentName}}.ariaLabel': '{{humanCase componentName}} component',
  '{{kebabCase componentName}}.defaultText': 'Default {{humanCase componentName}} text',
  'common.loading': 'Loading...',
  'common.error': 'An error occurred',
  'common.success': 'Success',
};
{{/if}}

{{#if tokens}}
// Mock design tokens for stories
const mockTokens = {
  colors: {
    primary: { 
      50: '#eff6ff',
      100: '#dbeafe', 
      500: '#3b82f6',
      600: '#2563eb',
      700: '#1d4ed8',
      900: '#1e3a8a'
    },
    gray: {
      50: '#f9fafb',
      100: '#f3f4f6',
      500: '#6b7280',
      600: '#4b5563',
      900: '#111827'
    },
    white: '#ffffff',
    black: '#000000',
    background: {
      default: '#ffffff',
      card: '#f9fafb',
      muted: '#f3f4f6'
    },
    text: {
      primary: '#111827',
      secondary: '#6b7280',
      muted: '#9ca3af'
    }
  },
  spacing: {
    xs: '0.25rem',
    sm: '0.5rem', 
    md: '1rem',
    lg: '1.5rem',
    xl: '2rem',
    '2xl': '3rem'
  },
  radius: {
    sm: '0.125rem',
    md: '0.375rem',
    lg: '0.5rem',
    xl: '0.75rem',
    '2xl': '1rem'
  },
  shadows: {
    sm: '0 1px 2px 0 rgb(0 0 0 / 0.05)',
    md: '0 4px 6px -1px rgb(0 0 0 / 0.1)',
    lg: '0 10px 15px -3px rgb(0 0 0 / 0.1)',
    xl: '0 20px 25px -5px rgb(0 0 0 / 0.1)'
  },
  typography: {
    fontFamily: {
      sans: ['Inter', 'system-ui', 'sans-serif'],
      mono: ['JetBrains Mono', 'monospace']
    },
    fontSize: {
      xs: '0.75rem',
      sm: '0.875rem',
      base: '1rem',
      lg: '1.125rem',
      xl: '1.25rem',
      '2xl': '1.5rem',
      '3xl': '1.875rem'
    },
    lineHeight: {
      tight: '1.25',
      normal: '1.5',
      relaxed: '1.75'
    }
  }
};
{{/if}}

// Story metadata
const meta{{#if typescript}}: Meta<typeof {{pascalCase componentName}}>{{/if}} = {
  title: '{{storyCategory}}/ {{pascalCase componentName}}',
  component: {{pascalCase componentName}},
  parameters: {
    layout: 'centered',
    docs: {
      description: {
        component: '{{description}}\n\n## Features\n- WCAG {{compliance.wcag}} compliant\n- Norwegian localization support\n- Design token integration\n- Server-side rendering safe{{#if compliance.gdpr}}\n- GDPR compliant data handling{{/if}}'
      }
    },
    {{#if backgrounds}}
    backgrounds: {
      default: 'light',
      values: [
        { name: 'light', value: '#ffffff' },
        { name: 'dark', value: '#0f172a' },
        { name: 'gray', value: '#f1f5f9' }
      ]
    },
    {{/if}}
    {{#if viewport}}
    viewport: {
      viewports: {
        mobile: {
          name: 'Mobile',
          styles: { width: '375px', height: '667px' }
        },
        tablet: {
          name: 'Tablet', 
          styles: { width: '768px', height: '1024px' }
        },
        desktop: {
          name: 'Desktop',
          styles: { width: '1024px', height: '768px' }
        }
      }
    },
    {{/if}}
    {{#if a11y}}
    a11y: {
      config: {
        rules: [
          {
            id: 'color-contrast',
            enabled: true
          },
          {
            id: 'focus-order-semantics', 
            enabled: true
          },
          {
            id: 'keyboard-navigation',
            enabled: true
          }
        ]
      }
    },
    {{/if}}
  },
  {{#if argTypes}}
  argTypes: {
    {{#each argTypes}}
    {{name}}: {
      {{#if description}}
      description: '{{description}}',
      {{/if}}
      {{#if control}}
      control: { type: '{{control.type}}'{{#if control.options}}, options: {{json control.options}}{{/if}} },
      {{/if}}
      {{#if table}}
      table: {
        type: { summary: '{{table.type}}' },
        {{#if table.defaultValue}}
        defaultValue: { summary: '{{table.defaultValue}}' },
        {{/if}}
        {{#if table.category}}
        category: '{{table.category}}',
        {{/if}}
      },
      {{/if}}
    },
    {{/each}}
  },
  {{/if}}
  {{#if decorators}}
  decorators: [
    {{#if localization}}
    (Story, context) => (
      <I18nProvider translations={mockTranslations} locale={context.globals.locale || 'nb-NO'}>
        <Story />
      </I18nProvider>
    ),
    {{/if}}
    {{#if tokens}}
    (Story) => (
      <TokenProvider tokens={mockTokens}>
        <Story />
      </TokenProvider>
    ),
    {{/if}}
    {{#each customDecorators}}
    {{this}},
    {{/each}}
  ],
  {{/if}}
};

export default meta;
{{#if typescript}}
type Story = StoryObj<typeof meta>;
{{/if}}

// Default story
export const Default{{#if typescript}}: Story{{/if}} = {
  {{#if args}}
  args: {
    {{#each args}}
    {{name}}: {{#if (eq type 'string')}}'{{value}}'{{else if (eq type 'boolean')}}{{value}}{{else if (eq type 'number')}}{{value}}{{else}}{{{value}}}{{/if}},
    {{/each}}
  },
  {{/if}}
  {{#if parameters}}
  parameters: {
    {{#each parameters}}
    {{name}}: {{{value}}},
    {{/each}}
  },
  {{/if}}
};

{{#each variants}}
// {{pascalCase name}} variant
export const {{pascalCase name}}{{#if ../typescript}}: Story{{/if}} = {
  {{#if args}}
  args: {
    ...Default.args,
    {{#each args}}
    {{name}}: {{#if (eq type 'string')}}'{{value}}'{{else if (eq type 'boolean')}}{{value}}{{else if (eq type 'number')}}{{value}}{{else}}{{{value}}}{{/if}},
    {{/each}}
  },
  {{/if}}
  {{#if parameters}}
  parameters: {
    {{#each parameters}}
    {{name}}: {{{value}}},
    {{/each}}
  },
  {{/if}}
  {{#if play}}
  play: async ({ canvasElement }) => {
    {{#if ../playwright}}
    const canvas = within(canvasElement);
    {{/if}}
    
    {{{play}}}
  },
  {{/if}}
};

{{/each}}

{{#if interactive}}
// Interactive examples
export const Interactive{{#if typescript}}: Story{{/if}} = {
  args: {
    ...Default.args,
    {{#each interactiveArgs}}
    {{name}}: {{#if (eq type 'string')}}'{{value}}'{{else if (eq type 'boolean')}}{{value}}{{else if (eq type 'number')}}{{value}}{{else}}{{{value}}}{{/if}},
    {{/each}}
  },
  {{#if interactivePlay}}
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);
    
    {{{interactivePlay}}}
  },
  {{/if}}
};
{{/if}}

{{#if states}}
// All states showcase
export const AllStates{{#if typescript}}: Story{{/if}} = {
  render: (args) => (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 p-6">
      {{#each states}}
      <div className="space-y-2">
        <h3 className="text-sm font-medium text-gray-700">{{humanCase name}}</h3>
        <{{../pascalCase ../componentName}}
          {...args}
          {{#each props}}
          {{name}}={{{value}}}
          {{/each}}
        />
      </div>
      {{/each}}
    </div>
  ),
  args: {
    ...Default.args,
  },
  parameters: {
    layout: 'fullscreen',
  },
};
{{/if}}

{{#if accessibility}}
// Accessibility demonstration
export const AccessibilityDemo{{#if typescript}}: Story{{/if}} = {
  render: (args) => (
    <div className="space-y-6 p-6">
      <div className="space-y-2">
        <h3 className="text-lg font-semibold">Keyboard Navigation</h3>
        <p className="text-sm text-gray-600">Tab through the components below to test keyboard navigation.</p>
        <div className="flex flex-wrap gap-4">
          {{#each accessibilityExamples}}
          <{{../pascalCase ../componentName}}
            {...args}
            {{#each props}}
            {{name}}={{{value}}}
            {{/each}}
          />
          {{/each}}
        </div>
      </div>
      
      <div className="space-y-2">
        <h3 className="text-lg font-semibold">Screen Reader Test</h3>
        <p className="text-sm text-gray-600">Use a screen reader to test the component announcements.</p>
        <{{pascalCase componentName}}
          {...args}
          aria-label="Screen reader test component"
          aria-describedby="screen-reader-description"
        />
        <p id="screen-reader-description" className="sr-only">
          This component is being tested for screen reader compatibility.
        </p>
      </div>
    </div>
  ),
  args: {
    ...Default.args,
  },
  parameters: {
    layout: 'fullscreen',
    a11y: {
      config: {
        rules: [
          { id: 'color-contrast', enabled: true },
          { id: 'keyboard-navigation', enabled: true },
          { id: 'focus-order-semantics', enabled: true },
          { id: 'aria-labels', enabled: true }
        ]
      }
    }
  },
};
{{/if}}

{{#if responsive}}
// Responsive design showcase
export const ResponsiveDesign{{#if typescript}}: Story{{/if}} = {
  render: (args) => (
    <div className="space-y-8">
      <div className="space-y-4">
        <h3 className="text-lg font-semibold">Mobile (375px)</h3>
        <div style={{ width: '375px', border: '1px solid #e5e7eb', padding: '1rem' }}>
          <{{pascalCase componentName}} {...args} />
        </div>
      </div>
      
      <div className="space-y-4">
        <h3 className="text-lg font-semibold">Tablet (768px)</h3>
        <div style={{ width: '768px', border: '1px solid #e5e7eb', padding: '1rem' }}>
          <{{pascalCase componentName}} {...args} />
        </div>
      </div>
      
      <div className="space-y-4">
        <h3 className="text-lg font-semibold">Desktop (1024px+)</h3>
        <div style={{ width: '100%', maxWidth: '1024px', border: '1px solid #e5e7eb', padding: '1rem' }}>
          <{{pascalCase componentName}} {...args} />
        </div>
      </div>
    </div>
  ),
  args: {
    ...Default.args,
  },
  parameters: {
    layout: 'fullscreen',
    viewport: {
      disable: true
    }
  },
};
{{/if}}

{{#if localization}}
// Localization showcase
export const Localization{{#if typescript}}: Story{{/if}} = {
  render: (args) => (
    <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 p-6">
      <div className="space-y-4">
        <h3 className="text-lg font-semibold">Norwegian Bokmål (nb-NO)</h3>
        <I18nProvider translations={mockTranslations} locale="nb-NO">
          <{{pascalCase componentName}} {...args} />
        </I18nProvider>
      </div>
      
      <div className="space-y-4">
        <h3 className="text-lg font-semibold">English (en-US)</h3>
        <I18nProvider translations={mockTranslations} locale="en-US">
          <{{pascalCase componentName}} {...args} />
        </I18nProvider>
      </div>
      
      <div className="space-y-4">
        <h3 className="text-lg font-semibold">Arabic (ar-SA) - RTL</h3>
        <I18nProvider translations={mockTranslations} locale="ar-SA">
          <div dir="rtl">
            <{{pascalCase componentName}} {...args} />
          </div>
        </I18nProvider>
      </div>
      
      <div className="space-y-4">
        <h3 className="text-lg font-semibold">French (fr-FR)</h3>
        <I18nProvider translations={mockTranslations} locale="fr-FR">
          <{{pascalCase componentName}} {...args} />
        </I18nProvider>
      </div>
    </div>
  ),
  args: {
    ...Default.args,
  },
  parameters: {
    layout: 'fullscreen',
  },
};
{{/if}}

{{#if darkMode}}
// Dark mode showcase
export const DarkMode{{#if typescript}}: Story{{/if}} = {
  render: (args) => (
    <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 p-6">
      <div className="space-y-4">
        <h3 className="text-lg font-semibold">Light Theme</h3>
        <div className="bg-white p-6 rounded-lg border">
          <{{pascalCase componentName}} {...args} />
        </div>
      </div>
      
      <div className="space-y-4">
        <h3 className="text-lg font-semibold text-white">Dark Theme</h3>
        <div className="bg-gray-900 p-6 rounded-lg border border-gray-700">
          <{{pascalCase componentName}} {...args} />
        </div>
      </div>
    </div>
  ),
  args: {
    ...Default.args,
  },
  parameters: {
    layout: 'fullscreen',
    backgrounds: {
      default: 'light'
    }
  },
};
{{/if}}

{{#if compliance.gdpr}}
// GDPR compliance demonstration
export const GDPRCompliance{{#if typescript}}: Story{{/if}} = {
  render: (args) => (
    <div className="space-y-6 p-6">
      <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
        <h3 className="text-lg font-semibold text-blue-900 mb-2">GDPR Compliance</h3>
        <p className="text-blue-800 text-sm">
          This component follows GDPR guidelines for data protection and user privacy. 
          It includes proper consent handling and data minimization principles.
        </p>
      </div>
      
      <{{pascalCase componentName}} {...args} />
      
      <div className="bg-gray-50 border border-gray-200 rounded-lg p-4">
        <h4 className="font-medium text-gray-900 mb-2">Privacy Features:</h4>
        <ul className="text-sm text-gray-700 space-y-1">
          <li>• Data collection requires explicit consent</li>
          <li>• Minimal data collection approach</li>
          <li>• User data deletion capabilities</li>
          <li>• Audit trail for data processing</li>
        </ul>
      </div>
    </div>
  ),
  args: {
    ...Default.args,
  },
  parameters: {
    layout: 'fullscreen',
  },
};
{{/if}}