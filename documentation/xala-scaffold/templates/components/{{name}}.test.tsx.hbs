import { render, screen{{#if accessibility.keyboardNavigation}}, userEvent{{/if}} } from '@testing-library/react';
{{#if localization.enabled}}
import { I18nextProvider } from 'react-i18next';
import { createTestI18n } from '../../../test/utils/i18n';
{{/if}}
import { {{name}} } from './{{name}}';
{{#if props.length}}
import type { {{name}}Props } from './{{name}}';
{{/if}}

{{#if localization.enabled}}
// Test i18n instance
const i18n = createTestI18n();

const renderWithI18n = (ui: React.ReactElement, options = {}) => {
  return render(
    <I18nextProvider i18n={i18n}>
      {ui}
    </I18nextProvider>,
    options
  );
};
{{/if}}

describe('{{name}}', () => {
{{#each tests}}
  {{code}}

{{/each}}
{{#if accessibility.ariaLabel}}
  test('has accessible label', () => {
    const ariaLabel = 'Test label';
    {{#if localization.enabled}}renderWithI18n{{else}}render{{/if}}(<{{name}} ariaLabel={ariaLabel} />);
    
    expect(screen.getByLabelText(ariaLabel)).toBeInTheDocument();
  });

{{/if}}
{{#if localization.enabled}}
  test('renders with different locales', () => {
    // Test Norwegian Bokm√•l
    i18n.changeLanguage('nb-NO');
    const { rerender } = renderWithI18n(<{{name}} />);
    
    // Test Arabic (RTL)
    i18n.changeLanguage('ar-SA');
    rerender(<{{name}} />);
    
    // Component should handle RTL layout
    expect(document.documentElement.dir).toBe('rtl');
  });

{{/if}}
{{#if styling === 'tailwind'}}
  test('applies correct CSS classes', () => {
    const customClass = 'custom-class';
    {{#if localization.enabled}}renderWithI18n{{else}}render{{/if}}(<{{name}} className={customClass} />);
    
    const element = screen.getByRole('{{getComponentRole type}}');
    expect(element).toHaveClass('{{kebabCase name}}');
    expect(element).toHaveClass(customClass);
  });

{{/if}}
{{#if type === 'form'}}
  test('handles form submission', async () => {
    const mockSubmit = jest.fn();
    const user = userEvent.setup();
    
    {{#if localization.enabled}}renderWithI18n{{else}}render{{/if}}(<{{name}} onSubmit={mockSubmit} />);
    
    const submitButton = screen.getByRole('button', { name: /submit/i });
    await user.click(submitButton);
    
    expect(mockSubmit).toHaveBeenCalled();
  });

{{/if}}
  test('meets WCAG AAA accessibility standards', async () => {
    const { container } = {{#if localization.enabled}}renderWithI18n{{else}}render{{/if}}(<{{name}} />);
    
    // Check for semantic HTML
    expect(container.querySelector('[role]')).toBeInTheDocument();
    
    // Check for proper heading hierarchy (if applicable)
    const headings = container.querySelectorAll('h1, h2, h3, h4, h5, h6');
    if (headings.length > 1) {
      // Ensure proper heading order
      const levels = Array.from(headings).map(h => parseInt(h.tagName.charAt(1)));
      expect(levels).toEqual([...levels].sort((a, b) => a - b));
    }
    
    // Check color contrast (basic check)
    const element = screen.getByRole('{{getComponentRole type}}');
    const computedStyle = window.getComputedStyle(element);
    
    // Ensure text is not too light (basic accessibility)
    expect(computedStyle.color).not.toBe('rgba(0, 0, 0, 0)');
  });
});

{{#if type === 'business'}}
// Integration tests
describe('{{name}} Integration', () => {
  test('handles loading states', () => {
    {{#if localization.enabled}}renderWithI18n{{else}}render{{/if}}(<{{name}} loading={true} />);
    
    expect(screen.getByText(/loading/i)).toBeInTheDocument();
  });
  
  test('handles error states', () => {
    const error = new Error('Test error');
    {{#if localization.enabled}}renderWithI18n{{else}}render{{/if}}(<{{name}} error={error} />);
    
    expect(screen.getByText(/error/i)).toBeInTheDocument();
  });
});
{{/if}}