import type { Meta, StoryObj } from '@storybook/react';
{{#if localization.enabled}}
import { I18nextProvider } from 'react-i18next';
import { createTestI18n } from '../../../test/utils/i18n';
{{/if}}
import { {{name}} } from './{{name}}';

{{#if localization.enabled}}
// Create i18n instance for Storybook
const i18n = createTestI18n();

// Decorator for localization
const withI18n = (Story: any, context: any) => {
  const locale = context.parameters?.locale || 'nb-NO';
  const direction = context.parameters?.direction || 'ltr';
  
  i18n.changeLanguage(locale);
  document.documentElement.dir = direction;
  
  return (
    <I18nextProvider i18n={i18n}>
      <Story />
    </I18nextProvider>
  );
};
{{/if}}

const meta: Meta<typeof {{name}}> = {
  title: 'Components/{{#if namespace}}{{pascalCase namespace}}/{{/if}}{{name}}',
  component: {{name}},
  parameters: {
    layout: 'centered',
    docs: {
      description: {
        component: `
{{name}} - {{type}} component

Generated with Xala Scaffold with the following features:
{{#if localization.enabled}}
- ✅ Localization support (5 languages)
{{/if}}
{{#if accessibility.ariaLabel}}
- ✅ WCAG AAA accessibility compliance
{{/if}}
{{#if styling === 'tailwind'}}
- ✅ Tailwind CSS styling
{{/if}}
{{#if features.memo}}
- ✅ React.memo optimization
{{/if}}
{{#if features.forwardRef}}
- ✅ forwardRef support
{{/if}}

## Norwegian Compliance
This component follows Norwegian government standards:
- NSM security classification: OPEN
- GDPR compliant data handling
- WCAG AAA accessibility standards
        `,
      },
    },
    a11y: {
      config: {
        rules: [
          {
            id: 'color-contrast',
            options: { level: 'AAA' },
          },
        ],
      },
    },
  },
  tags: ['autodocs'],
{{#if localization.enabled}}
  decorators: [withI18n],
{{/if}}
  argTypes: {
{{#each props}}
    {{name}}: {
      description: '{{description}}',
      {{#if (eq type 'boolean')}}
      control: { type: 'boolean' },
      {{else if (eq type 'string')}}
      control: { type: 'text' },
      {{else if (eq type 'number')}}
      control: { type: 'number' },
      {{else}}
      control: { type: 'object' },
      {{/if}}
    },
{{/each}}
    className: {
      description: 'Additional CSS classes',
      control: { type: 'text' },
    },
{{#if accessibility.ariaLabel}}
    ariaLabel: {
      description: 'Accessible label for screen readers',
      control: { type: 'text' },
    },
{{/if}}
  },
};

export default meta;
type Story = StoryObj<typeof meta>;

{{#each stories}}
export const {{name}}: Story = {
  args: {
{{#each args}}
    {{@key}}: {{{stringify this}}},
{{/each}}
  },
{{#if parameters}}
  parameters: {
{{#each parameters}}
    {{@key}}: {{{stringify this}}},
{{/each}}
  },
{{/if}}
};

{{/each}}

{{#if localization.enabled}}
// Accessibility story with high contrast
export const HighContrast: Story = {
  args: {
    ...Default.args,
    className: 'contrast-more',
  },
  parameters: {
    backgrounds: {
      default: 'dark',
    },
  },
};

// RTL layout story
export const RTLLayout: Story = {
  args: Default.args,
  parameters: {
    locale: 'ar-SA',
    direction: 'rtl',
  },
};
{{/if}}

{{#if type === 'form'}}
// Form states
export const WithValidationErrors: Story = {
  args: {
    ...Default.args,
    errors: {
      email: 'Invalid email address',
      password: 'Password too short',
    },
  },
};

export const Loading: Story = {
  args: {
    ...Default.args,
    loading: true,
  },
};
{{/if}}

{{#if type === 'business'}}
// Business component states
export const LoadingState: Story = {
  args: {
    ...Default.args,
    loading: true,
  },
};

export const ErrorState: Story = {
  args: {
    ...Default.args,
    error: new Error('Failed to load data'),
  },
};

export const EmptyState: Story = {
  args: {
    ...Default.args,
    data: null,
  },
};
{{/if}}

// Playground story for testing
export const Playground: Story = {
  args: Default.args,
  parameters: {
    docs: {
      story: {
        height: '400px',
      },
    },
  },
};