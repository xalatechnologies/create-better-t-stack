import React from 'react';
{{#if typescript}}
import { useTokens } from '@xala-technologies/ui-system';
{{/if}}
{{#if localization}}
import { useTranslation } from '../hooks/useTranslation';
{{/if}}

{{#if typescript}}
// {{wcagLevel compliance.wcag}}
// {{gdprNotice}}
// {{nsmClassification compliance.nsm.classification}}

export interface {{pascalCase name}}Props {
  readonly className?: string;
  readonly children?: React.ReactNode;
  {{#each props}}
  readonly {{name}}{{#unless required}}?{{/unless}}: {{type}};
  {{/each}}
  {{#if hasEvents}}
  readonly onClick?: () => void;
  readonly onFocus?: () => void;
  readonly onBlur?: () => void;
  {{/if}}
  {{#if accessibility.ariaSupport}}
  readonly 'aria-label'?: string;
  readonly 'aria-describedby'?: string;
  readonly 'aria-labelledby'?: string;
  {{/if}}
}
{{/if}}

/**
 * {{description}}
 * 
 * Features:
 * - WCAG {{compliance.wcag}} compliant
 * - Norwegian localization support
 * - Design token integration
 * - Server-side rendering safe
 * 
 * @param props - The component props
 * @returns The rendered {{name}} component
 */
export const {{pascalCase name}}{{#if typescript}}: React.FC<{{pascalCase name}}Props>{{/if}} = ({{#if typescript}}{
  className,
  children,
  {{#each props}}
  {{name}}{{#if defaultValue}} = {{defaultValue}}{{/if}},
  {{/each}}
  {{#if hasEvents}}
  onClick,
  onFocus,
  onBlur,
  {{/if}}
  {{#if accessibility.ariaSupport}}
  'aria-label': ariaLabel,
  'aria-describedby': ariaDescribedBy,
  'aria-labelledby': ariaLabelledBy,
  {{/if}}
  ...restProps
}{{else}}props{{/if}}) => {
  {{#if typescript}}
  const tokens = useTokens();
  {{/if}}
  {{#if localization}}
  const { t } = useTranslation();
  {{/if}}
  
  {{#if hasState}}
  const [{{stateName}}, set{{pascalCase stateName}}] = React.useState{{#if typescript}}<{{stateType}}>{{/if}}({{stateInitialValue}});
  {{/if}}
  
  {{#if hasEffects}}
  React.useEffect(() => {
    // Component mount effect
    {{#if compliance.gdpr}}
    // GDPR: Log component usage for analytics (with user consent)
    {{/if}}
    
    return () => {
      // Cleanup effect
    };
  }, []);
  {{/if}}
  
  {{#if hasEvents}}
  const handleClick = React.useCallback(() => {
    {{#if accessibility.announcements}}
    // Announce action to screen readers
    {{/if}}
    onClick?.();
  }, [onClick]);
  
  const handleKeyDown = React.useCallback((event: React.KeyboardEvent) => {
    if (event.key === 'Enter' || event.key === ' ') {
      event.preventDefault();
      handleClick();
    }
  }, [handleClick]);
  {{/if}}
  
  {{#if styling.tokenBased}}
  const styles = React.useMemo(() => ({
    container: {
      {{#each styling.tokens}}
      {{kebabCase property}}: tokens.{{tokenPath}},
      {{/each}}
    },
  }), [tokens]);
  {{/if}}
  
  return (
    <{{htmlTag}}
      className={{{#if styling.tokenBased}}[
        'xala-{{kebabCase name}}',
        className,
      ].filter(Boolean).join(' '){{else}}`xala-{{kebabCase name}} ${className || ''}`{{/if}}}
      {{#if styling.tokenBased}}
      style={styles.container}
      {{/if}}
      {{#if hasEvents}}
      onClick={handleClick}
      onKeyDown={handleKeyDown}
      onFocus={onFocus}
      onBlur={onBlur}
      {{/if}}
      {{#if accessibility.ariaSupport}}
      aria-label={ariaLabel{{#if localization}} || t('{{kebabCase name}}.ariaLabel'){{/if}}}
      aria-describedby={ariaDescribedBy}
      aria-labelledby={ariaLabelledBy}
      {{/if}}
      {{#if accessibility.keyboardNavigation}}
      tabIndex={0}
      role="{{accessibility.role}}"
      {{/if}}
      {{#if typescript}}
      {...restProps}
      {{/if}}
    >
      {{#if hasIcon}}
      <span className="xala-{{kebabCase name}}__icon" aria-hidden="true">
        {/* Icon content */}
      </span>
      {{/if}}
      
      {{#if hasContent}}
      <span className="xala-{{kebabCase name}}__content">
        {{#if localization}}
        {children || t('{{kebabCase name}}.defaultText')}
        {{else}}
        {children}
        {{/if}}
      </span>
      {{/if}}
      
      {{#if hasLoader}}
      {{{stateName}} && (
        <span className="xala-{{kebabCase name}}__loader" aria-live="polite">
          {{#if localization}}
          {t('common.loading')}
          {{else}}
          Loading...
          {{/if}}
        </span>
      )}
      {{/if}}
    </{{htmlTag}}>
  );
};

{{#if typescript}}
// Default props for better developer experience
{{pascalCase name}}.defaultProps = {
  {{#each props}}
  {{#if defaultValue}}
  {{name}}: {{defaultValue}},
  {{/if}}
  {{/each}}
} as Partial<{{pascalCase name}}Props>;
{{/if}}

{{#if displayName}}
{{pascalCase name}}.displayName = '{{pascalCase name}}';
{{/if}}

export default {{pascalCase name}};