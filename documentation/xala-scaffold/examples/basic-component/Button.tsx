/**
 * Example: Basic Button Component
 * 
 * This example demonstrates a basic button component generated by the
 * Xala Scaffolding System with Norwegian compliance and accessibility.
 * 
 * Features demonstrated:
 * - TypeScript strict mode
 * - Norwegian compliance (NSM classification)
 * - WCAG AAA accessibility
 * - Multi-language support
 * - Design token usage
 * - Comprehensive prop types
 */

import React, { forwardRef } from 'react';
import { useTranslation } from '@/hooks/useTranslation';
import { useAuditLogger } from '@/hooks/useAuditLogger';
import { NSMClassification } from '@/types/compliance';

// Strict TypeScript interface with readonly props
interface ButtonProps {
  readonly variant?: 'primary' | 'secondary' | 'destructive' | 'ghost';
  readonly size?: 'small' | 'medium' | 'large';
  readonly loading?: boolean;
  readonly disabled?: boolean;
  readonly fullWidth?: boolean;
  readonly children: React.ReactNode;
  readonly onClick?: (event: React.MouseEvent<HTMLButtonElement>) => void;
  readonly type?: 'button' | 'submit' | 'reset';
  readonly ariaLabel?: string;
  readonly ariaDescribedBy?: string;
  readonly className?: string;
  readonly 'data-testid'?: string;
  readonly classification?: NSMClassification;
}

/**
 * Button component with Norwegian compliance and accessibility
 * 
 * @example
 * ```tsx
 * <Button variant="primary" size="medium" onClick={handleClick}>
 *   Klikk her
 * </Button>
 * 
 * <Button 
 *   variant="destructive" 
 *   classification={NSMClassification.RESTRICTED}
 *   ariaLabel="Slett bruker"
 * >
 *   Slett
 * </Button>
 * ```
 */
export const Button = forwardRef<HTMLButtonElement, ButtonProps>(({
  variant = 'primary',
  size = 'medium',
  loading = false,
  disabled = false,
  fullWidth = false,
  children,
  onClick,
  type = 'button',
  ariaLabel,
  ariaDescribedBy,
  className = '',
  'data-testid': testId,
  classification = NSMClassification.OPEN,
  ...props
}, ref): JSX.Element => {
  const { t, locale } = useTranslation();
  const auditLogger = useAuditLogger();
  
  // Handle click with audit logging for compliance
  const handleClick = (event: React.MouseEvent<HTMLButtonElement>): void => {
    if (disabled || loading) {
      event.preventDefault();
      return;
    }
    
    // Log button interaction for NSM compliance
    if (classification !== NSMClassification.OPEN) {
      auditLogger.log({
        action: 'button_click',
        resource: 'Button',
        classification,
        metadata: {
          variant,
          size,
          locale,
          timestamp: new Date().toISOString(),
        },
      });
    }
    
    onClick?.(event);
  };
  
  // Generate CSS classes using design tokens
  const getVariantClasses = (): string => {
    const variantClasses = {
      primary: 'bg-blue-600 text-white hover:bg-blue-700 focus:ring-blue-500 border-transparent',
      secondary: 'bg-gray-100 text-gray-900 hover:bg-gray-200 focus:ring-gray-500 border-gray-300',
      destructive: 'bg-red-600 text-white hover:bg-red-700 focus:ring-red-500 border-transparent',
      ghost: 'bg-transparent text-gray-700 hover:bg-gray-100 focus:ring-gray-500 border-transparent',
    };
    return variantClasses[variant];
  };
  
  const getSizeClasses = (): string => {
    const sizeClasses = {
      small: 'h-8 px-3 text-sm',
      medium: 'h-10 px-4 text-base',
      large: 'h-12 px-6 text-lg',
    };
    return sizeClasses[size];
  };
  
  const baseClasses = [
    // Base styling
    'inline-flex items-center justify-center',
    'font-medium rounded-md border',
    'transition-colors duration-200',
    'focus:outline-none focus:ring-2 focus:ring-offset-2',
    
    // Accessibility - WCAG AAA focus indicators
    'focus-visible:ring-2 focus-visible:ring-offset-2',
    
    // Disabled state
    disabled || loading ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer',
    
    // Full width option
    fullWidth ? 'w-full' : '',
    
    // Size and variant classes
    getSizeClasses(),
    getVariantClasses(),
    
    // Custom classes
    className,
  ].filter(Boolean).join(' ');
  
  return (
    <button
      ref={ref}
      type={type}
      className={baseClasses}
      disabled={disabled || loading}
      onClick={handleClick}
      
      // Accessibility attributes (WCAG AAA compliance)
      aria-label={ariaLabel || (typeof children === 'string' ? children : undefined)}
      aria-describedby={ariaDescribedBy}
      aria-disabled={disabled || loading}
      aria-busy={loading}
      
      // Norwegian compliance attributes
      data-nsm-classification={classification}
      data-testid={testId || `button-${variant}-${size}`}
      lang={locale}
      
      // Additional props
      {...props}
    >
      {loading && (
        <svg
          className="animate-spin -ml-1 mr-2 h-4 w-4"
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 24 24"
          aria-hidden="true"
        >
          <circle
            className="opacity-25"
            cx="12"
            cy="12"
            r="10"
            stroke="currentColor"
            strokeWidth="4"
          />
          <path
            className="opacity-75"
            fill="currentColor"
            d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
          />
        </svg>
      )}
      
      <span className={loading ? 'opacity-70' : ''}>
        {loading ? t('common.loading') : children}
      </span>
    </button>
  );
});

// Display name for React DevTools
Button.displayName = 'Button';

// Default export
export default Button;

// Re-export types for convenience
export type { ButtonProps };